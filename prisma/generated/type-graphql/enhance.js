"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyInputTypesEnhanceMap = exports.applyOutputTypesEnhanceMap = exports.applyModelsEnhanceMap = exports.applyRelationResolversEnhanceMap = exports.applyArgsTypesEnhanceMap = exports.applyResolversEnhanceMap = void 0;
const tslib_1 = require("tslib");
const tslib = tslib_1.__importStar(require("tslib"));
const crudResolvers = tslib_1.__importStar(require("./resolvers/crud/resolvers-crud.index"));
const argsTypes = tslib_1.__importStar(require("./resolvers/crud/args.index"));
const actionResolvers = tslib_1.__importStar(require("./resolvers/crud/resolvers-actions.index"));
const relationResolvers = tslib_1.__importStar(require("./resolvers/relations/resolvers.index"));
const models = tslib_1.__importStar(require("./models"));
const outputTypes = tslib_1.__importStar(require("./resolvers/outputs"));
const inputTypes = tslib_1.__importStar(require("./resolvers/inputs"));
const crudResolversMap = {
    User: crudResolvers.UserCrudResolver,
    NotificationSettings: crudResolvers.NotificationSettingsCrudResolver,
    Tenant: crudResolvers.TenantCrudResolver,
    Billing: crudResolvers.BillingCrudResolver,
    Comment: crudResolvers.CommentCrudResolver,
    Reply: crudResolvers.ReplyCrudResolver,
    Reaction: crudResolvers.ReactionCrudResolver,
    Request: crudResolvers.RequestCrudResolver,
    Notification: crudResolvers.NotificationCrudResolver,
    LLMQuery: crudResolvers.LLMQueryCrudResolver,
    Document: crudResolvers.DocumentCrudResolver
};
const actionResolversMap = {
    User: {
        user: actionResolvers.FindUniqueUserResolver,
        findFirstUser: actionResolvers.FindFirstUserResolver,
        users: actionResolvers.FindManyUserResolver,
        createUser: actionResolvers.CreateUserResolver,
        createManyUser: actionResolvers.CreateManyUserResolver,
        deleteUser: actionResolvers.DeleteUserResolver,
        updateUser: actionResolvers.UpdateUserResolver,
        deleteManyUser: actionResolvers.DeleteManyUserResolver,
        updateManyUser: actionResolvers.UpdateManyUserResolver,
        upsertUser: actionResolvers.UpsertUserResolver,
        aggregateUser: actionResolvers.AggregateUserResolver,
        groupByUser: actionResolvers.GroupByUserResolver
    },
    NotificationSettings: {
        findUniqueNotificationSettings: actionResolvers.FindUniqueNotificationSettingsResolver,
        findFirstNotificationSettings: actionResolvers.FindFirstNotificationSettingsResolver,
        findManyNotificationSettings: actionResolvers.FindManyNotificationSettingsResolver,
        createNotificationSettings: actionResolvers.CreateNotificationSettingsResolver,
        createManyNotificationSettings: actionResolvers.CreateManyNotificationSettingsResolver,
        deleteNotificationSettings: actionResolvers.DeleteNotificationSettingsResolver,
        updateNotificationSettings: actionResolvers.UpdateNotificationSettingsResolver,
        deleteManyNotificationSettings: actionResolvers.DeleteManyNotificationSettingsResolver,
        updateManyNotificationSettings: actionResolvers.UpdateManyNotificationSettingsResolver,
        upsertNotificationSettings: actionResolvers.UpsertNotificationSettingsResolver,
        aggregateNotificationSettings: actionResolvers.AggregateNotificationSettingsResolver,
        groupByNotificationSettings: actionResolvers.GroupByNotificationSettingsResolver
    },
    Tenant: {
        tenant: actionResolvers.FindUniqueTenantResolver,
        findFirstTenant: actionResolvers.FindFirstTenantResolver,
        tenants: actionResolvers.FindManyTenantResolver,
        createTenant: actionResolvers.CreateTenantResolver,
        createManyTenant: actionResolvers.CreateManyTenantResolver,
        deleteTenant: actionResolvers.DeleteTenantResolver,
        updateTenant: actionResolvers.UpdateTenantResolver,
        deleteManyTenant: actionResolvers.DeleteManyTenantResolver,
        updateManyTenant: actionResolvers.UpdateManyTenantResolver,
        upsertTenant: actionResolvers.UpsertTenantResolver,
        aggregateTenant: actionResolvers.AggregateTenantResolver,
        groupByTenant: actionResolvers.GroupByTenantResolver
    },
    Billing: {
        billing: actionResolvers.FindUniqueBillingResolver,
        findFirstBilling: actionResolvers.FindFirstBillingResolver,
        billings: actionResolvers.FindManyBillingResolver,
        createBilling: actionResolvers.CreateBillingResolver,
        createManyBilling: actionResolvers.CreateManyBillingResolver,
        deleteBilling: actionResolvers.DeleteBillingResolver,
        updateBilling: actionResolvers.UpdateBillingResolver,
        deleteManyBilling: actionResolvers.DeleteManyBillingResolver,
        updateManyBilling: actionResolvers.UpdateManyBillingResolver,
        upsertBilling: actionResolvers.UpsertBillingResolver,
        aggregateBilling: actionResolvers.AggregateBillingResolver,
        groupByBilling: actionResolvers.GroupByBillingResolver
    },
    Comment: {
        comment: actionResolvers.FindUniqueCommentResolver,
        findFirstComment: actionResolvers.FindFirstCommentResolver,
        comments: actionResolvers.FindManyCommentResolver,
        createComment: actionResolvers.CreateCommentResolver,
        createManyComment: actionResolvers.CreateManyCommentResolver,
        deleteComment: actionResolvers.DeleteCommentResolver,
        updateComment: actionResolvers.UpdateCommentResolver,
        deleteManyComment: actionResolvers.DeleteManyCommentResolver,
        updateManyComment: actionResolvers.UpdateManyCommentResolver,
        upsertComment: actionResolvers.UpsertCommentResolver,
        aggregateComment: actionResolvers.AggregateCommentResolver,
        groupByComment: actionResolvers.GroupByCommentResolver
    },
    Reply: {
        reply: actionResolvers.FindUniqueReplyResolver,
        findFirstReply: actionResolvers.FindFirstReplyResolver,
        replies: actionResolvers.FindManyReplyResolver,
        createReply: actionResolvers.CreateReplyResolver,
        createManyReply: actionResolvers.CreateManyReplyResolver,
        deleteReply: actionResolvers.DeleteReplyResolver,
        updateReply: actionResolvers.UpdateReplyResolver,
        deleteManyReply: actionResolvers.DeleteManyReplyResolver,
        updateManyReply: actionResolvers.UpdateManyReplyResolver,
        upsertReply: actionResolvers.UpsertReplyResolver,
        aggregateReply: actionResolvers.AggregateReplyResolver,
        groupByReply: actionResolvers.GroupByReplyResolver
    },
    Reaction: {
        reaction: actionResolvers.FindUniqueReactionResolver,
        findFirstReaction: actionResolvers.FindFirstReactionResolver,
        reactions: actionResolvers.FindManyReactionResolver,
        createReaction: actionResolvers.CreateReactionResolver,
        createManyReaction: actionResolvers.CreateManyReactionResolver,
        deleteReaction: actionResolvers.DeleteReactionResolver,
        updateReaction: actionResolvers.UpdateReactionResolver,
        deleteManyReaction: actionResolvers.DeleteManyReactionResolver,
        updateManyReaction: actionResolvers.UpdateManyReactionResolver,
        upsertReaction: actionResolvers.UpsertReactionResolver,
        aggregateReaction: actionResolvers.AggregateReactionResolver,
        groupByReaction: actionResolvers.GroupByReactionResolver
    },
    Request: {
        request: actionResolvers.FindUniqueRequestResolver,
        findFirstRequest: actionResolvers.FindFirstRequestResolver,
        requests: actionResolvers.FindManyRequestResolver,
        createRequest: actionResolvers.CreateRequestResolver,
        createManyRequest: actionResolvers.CreateManyRequestResolver,
        deleteRequest: actionResolvers.DeleteRequestResolver,
        updateRequest: actionResolvers.UpdateRequestResolver,
        deleteManyRequest: actionResolvers.DeleteManyRequestResolver,
        updateManyRequest: actionResolvers.UpdateManyRequestResolver,
        upsertRequest: actionResolvers.UpsertRequestResolver,
        aggregateRequest: actionResolvers.AggregateRequestResolver,
        groupByRequest: actionResolvers.GroupByRequestResolver
    },
    Notification: {
        notification: actionResolvers.FindUniqueNotificationResolver,
        findFirstNotification: actionResolvers.FindFirstNotificationResolver,
        notifications: actionResolvers.FindManyNotificationResolver,
        createNotification: actionResolvers.CreateNotificationResolver,
        createManyNotification: actionResolvers.CreateManyNotificationResolver,
        deleteNotification: actionResolvers.DeleteNotificationResolver,
        updateNotification: actionResolvers.UpdateNotificationResolver,
        deleteManyNotification: actionResolvers.DeleteManyNotificationResolver,
        updateManyNotification: actionResolvers.UpdateManyNotificationResolver,
        upsertNotification: actionResolvers.UpsertNotificationResolver,
        aggregateNotification: actionResolvers.AggregateNotificationResolver,
        groupByNotification: actionResolvers.GroupByNotificationResolver
    },
    LLMQuery: {
        lLMQuery: actionResolvers.FindUniqueLLMQueryResolver,
        findFirstLLMQuery: actionResolvers.FindFirstLLMQueryResolver,
        lLMQueries: actionResolvers.FindManyLLMQueryResolver,
        createLLMQuery: actionResolvers.CreateLLMQueryResolver,
        createManyLLMQuery: actionResolvers.CreateManyLLMQueryResolver,
        deleteLLMQuery: actionResolvers.DeleteLLMQueryResolver,
        updateLLMQuery: actionResolvers.UpdateLLMQueryResolver,
        deleteManyLLMQuery: actionResolvers.DeleteManyLLMQueryResolver,
        updateManyLLMQuery: actionResolvers.UpdateManyLLMQueryResolver,
        upsertLLMQuery: actionResolvers.UpsertLLMQueryResolver,
        aggregateLLMQuery: actionResolvers.AggregateLLMQueryResolver,
        groupByLLMQuery: actionResolvers.GroupByLLMQueryResolver
    },
    Document: {
        document: actionResolvers.FindUniqueDocumentResolver,
        findFirstDocument: actionResolvers.FindFirstDocumentResolver,
        documents: actionResolvers.FindManyDocumentResolver,
        createDocument: actionResolvers.CreateDocumentResolver,
        createManyDocument: actionResolvers.CreateManyDocumentResolver,
        deleteDocument: actionResolvers.DeleteDocumentResolver,
        updateDocument: actionResolvers.UpdateDocumentResolver,
        deleteManyDocument: actionResolvers.DeleteManyDocumentResolver,
        updateManyDocument: actionResolvers.UpdateManyDocumentResolver,
        upsertDocument: actionResolvers.UpsertDocumentResolver,
        aggregateDocument: actionResolvers.AggregateDocumentResolver,
        groupByDocument: actionResolvers.GroupByDocumentResolver
    }
};
const crudResolversInfo = {
    User: ["user", "findFirstUser", "users", "createUser", "createManyUser", "deleteUser", "updateUser", "deleteManyUser", "updateManyUser", "upsertUser", "aggregateUser", "groupByUser"],
    NotificationSettings: ["findUniqueNotificationSettings", "findFirstNotificationSettings", "findManyNotificationSettings", "createNotificationSettings", "createManyNotificationSettings", "deleteNotificationSettings", "updateNotificationSettings", "deleteManyNotificationSettings", "updateManyNotificationSettings", "upsertNotificationSettings", "aggregateNotificationSettings", "groupByNotificationSettings"],
    Tenant: ["tenant", "findFirstTenant", "tenants", "createTenant", "createManyTenant", "deleteTenant", "updateTenant", "deleteManyTenant", "updateManyTenant", "upsertTenant", "aggregateTenant", "groupByTenant"],
    Billing: ["billing", "findFirstBilling", "billings", "createBilling", "createManyBilling", "deleteBilling", "updateBilling", "deleteManyBilling", "updateManyBilling", "upsertBilling", "aggregateBilling", "groupByBilling"],
    Comment: ["comment", "findFirstComment", "comments", "createComment", "createManyComment", "deleteComment", "updateComment", "deleteManyComment", "updateManyComment", "upsertComment", "aggregateComment", "groupByComment"],
    Reply: ["reply", "findFirstReply", "replies", "createReply", "createManyReply", "deleteReply", "updateReply", "deleteManyReply", "updateManyReply", "upsertReply", "aggregateReply", "groupByReply"],
    Reaction: ["reaction", "findFirstReaction", "reactions", "createReaction", "createManyReaction", "deleteReaction", "updateReaction", "deleteManyReaction", "updateManyReaction", "upsertReaction", "aggregateReaction", "groupByReaction"],
    Request: ["request", "findFirstRequest", "requests", "createRequest", "createManyRequest", "deleteRequest", "updateRequest", "deleteManyRequest", "updateManyRequest", "upsertRequest", "aggregateRequest", "groupByRequest"],
    Notification: ["notification", "findFirstNotification", "notifications", "createNotification", "createManyNotification", "deleteNotification", "updateNotification", "deleteManyNotification", "updateManyNotification", "upsertNotification", "aggregateNotification", "groupByNotification"],
    LLMQuery: ["lLMQuery", "findFirstLLMQuery", "lLMQueries", "createLLMQuery", "createManyLLMQuery", "deleteLLMQuery", "updateLLMQuery", "deleteManyLLMQuery", "updateManyLLMQuery", "upsertLLMQuery", "aggregateLLMQuery", "groupByLLMQuery"],
    Document: ["document", "findFirstDocument", "documents", "createDocument", "createManyDocument", "deleteDocument", "updateDocument", "deleteManyDocument", "updateManyDocument", "upsertDocument", "aggregateDocument", "groupByDocument"]
};
const argsInfo = {
    FindUniqueUserArgs: ["where"],
    FindFirstUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateUserArgs: ["data"],
    CreateManyUserArgs: ["data"],
    DeleteUserArgs: ["where"],
    UpdateUserArgs: ["data", "where"],
    DeleteManyUserArgs: ["where"],
    UpdateManyUserArgs: ["data", "where"],
    UpsertUserArgs: ["where", "create", "update"],
    AggregateUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueNotificationSettingsArgs: ["where"],
    FindFirstNotificationSettingsArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyNotificationSettingsArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateNotificationSettingsArgs: ["data"],
    CreateManyNotificationSettingsArgs: ["data"],
    DeleteNotificationSettingsArgs: ["where"],
    UpdateNotificationSettingsArgs: ["data", "where"],
    DeleteManyNotificationSettingsArgs: ["where"],
    UpdateManyNotificationSettingsArgs: ["data", "where"],
    UpsertNotificationSettingsArgs: ["where", "create", "update"],
    AggregateNotificationSettingsArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByNotificationSettingsArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueTenantArgs: ["where"],
    FindFirstTenantArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyTenantArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateTenantArgs: ["data"],
    CreateManyTenantArgs: ["data"],
    DeleteTenantArgs: ["where"],
    UpdateTenantArgs: ["data", "where"],
    DeleteManyTenantArgs: ["where"],
    UpdateManyTenantArgs: ["data", "where"],
    UpsertTenantArgs: ["where", "create", "update"],
    AggregateTenantArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByTenantArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueBillingArgs: ["where"],
    FindFirstBillingArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyBillingArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateBillingArgs: ["data"],
    CreateManyBillingArgs: ["data"],
    DeleteBillingArgs: ["where"],
    UpdateBillingArgs: ["data", "where"],
    DeleteManyBillingArgs: ["where"],
    UpdateManyBillingArgs: ["data", "where"],
    UpsertBillingArgs: ["where", "create", "update"],
    AggregateBillingArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByBillingArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueCommentArgs: ["where"],
    FindFirstCommentArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyCommentArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateCommentArgs: ["data"],
    CreateManyCommentArgs: ["data"],
    DeleteCommentArgs: ["where"],
    UpdateCommentArgs: ["data", "where"],
    DeleteManyCommentArgs: ["where"],
    UpdateManyCommentArgs: ["data", "where"],
    UpsertCommentArgs: ["where", "create", "update"],
    AggregateCommentArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByCommentArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueReplyArgs: ["where"],
    FindFirstReplyArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyReplyArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateReplyArgs: ["data"],
    CreateManyReplyArgs: ["data"],
    DeleteReplyArgs: ["where"],
    UpdateReplyArgs: ["data", "where"],
    DeleteManyReplyArgs: ["where"],
    UpdateManyReplyArgs: ["data", "where"],
    UpsertReplyArgs: ["where", "create", "update"],
    AggregateReplyArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByReplyArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueReactionArgs: ["where"],
    FindFirstReactionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyReactionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateReactionArgs: ["data"],
    CreateManyReactionArgs: ["data"],
    DeleteReactionArgs: ["where"],
    UpdateReactionArgs: ["data", "where"],
    DeleteManyReactionArgs: ["where"],
    UpdateManyReactionArgs: ["data", "where"],
    UpsertReactionArgs: ["where", "create", "update"],
    AggregateReactionArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByReactionArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueRequestArgs: ["where"],
    FindFirstRequestArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyRequestArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateRequestArgs: ["data"],
    CreateManyRequestArgs: ["data"],
    DeleteRequestArgs: ["where"],
    UpdateRequestArgs: ["data", "where"],
    DeleteManyRequestArgs: ["where"],
    UpdateManyRequestArgs: ["data", "where"],
    UpsertRequestArgs: ["where", "create", "update"],
    AggregateRequestArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByRequestArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueNotificationArgs: ["where"],
    FindFirstNotificationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyNotificationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateNotificationArgs: ["data"],
    CreateManyNotificationArgs: ["data"],
    DeleteNotificationArgs: ["where"],
    UpdateNotificationArgs: ["data", "where"],
    DeleteManyNotificationArgs: ["where"],
    UpdateManyNotificationArgs: ["data", "where"],
    UpsertNotificationArgs: ["where", "create", "update"],
    AggregateNotificationArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByNotificationArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueLLMQueryArgs: ["where"],
    FindFirstLLMQueryArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyLLMQueryArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateLLMQueryArgs: ["data"],
    CreateManyLLMQueryArgs: ["data"],
    DeleteLLMQueryArgs: ["where"],
    UpdateLLMQueryArgs: ["data", "where"],
    DeleteManyLLMQueryArgs: ["where"],
    UpdateManyLLMQueryArgs: ["data", "where"],
    UpsertLLMQueryArgs: ["where", "create", "update"],
    AggregateLLMQueryArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByLLMQueryArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueDocumentArgs: ["where"],
    FindFirstDocumentArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyDocumentArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateDocumentArgs: ["data"],
    CreateManyDocumentArgs: ["data"],
    DeleteDocumentArgs: ["where"],
    UpdateDocumentArgs: ["data", "where"],
    DeleteManyDocumentArgs: ["where"],
    UpdateManyDocumentArgs: ["data", "where"],
    UpsertDocumentArgs: ["where", "create", "update"],
    AggregateDocumentArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByDocumentArgs: ["where", "orderBy", "by", "having", "take", "skip"]
};
function applyResolversEnhanceMap(resolversEnhanceMap) {
    for (const resolversEnhanceMapKey of Object.keys(resolversEnhanceMap)) {
        const modelName = resolversEnhanceMapKey;
        const crudTarget = crudResolversMap[modelName].prototype;
        const resolverActionsConfig = resolversEnhanceMap[modelName];
        const actionResolversConfig = actionResolversMap[modelName];
        if (resolverActionsConfig._all) {
            const allActionsDecorators = resolverActionsConfig._all;
            const resolverActionNames = crudResolversInfo[modelName];
            for (const resolverActionName of resolverActionNames) {
                const actionTarget = actionResolversConfig[resolverActionName].prototype;
                tslib.__decorate(allActionsDecorators, crudTarget, resolverActionName, null);
                tslib.__decorate(allActionsDecorators, actionTarget, resolverActionName, null);
            }
        }
        const resolverActionsToApply = Object.keys(resolverActionsConfig).filter(it => it !== "_all");
        for (const resolverActionName of resolverActionsToApply) {
            const decorators = resolverActionsConfig[resolverActionName];
            const actionTarget = actionResolversConfig[resolverActionName].prototype;
            tslib.__decorate(decorators, crudTarget, resolverActionName, null);
            tslib.__decorate(decorators, actionTarget, resolverActionName, null);
        }
    }
}
exports.applyResolversEnhanceMap = applyResolversEnhanceMap;
function applyArgsTypesEnhanceMap(argsTypesEnhanceMap) {
    for (const argsTypesEnhanceMapKey of Object.keys(argsTypesEnhanceMap)) {
        const argsTypeName = argsTypesEnhanceMapKey;
        const typeConfig = argsTypesEnhanceMap[argsTypeName];
        const typeClass = argsTypes[argsTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, argsInfo[argsTypeName]);
    }
}
exports.applyArgsTypesEnhanceMap = applyArgsTypesEnhanceMap;
const relationResolversMap = {
    User: relationResolvers.UserRelationsResolver,
    NotificationSettings: relationResolvers.NotificationSettingsRelationsResolver,
    Tenant: relationResolvers.TenantRelationsResolver,
    Billing: relationResolvers.BillingRelationsResolver,
    Comment: relationResolvers.CommentRelationsResolver,
    Reply: relationResolvers.ReplyRelationsResolver,
    Reaction: relationResolvers.ReactionRelationsResolver,
    Request: relationResolvers.RequestRelationsResolver,
    Notification: relationResolvers.NotificationRelationsResolver,
    LLMQuery: relationResolvers.LLMQueryRelationsResolver,
    Document: relationResolvers.DocumentRelationsResolver
};
const relationResolversInfo = {
    User: ["Tenant", "NotificationSettings", "Notifications", "Activity", "Queries", "Requests", "Comments", "Replies", "Reactions"],
    NotificationSettings: ["User"],
    Tenant: ["Users", "Queries", "Documents", "Billing"],
    Billing: ["Tenant"],
    Comment: ["Document", "Author", "Replies", "Reactions"],
    Reply: ["Comment", "Author", "Reactions"],
    Reaction: ["Comment", "Reply", "Author"],
    Request: ["Reporter"],
    Notification: ["User", "Actor"],
    LLMQuery: ["Tenant", "User"],
    Document: ["Tenant", "Comments"]
};
function applyRelationResolversEnhanceMap(relationResolversEnhanceMap) {
    for (const relationResolversEnhanceMapKey of Object.keys(relationResolversEnhanceMap)) {
        const modelName = relationResolversEnhanceMapKey;
        const relationResolverTarget = relationResolversMap[modelName].prototype;
        const relationResolverActionsConfig = relationResolversEnhanceMap[modelName];
        if (relationResolverActionsConfig._all) {
            const allActionsDecorators = relationResolverActionsConfig._all;
            const relationResolverActionNames = relationResolversInfo[modelName];
            for (const relationResolverActionName of relationResolverActionNames) {
                tslib.__decorate(allActionsDecorators, relationResolverTarget, relationResolverActionName, null);
            }
        }
        const relationResolverActionsToApply = Object.keys(relationResolverActionsConfig).filter(it => it !== "_all");
        for (const relationResolverActionName of relationResolverActionsToApply) {
            const decorators = relationResolverActionsConfig[relationResolverActionName];
            tslib.__decorate(decorators, relationResolverTarget, relationResolverActionName, null);
        }
    }
}
exports.applyRelationResolversEnhanceMap = applyRelationResolversEnhanceMap;
function applyTypeClassEnhanceConfig(enhanceConfig, typeClass, typePrototype, typeFieldNames) {
    if (enhanceConfig.class) {
        tslib.__decorate(enhanceConfig.class, typeClass);
    }
    if (enhanceConfig.fields) {
        if (enhanceConfig.fields._all) {
            const allFieldsDecorators = enhanceConfig.fields._all;
            for (const typeFieldName of typeFieldNames) {
                tslib.__decorate(allFieldsDecorators, typePrototype, typeFieldName, void 0);
            }
        }
        const configFieldsToApply = Object.keys(enhanceConfig.fields).filter(it => it !== "_all");
        for (const typeFieldName of configFieldsToApply) {
            const fieldDecorators = enhanceConfig.fields[typeFieldName];
            tslib.__decorate(fieldDecorators, typePrototype, typeFieldName, void 0);
        }
    }
}
const modelsInfo = {
    User: ["tenantId", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "createdAt", "updatedAt"],
    NotificationSettings: ["id", "newDocumentsIndexed", "documentUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "userId", "createdAt", "updatedAt"],
    Tenant: ["id", "name", "slug", "description", "logoImage", "avatar", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    Billing: ["id", "tenantId", "stripeCustomerId", "plan", "status", "createdAt", "updatedAt"],
    Comment: ["id", "text", "documentId", "authorId", "createdAt", "updatedAt"],
    Reply: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    Reaction: ["id", "type", "commentId", "replyId", "authorId", "createdAt", "updatedAt"],
    Request: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    Notification: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    LLMQuery: ["id", "tenantId", "queryLink", "question", "response", "createdAt", "updatedAt", "userId"],
    Document: ["id", "publishStatus", "indexStatus", "title", "link", "url", "source", "shortDescription", "tenantId", "createdAt", "updatedAt"]
};
function applyModelsEnhanceMap(modelsEnhanceMap) {
    for (const modelsEnhanceMapKey of Object.keys(modelsEnhanceMap)) {
        const modelName = modelsEnhanceMapKey;
        const modelConfig = modelsEnhanceMap[modelName];
        const modelClass = models[modelName];
        const modelTarget = modelClass.prototype;
        applyTypeClassEnhanceConfig(modelConfig, modelClass, modelTarget, modelsInfo[modelName]);
    }
}
exports.applyModelsEnhanceMap = applyModelsEnhanceMap;
const outputsInfo = {
    AggregateUser: ["_count", "_min", "_max"],
    UserGroupBy: ["tenantId", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateNotificationSettings: ["_count", "_min", "_max"],
    NotificationSettingsGroupBy: ["id", "newDocumentsIndexed", "documentUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "userId", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateTenant: ["_count", "_min", "_max"],
    TenantGroupBy: ["id", "name", "slug", "description", "logoImage", "avatar", "acceptedUserEmailDomains", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateBilling: ["_count", "_min", "_max"],
    BillingGroupBy: ["id", "tenantId", "stripeCustomerId", "plan", "status", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateComment: ["_count", "_min", "_max"],
    CommentGroupBy: ["id", "text", "documentId", "authorId", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateReply: ["_count", "_min", "_max"],
    ReplyGroupBy: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateReaction: ["_count", "_min", "_max"],
    ReactionGroupBy: ["id", "type", "commentId", "replyId", "authorId", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateRequest: ["_count", "_min", "_max"],
    RequestGroupBy: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "userId", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateNotification: ["_count", "_min", "_max"],
    NotificationGroupBy: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateLLMQuery: ["_count", "_min", "_max"],
    LLMQueryGroupBy: ["id", "tenantId", "queryLink", "question", "response", "createdAt", "updatedAt", "userId", "_count", "_min", "_max"],
    AggregateDocument: ["_count", "_min", "_max"],
    DocumentGroupBy: ["id", "publishStatus", "indexStatus", "title", "link", "url", "source", "shortDescription", "tenantId", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AffectedRowsOutput: ["count"],
    UserCount: ["Notifications", "Activity", "Queries", "Requests", "Comments", "Replies", "Reactions"],
    UserCountAggregate: ["tenantId", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "createdAt", "updatedAt", "_all"],
    UserMinAggregate: ["tenantId", "uid", "uuid", "id", "username", "email", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "createdAt", "updatedAt"],
    UserMaxAggregate: ["tenantId", "uid", "uuid", "id", "username", "email", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "createdAt", "updatedAt"],
    NotificationSettingsCountAggregate: ["id", "newDocumentsIndexed", "documentUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "userId", "createdAt", "updatedAt", "_all"],
    NotificationSettingsMinAggregate: ["id", "newDocumentsIndexed", "documentUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "userId", "createdAt", "updatedAt"],
    NotificationSettingsMaxAggregate: ["id", "newDocumentsIndexed", "documentUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "userId", "createdAt", "updatedAt"],
    TenantCount: ["Users", "Queries", "Documents"],
    TenantCountAggregate: ["id", "name", "slug", "description", "logoImage", "avatar", "acceptedUserEmailDomains", "createdAt", "updatedAt", "_all"],
    TenantMinAggregate: ["id", "name", "slug", "description", "logoImage", "avatar", "createdAt", "updatedAt"],
    TenantMaxAggregate: ["id", "name", "slug", "description", "logoImage", "avatar", "createdAt", "updatedAt"],
    BillingCountAggregate: ["id", "tenantId", "stripeCustomerId", "plan", "status", "createdAt", "updatedAt", "_all"],
    BillingMinAggregate: ["id", "tenantId", "stripeCustomerId", "plan", "status", "createdAt", "updatedAt"],
    BillingMaxAggregate: ["id", "tenantId", "stripeCustomerId", "plan", "status", "createdAt", "updatedAt"],
    CommentCount: ["Replies", "Reactions"],
    CommentCountAggregate: ["id", "text", "documentId", "authorId", "createdAt", "updatedAt", "_all"],
    CommentMinAggregate: ["id", "text", "documentId", "authorId", "createdAt", "updatedAt"],
    CommentMaxAggregate: ["id", "text", "documentId", "authorId", "createdAt", "updatedAt"],
    ReplyCount: ["Reactions"],
    ReplyCountAggregate: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt", "_all"],
    ReplyMinAggregate: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    ReplyMaxAggregate: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    ReactionCountAggregate: ["id", "type", "commentId", "replyId", "authorId", "createdAt", "updatedAt", "_all"],
    ReactionMinAggregate: ["id", "type", "commentId", "replyId", "authorId", "createdAt", "updatedAt"],
    ReactionMaxAggregate: ["id", "type", "commentId", "replyId", "authorId", "createdAt", "updatedAt"],
    RequestCountAggregate: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "userId", "createdAt", "updatedAt", "_all"],
    RequestMinAggregate: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    RequestMaxAggregate: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    NotificationCountAggregate: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt", "_all"],
    NotificationMinAggregate: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationMaxAggregate: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    LLMQueryCountAggregate: ["id", "tenantId", "queryLink", "question", "response", "createdAt", "updatedAt", "userId", "_all"],
    LLMQueryMinAggregate: ["id", "tenantId", "queryLink", "question", "response", "createdAt", "updatedAt", "userId"],
    LLMQueryMaxAggregate: ["id", "tenantId", "queryLink", "question", "response", "createdAt", "updatedAt", "userId"],
    DocumentCount: ["Comments"],
    DocumentCountAggregate: ["id", "publishStatus", "indexStatus", "title", "link", "url", "source", "shortDescription", "tenantId", "createdAt", "updatedAt", "_all"],
    DocumentMinAggregate: ["id", "publishStatus", "indexStatus", "title", "link", "url", "source", "shortDescription", "tenantId", "createdAt", "updatedAt"],
    DocumentMaxAggregate: ["id", "publishStatus", "indexStatus", "title", "link", "url", "source", "shortDescription", "tenantId", "createdAt", "updatedAt"]
};
function applyOutputTypesEnhanceMap(outputTypesEnhanceMap) {
    for (const outputTypeEnhanceMapKey of Object.keys(outputTypesEnhanceMap)) {
        const outputTypeName = outputTypeEnhanceMapKey;
        const typeConfig = outputTypesEnhanceMap[outputTypeName];
        const typeClass = outputTypes[outputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, outputsInfo[outputTypeName]);
    }
}
exports.applyOutputTypesEnhanceMap = applyOutputTypesEnhanceMap;
const inputsInfo = {
    UserWhereInput: ["AND", "OR", "NOT", "Tenant", "tenantId", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "NotificationSettings", "Notifications", "Activity", "Queries", "Requests", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    UserOrderByWithRelationInput: ["Tenant", "tenantId", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "NotificationSettings", "Notifications", "Activity", "Queries", "Requests", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    UserWhereUniqueInput: ["uid", "id", "username", "email"],
    UserOrderByWithAggregationInput: ["tenantId", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "createdAt", "updatedAt", "_count", "_max", "_min"],
    UserScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "tenantId", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "createdAt", "updatedAt"],
    NotificationSettingsWhereInput: ["AND", "OR", "NOT", "id", "newDocumentsIndexed", "documentUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "User", "userId", "createdAt", "updatedAt"],
    NotificationSettingsOrderByWithRelationInput: ["id", "newDocumentsIndexed", "documentUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "User", "userId", "createdAt", "updatedAt"],
    NotificationSettingsWhereUniqueInput: ["id", "userId"],
    NotificationSettingsOrderByWithAggregationInput: ["id", "newDocumentsIndexed", "documentUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "userId", "createdAt", "updatedAt", "_count", "_max", "_min"],
    NotificationSettingsScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "newDocumentsIndexed", "documentUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "userId", "createdAt", "updatedAt"],
    TenantWhereInput: ["AND", "OR", "NOT", "id", "name", "slug", "description", "logoImage", "avatar", "Users", "Queries", "Documents", "Billing", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    TenantOrderByWithRelationInput: ["id", "name", "slug", "description", "logoImage", "avatar", "Users", "Queries", "Documents", "Billing", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    TenantWhereUniqueInput: ["id", "slug"],
    TenantOrderByWithAggregationInput: ["id", "name", "slug", "description", "logoImage", "avatar", "acceptedUserEmailDomains", "createdAt", "updatedAt", "_count", "_max", "_min"],
    TenantScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "slug", "description", "logoImage", "avatar", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    BillingWhereInput: ["AND", "OR", "NOT", "id", "Tenant", "tenantId", "stripeCustomerId", "plan", "status", "createdAt", "updatedAt"],
    BillingOrderByWithRelationInput: ["id", "Tenant", "tenantId", "stripeCustomerId", "plan", "status", "createdAt", "updatedAt"],
    BillingWhereUniqueInput: ["id", "tenantId"],
    BillingOrderByWithAggregationInput: ["id", "tenantId", "stripeCustomerId", "plan", "status", "createdAt", "updatedAt", "_count", "_max", "_min"],
    BillingScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "tenantId", "stripeCustomerId", "plan", "status", "createdAt", "updatedAt"],
    CommentWhereInput: ["AND", "OR", "NOT", "id", "text", "Document", "documentId", "Author", "authorId", "Replies", "Reactions", "createdAt", "updatedAt"],
    CommentOrderByWithRelationInput: ["id", "text", "Document", "documentId", "Author", "authorId", "Replies", "Reactions", "createdAt", "updatedAt"],
    CommentWhereUniqueInput: ["id"],
    CommentOrderByWithAggregationInput: ["id", "text", "documentId", "authorId", "createdAt", "updatedAt", "_count", "_max", "_min"],
    CommentScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "text", "documentId", "authorId", "createdAt", "updatedAt"],
    ReplyWhereInput: ["AND", "OR", "NOT", "id", "text", "Comment", "commentId", "Author", "authorId", "Reactions", "createdAt", "updatedAt"],
    ReplyOrderByWithRelationInput: ["id", "text", "Comment", "commentId", "Author", "authorId", "Reactions", "createdAt", "updatedAt"],
    ReplyWhereUniqueInput: ["id"],
    ReplyOrderByWithAggregationInput: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt", "_count", "_max", "_min"],
    ReplyScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    ReactionWhereInput: ["AND", "OR", "NOT", "id", "type", "Comment", "commentId", "Reply", "replyId", "Author", "authorId", "createdAt", "updatedAt"],
    ReactionOrderByWithRelationInput: ["id", "type", "Comment", "commentId", "Reply", "replyId", "Author", "authorId", "createdAt", "updatedAt"],
    ReactionWhereUniqueInput: ["id"],
    ReactionOrderByWithAggregationInput: ["id", "type", "commentId", "replyId", "authorId", "createdAt", "updatedAt", "_count", "_max", "_min"],
    ReactionScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "type", "commentId", "replyId", "authorId", "createdAt", "updatedAt"],
    RequestWhereInput: ["AND", "OR", "NOT", "id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "Reporter", "userId", "createdAt", "updatedAt"],
    RequestOrderByWithRelationInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "Reporter", "userId", "createdAt", "updatedAt"],
    RequestWhereUniqueInput: ["id"],
    RequestOrderByWithAggregationInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "userId", "createdAt", "updatedAt", "_count", "_max", "_min"],
    RequestScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    NotificationWhereInput: ["AND", "OR", "NOT", "id", "description", "User", "userId", "Actor", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationOrderByWithRelationInput: ["id", "description", "User", "userId", "Actor", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationWhereUniqueInput: ["id"],
    NotificationOrderByWithAggregationInput: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt", "_count", "_max", "_min"],
    NotificationScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    LLMQueryWhereInput: ["AND", "OR", "NOT", "id", "Tenant", "tenantId", "queryLink", "question", "response", "createdAt", "updatedAt", "User", "userId"],
    LLMQueryOrderByWithRelationInput: ["id", "Tenant", "tenantId", "queryLink", "question", "response", "createdAt", "updatedAt", "User", "userId"],
    LLMQueryWhereUniqueInput: ["id"],
    LLMQueryOrderByWithAggregationInput: ["id", "tenantId", "queryLink", "question", "response", "createdAt", "updatedAt", "userId", "_count", "_max", "_min"],
    LLMQueryScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "tenantId", "queryLink", "question", "response", "createdAt", "updatedAt", "userId"],
    DocumentWhereInput: ["AND", "OR", "NOT", "id", "publishStatus", "indexStatus", "title", "link", "url", "source", "shortDescription", "Tenant", "tenantId", "Comments", "createdAt", "updatedAt"],
    DocumentOrderByWithRelationInput: ["id", "publishStatus", "indexStatus", "title", "link", "url", "source", "shortDescription", "Tenant", "tenantId", "Comments", "createdAt", "updatedAt"],
    DocumentWhereUniqueInput: ["id"],
    DocumentOrderByWithAggregationInput: ["id", "publishStatus", "indexStatus", "title", "link", "url", "source", "shortDescription", "tenantId", "createdAt", "updatedAt", "_count", "_max", "_min"],
    DocumentScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "publishStatus", "indexStatus", "title", "link", "url", "source", "shortDescription", "tenantId", "createdAt", "updatedAt"],
    UserCreateInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "NotificationSettings", "Notifications", "Activity", "Queries", "Requests", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    UserUpdateInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "NotificationSettings", "Notifications", "Activity", "Queries", "Requests", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    UserCreateManyInput: ["tenantId", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "createdAt", "updatedAt"],
    UserUpdateManyMutationInput: ["uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "createdAt", "updatedAt"],
    NotificationSettingsCreateInput: ["id", "newDocumentsIndexed", "documentUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "User", "createdAt", "updatedAt"],
    NotificationSettingsUpdateInput: ["newDocumentsIndexed", "documentUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "User", "createdAt", "updatedAt"],
    NotificationSettingsCreateManyInput: ["id", "newDocumentsIndexed", "documentUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "userId", "createdAt", "updatedAt"],
    NotificationSettingsUpdateManyMutationInput: ["newDocumentsIndexed", "documentUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "createdAt", "updatedAt"],
    TenantCreateInput: ["id", "name", "slug", "description", "logoImage", "avatar", "Users", "Queries", "Documents", "Billing", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    TenantUpdateInput: ["name", "slug", "description", "logoImage", "avatar", "Users", "Queries", "Documents", "Billing", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    TenantCreateManyInput: ["id", "name", "slug", "description", "logoImage", "avatar", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    TenantUpdateManyMutationInput: ["name", "slug", "description", "logoImage", "avatar", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    BillingCreateInput: ["id", "Tenant", "stripeCustomerId", "plan", "status", "createdAt", "updatedAt"],
    BillingUpdateInput: ["Tenant", "stripeCustomerId", "plan", "status", "createdAt", "updatedAt"],
    BillingCreateManyInput: ["id", "tenantId", "stripeCustomerId", "plan", "status", "createdAt", "updatedAt"],
    BillingUpdateManyMutationInput: ["stripeCustomerId", "plan", "status", "createdAt", "updatedAt"],
    CommentCreateInput: ["id", "text", "Document", "Author", "Replies", "Reactions", "createdAt", "updatedAt"],
    CommentUpdateInput: ["text", "Document", "Author", "Replies", "Reactions", "createdAt", "updatedAt"],
    CommentCreateManyInput: ["id", "text", "documentId", "authorId", "createdAt", "updatedAt"],
    CommentUpdateManyMutationInput: ["text", "createdAt", "updatedAt"],
    ReplyCreateInput: ["id", "text", "Comment", "Author", "Reactions", "createdAt", "updatedAt"],
    ReplyUpdateInput: ["text", "Comment", "Author", "Reactions", "createdAt", "updatedAt"],
    ReplyCreateManyInput: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    ReplyUpdateManyMutationInput: ["text", "createdAt", "updatedAt"],
    ReactionCreateInput: ["id", "type", "Comment", "Reply", "Author", "createdAt", "updatedAt"],
    ReactionUpdateInput: ["type", "Comment", "Reply", "Author", "createdAt", "updatedAt"],
    ReactionCreateManyInput: ["id", "type", "commentId", "replyId", "authorId", "createdAt", "updatedAt"],
    ReactionUpdateManyMutationInput: ["type", "createdAt", "updatedAt"],
    RequestCreateInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "Reporter", "createdAt", "updatedAt"],
    RequestUpdateInput: ["reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "Reporter", "createdAt", "updatedAt"],
    RequestCreateManyInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    RequestUpdateManyMutationInput: ["reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "createdAt", "updatedAt"],
    NotificationCreateInput: ["id", "description", "User", "Actor", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationUpdateInput: ["description", "User", "Actor", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationCreateManyInput: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationUpdateManyMutationInput: ["description", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    LLMQueryCreateInput: ["id", "Tenant", "queryLink", "question", "response", "createdAt", "updatedAt", "User"],
    LLMQueryUpdateInput: ["Tenant", "queryLink", "question", "response", "createdAt", "updatedAt", "User"],
    LLMQueryCreateManyInput: ["id", "tenantId", "queryLink", "question", "response", "createdAt", "updatedAt", "userId"],
    LLMQueryUpdateManyMutationInput: ["queryLink", "question", "response", "createdAt", "updatedAt"],
    DocumentCreateInput: ["id", "publishStatus", "indexStatus", "title", "link", "url", "source", "shortDescription", "Tenant", "Comments", "createdAt", "updatedAt"],
    DocumentUpdateInput: ["publishStatus", "indexStatus", "title", "link", "url", "source", "shortDescription", "Tenant", "Comments", "createdAt", "updatedAt"],
    DocumentCreateManyInput: ["id", "publishStatus", "indexStatus", "title", "link", "url", "source", "shortDescription", "tenantId", "createdAt", "updatedAt"],
    DocumentUpdateManyMutationInput: ["publishStatus", "indexStatus", "title", "link", "url", "source", "shortDescription", "createdAt", "updatedAt"],
    TenantRelationFilter: ["is", "isNot"],
    StringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "isSet"],
    StringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not"],
    EnumROLENullableListFilter: ["equals", "has", "hasEvery", "hasSome", "isEmpty"],
    BoolNullableFilter: ["equals", "not", "isSet"],
    NotificationSettingsRelationFilter: ["is", "isNot"],
    NotificationListRelationFilter: ["every", "some", "none"],
    LLMQueryListRelationFilter: ["every", "some", "none"],
    RequestListRelationFilter: ["every", "some", "none"],
    CommentListRelationFilter: ["every", "some", "none"],
    ReplyListRelationFilter: ["every", "some", "none"],
    ReactionListRelationFilter: ["every", "some", "none"],
    DateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NotificationOrderByRelationAggregateInput: ["_count"],
    LLMQueryOrderByRelationAggregateInput: ["_count"],
    RequestOrderByRelationAggregateInput: ["_count"],
    CommentOrderByRelationAggregateInput: ["_count"],
    ReplyOrderByRelationAggregateInput: ["_count"],
    ReactionOrderByRelationAggregateInput: ["_count"],
    UserCountOrderByAggregateInput: ["tenantId", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "createdAt", "updatedAt"],
    UserMaxOrderByAggregateInput: ["tenantId", "uid", "uuid", "id", "username", "email", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "createdAt", "updatedAt"],
    UserMinOrderByAggregateInput: ["tenantId", "uid", "uuid", "id", "username", "email", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "createdAt", "updatedAt"],
    StringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "_count", "_min", "_max", "isSet"],
    StringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "_count", "_min", "_max"],
    BoolNullableWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max", "isSet"],
    DateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    BoolFilter: ["equals", "not"],
    UserRelationFilter: ["is", "isNot"],
    NotificationSettingsCountOrderByAggregateInput: ["id", "newDocumentsIndexed", "documentUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "userId", "createdAt", "updatedAt"],
    NotificationSettingsMaxOrderByAggregateInput: ["id", "newDocumentsIndexed", "documentUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "userId", "createdAt", "updatedAt"],
    NotificationSettingsMinOrderByAggregateInput: ["id", "newDocumentsIndexed", "documentUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "userId", "createdAt", "updatedAt"],
    BoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
    UserListRelationFilter: ["every", "some", "none"],
    DocumentListRelationFilter: ["every", "some", "none"],
    BillingRelationFilter: ["is", "isNot"],
    StringNullableListFilter: ["equals", "has", "hasEvery", "hasSome", "isEmpty"],
    UserOrderByRelationAggregateInput: ["_count"],
    DocumentOrderByRelationAggregateInput: ["_count"],
    TenantCountOrderByAggregateInput: ["id", "name", "slug", "description", "logoImage", "avatar", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    TenantMaxOrderByAggregateInput: ["id", "name", "slug", "description", "logoImage", "avatar", "createdAt", "updatedAt"],
    TenantMinOrderByAggregateInput: ["id", "name", "slug", "description", "logoImage", "avatar", "createdAt", "updatedAt"],
    EnumPLANFilter: ["equals", "in", "notIn", "not"],
    EnumBILLING_STATUSFilter: ["equals", "in", "notIn", "not"],
    BillingCountOrderByAggregateInput: ["id", "tenantId", "stripeCustomerId", "plan", "status", "createdAt", "updatedAt"],
    BillingMaxOrderByAggregateInput: ["id", "tenantId", "stripeCustomerId", "plan", "status", "createdAt", "updatedAt"],
    BillingMinOrderByAggregateInput: ["id", "tenantId", "stripeCustomerId", "plan", "status", "createdAt", "updatedAt"],
    EnumPLANWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    EnumBILLING_STATUSWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    DocumentRelationFilter: ["is", "isNot"],
    CommentCountOrderByAggregateInput: ["id", "text", "documentId", "authorId", "createdAt", "updatedAt"],
    CommentMaxOrderByAggregateInput: ["id", "text", "documentId", "authorId", "createdAt", "updatedAt"],
    CommentMinOrderByAggregateInput: ["id", "text", "documentId", "authorId", "createdAt", "updatedAt"],
    CommentRelationFilter: ["is", "isNot"],
    ReplyCountOrderByAggregateInput: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    ReplyMaxOrderByAggregateInput: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    ReplyMinOrderByAggregateInput: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    EnumREACTION_TYPEFilter: ["equals", "in", "notIn", "not"],
    ReplyRelationFilter: ["is", "isNot"],
    ReactionCountOrderByAggregateInput: ["id", "type", "commentId", "replyId", "authorId", "createdAt", "updatedAt"],
    ReactionMaxOrderByAggregateInput: ["id", "type", "commentId", "replyId", "authorId", "createdAt", "updatedAt"],
    ReactionMinOrderByAggregateInput: ["id", "type", "commentId", "replyId", "authorId", "createdAt", "updatedAt"],
    EnumREACTION_TYPEWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    EnumREQUEST_TYPEFilter: ["equals", "in", "notIn", "not"],
    EnumREQUEST_STATUSFilter: ["equals", "in", "notIn", "not"],
    RequestCountOrderByAggregateInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    RequestMaxOrderByAggregateInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    RequestMinOrderByAggregateInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    EnumREQUEST_TYPEWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    EnumREQUEST_STATUSWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NotificationCountOrderByAggregateInput: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationMaxOrderByAggregateInput: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationMinOrderByAggregateInput: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    LLMQueryCountOrderByAggregateInput: ["id", "tenantId", "queryLink", "question", "response", "createdAt", "updatedAt", "userId"],
    LLMQueryMaxOrderByAggregateInput: ["id", "tenantId", "queryLink", "question", "response", "createdAt", "updatedAt", "userId"],
    LLMQueryMinOrderByAggregateInput: ["id", "tenantId", "queryLink", "question", "response", "createdAt", "updatedAt", "userId"],
    EnumPUBLISH_STATUSFilter: ["equals", "in", "notIn", "not"],
    EnumDOCUMENT_INDEX_STATUSFilter: ["equals", "in", "notIn", "not"],
    DocumentCountOrderByAggregateInput: ["id", "publishStatus", "indexStatus", "title", "link", "url", "source", "shortDescription", "tenantId", "createdAt", "updatedAt"],
    DocumentMaxOrderByAggregateInput: ["id", "publishStatus", "indexStatus", "title", "link", "url", "source", "shortDescription", "tenantId", "createdAt", "updatedAt"],
    DocumentMinOrderByAggregateInput: ["id", "publishStatus", "indexStatus", "title", "link", "url", "source", "shortDescription", "tenantId", "createdAt", "updatedAt"],
    EnumPUBLISH_STATUSWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    EnumDOCUMENT_INDEX_STATUSWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    TenantCreateNestedOneWithoutUsersInput: ["create", "connectOrCreate", "connect"],
    UserCreaterolesInput: ["set"],
    NotificationSettingsCreateNestedOneWithoutUserInput: ["create", "connectOrCreate", "connect"],
    NotificationCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
    NotificationCreateNestedManyWithoutActorInput: ["create", "connectOrCreate", "createMany", "connect"],
    LLMQueryCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
    RequestCreateNestedManyWithoutReporterInput: ["create", "connectOrCreate", "createMany", "connect"],
    CommentCreateNestedManyWithoutAuthorInput: ["create", "connectOrCreate", "createMany", "connect"],
    ReplyCreateNestedManyWithoutAuthorInput: ["create", "connectOrCreate", "createMany", "connect"],
    ReactionCreateNestedManyWithoutAuthorInput: ["create", "connectOrCreate", "createMany", "connect"],
    TenantUpdateOneWithoutUsersInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    StringFieldUpdateOperationsInput: ["set"],
    NullableStringFieldUpdateOperationsInput: ["set", "unset"],
    UserUpdaterolesInput: ["set", "push"],
    NullableBoolFieldUpdateOperationsInput: ["set", "unset"],
    NotificationSettingsUpdateOneWithoutUserInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    NotificationUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    NotificationUpdateManyWithoutActorInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    LLMQueryUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    RequestUpdateManyWithoutReporterInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    CommentUpdateManyWithoutAuthorInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ReplyUpdateManyWithoutAuthorInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ReactionUpdateManyWithoutAuthorInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    DateTimeFieldUpdateOperationsInput: ["set"],
    UserCreateNestedOneWithoutNotificationSettingsInput: ["create", "connectOrCreate", "connect"],
    BoolFieldUpdateOperationsInput: ["set"],
    UserUpdateOneWithoutNotificationSettingsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    UserCreateNestedManyWithoutTenantInput: ["create", "connectOrCreate", "createMany", "connect"],
    LLMQueryCreateNestedManyWithoutTenantInput: ["create", "connectOrCreate", "createMany", "connect"],
    DocumentCreateNestedManyWithoutTenantInput: ["create", "connectOrCreate", "createMany", "connect"],
    BillingCreateNestedOneWithoutTenantInput: ["create", "connectOrCreate", "connect"],
    TenantCreateacceptedUserEmailDomainsInput: ["set"],
    UserUpdateManyWithoutTenantInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    LLMQueryUpdateManyWithoutTenantInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    DocumentUpdateManyWithoutTenantInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    BillingUpdateOneWithoutTenantInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    TenantUpdateacceptedUserEmailDomainsInput: ["set", "push"],
    TenantCreateNestedOneWithoutBillingInput: ["create", "connectOrCreate", "connect"],
    TenantUpdateOneRequiredWithoutBillingInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    EnumPLANFieldUpdateOperationsInput: ["set"],
    EnumBILLING_STATUSFieldUpdateOperationsInput: ["set"],
    DocumentCreateNestedOneWithoutCommentsInput: ["create", "connectOrCreate", "connect"],
    UserCreateNestedOneWithoutCommentsInput: ["create", "connectOrCreate", "connect"],
    ReplyCreateNestedManyWithoutCommentInput: ["create", "connectOrCreate", "createMany", "connect"],
    ReactionCreateNestedManyWithoutCommentInput: ["create", "connectOrCreate", "createMany", "connect"],
    DocumentUpdateOneRequiredWithoutCommentsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    UserUpdateOneRequiredWithoutCommentsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    ReplyUpdateManyWithoutCommentInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ReactionUpdateManyWithoutCommentInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    CommentCreateNestedOneWithoutRepliesInput: ["create", "connectOrCreate", "connect"],
    UserCreateNestedOneWithoutRepliesInput: ["create", "connectOrCreate", "connect"],
    ReactionCreateNestedManyWithoutReplyInput: ["create", "connectOrCreate", "createMany", "connect"],
    CommentUpdateOneRequiredWithoutRepliesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    UserUpdateOneRequiredWithoutRepliesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    ReactionUpdateManyWithoutReplyInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    CommentCreateNestedOneWithoutReactionsInput: ["create", "connectOrCreate", "connect"],
    ReplyCreateNestedOneWithoutReactionsInput: ["create", "connectOrCreate", "connect"],
    UserCreateNestedOneWithoutReactionsInput: ["create", "connectOrCreate", "connect"],
    EnumREACTION_TYPEFieldUpdateOperationsInput: ["set"],
    CommentUpdateOneWithoutReactionsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    ReplyUpdateOneWithoutReactionsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    UserUpdateOneRequiredWithoutReactionsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    RequestCreatesocialLinksInput: ["set"],
    UserCreateNestedOneWithoutRequestsInput: ["create", "connectOrCreate", "connect"],
    EnumREQUEST_TYPEFieldUpdateOperationsInput: ["set"],
    RequestUpdatesocialLinksInput: ["set", "push"],
    EnumREQUEST_STATUSFieldUpdateOperationsInput: ["set"],
    UserUpdateOneWithoutRequestsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    UserCreateNestedOneWithoutNotificationsInput: ["create", "connectOrCreate", "connect"],
    UserCreateNestedOneWithoutActivityInput: ["create", "connectOrCreate", "connect"],
    UserUpdateOneWithoutNotificationsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    UserUpdateOneWithoutActivityInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    TenantCreateNestedOneWithoutQueriesInput: ["create", "connectOrCreate", "connect"],
    UserCreateNestedOneWithoutQueriesInput: ["create", "connectOrCreate", "connect"],
    TenantUpdateOneRequiredWithoutQueriesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    UserUpdateOneWithoutQueriesInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    TenantCreateNestedOneWithoutDocumentsInput: ["create", "connectOrCreate", "connect"],
    CommentCreateNestedManyWithoutDocumentInput: ["create", "connectOrCreate", "createMany", "connect"],
    EnumPUBLISH_STATUSFieldUpdateOperationsInput: ["set"],
    EnumDOCUMENT_INDEX_STATUSFieldUpdateOperationsInput: ["set"],
    TenantUpdateOneRequiredWithoutDocumentsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    CommentUpdateManyWithoutDocumentInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    NestedStringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "isSet"],
    NestedStringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    NestedBoolNullableFilter: ["equals", "not", "isSet"],
    NestedDateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedStringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max", "isSet"],
    NestedIntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "isSet"],
    NestedStringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    NestedIntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedBoolNullableWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max", "isSet"],
    NestedDateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    NestedBoolFilter: ["equals", "not"],
    NestedBoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
    NestedEnumPLANFilter: ["equals", "in", "notIn", "not"],
    NestedEnumBILLING_STATUSFilter: ["equals", "in", "notIn", "not"],
    NestedEnumPLANWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumBILLING_STATUSWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumREACTION_TYPEFilter: ["equals", "in", "notIn", "not"],
    NestedEnumREACTION_TYPEWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumREQUEST_TYPEFilter: ["equals", "in", "notIn", "not"],
    NestedEnumREQUEST_STATUSFilter: ["equals", "in", "notIn", "not"],
    NestedEnumREQUEST_TYPEWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumREQUEST_STATUSWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumPUBLISH_STATUSFilter: ["equals", "in", "notIn", "not"],
    NestedEnumDOCUMENT_INDEX_STATUSFilter: ["equals", "in", "notIn", "not"],
    NestedEnumPUBLISH_STATUSWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumDOCUMENT_INDEX_STATUSWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    TenantCreateWithoutUsersInput: ["id", "name", "slug", "description", "logoImage", "avatar", "Queries", "Documents", "Billing", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    TenantCreateOrConnectWithoutUsersInput: ["where", "create"],
    NotificationSettingsCreateWithoutUserInput: ["id", "newDocumentsIndexed", "documentUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "createdAt", "updatedAt"],
    NotificationSettingsCreateOrConnectWithoutUserInput: ["where", "create"],
    NotificationCreateWithoutUserInput: ["id", "description", "Actor", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationCreateOrConnectWithoutUserInput: ["where", "create"],
    NotificationCreateManyUserInputEnvelope: ["data"],
    NotificationCreateWithoutActorInput: ["id", "description", "User", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationCreateOrConnectWithoutActorInput: ["where", "create"],
    NotificationCreateManyActorInputEnvelope: ["data"],
    LLMQueryCreateWithoutUserInput: ["id", "Tenant", "queryLink", "question", "response", "createdAt", "updatedAt"],
    LLMQueryCreateOrConnectWithoutUserInput: ["where", "create"],
    LLMQueryCreateManyUserInputEnvelope: ["data"],
    RequestCreateWithoutReporterInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "createdAt", "updatedAt"],
    RequestCreateOrConnectWithoutReporterInput: ["where", "create"],
    RequestCreateManyReporterInputEnvelope: ["data"],
    CommentCreateWithoutAuthorInput: ["id", "text", "Document", "Replies", "Reactions", "createdAt", "updatedAt"],
    CommentCreateOrConnectWithoutAuthorInput: ["where", "create"],
    CommentCreateManyAuthorInputEnvelope: ["data"],
    ReplyCreateWithoutAuthorInput: ["id", "text", "Comment", "Reactions", "createdAt", "updatedAt"],
    ReplyCreateOrConnectWithoutAuthorInput: ["where", "create"],
    ReplyCreateManyAuthorInputEnvelope: ["data"],
    ReactionCreateWithoutAuthorInput: ["id", "type", "Comment", "Reply", "createdAt", "updatedAt"],
    ReactionCreateOrConnectWithoutAuthorInput: ["where", "create"],
    ReactionCreateManyAuthorInputEnvelope: ["data"],
    TenantUpsertWithoutUsersInput: ["update", "create"],
    TenantUpdateWithoutUsersInput: ["name", "slug", "description", "logoImage", "avatar", "Queries", "Documents", "Billing", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    NotificationSettingsUpsertWithoutUserInput: ["update", "create"],
    NotificationSettingsUpdateWithoutUserInput: ["newDocumentsIndexed", "documentUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "createdAt", "updatedAt"],
    NotificationUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
    NotificationUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
    NotificationUpdateManyWithWhereWithoutUserInput: ["where", "data"],
    NotificationScalarWhereInput: ["AND", "OR", "NOT", "id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationUpsertWithWhereUniqueWithoutActorInput: ["where", "update", "create"],
    NotificationUpdateWithWhereUniqueWithoutActorInput: ["where", "data"],
    NotificationUpdateManyWithWhereWithoutActorInput: ["where", "data"],
    LLMQueryUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
    LLMQueryUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
    LLMQueryUpdateManyWithWhereWithoutUserInput: ["where", "data"],
    LLMQueryScalarWhereInput: ["AND", "OR", "NOT", "id", "tenantId", "queryLink", "question", "response", "createdAt", "updatedAt", "userId"],
    RequestUpsertWithWhereUniqueWithoutReporterInput: ["where", "update", "create"],
    RequestUpdateWithWhereUniqueWithoutReporterInput: ["where", "data"],
    RequestUpdateManyWithWhereWithoutReporterInput: ["where", "data"],
    RequestScalarWhereInput: ["AND", "OR", "NOT", "id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    CommentUpsertWithWhereUniqueWithoutAuthorInput: ["where", "update", "create"],
    CommentUpdateWithWhereUniqueWithoutAuthorInput: ["where", "data"],
    CommentUpdateManyWithWhereWithoutAuthorInput: ["where", "data"],
    CommentScalarWhereInput: ["AND", "OR", "NOT", "id", "text", "documentId", "authorId", "createdAt", "updatedAt"],
    ReplyUpsertWithWhereUniqueWithoutAuthorInput: ["where", "update", "create"],
    ReplyUpdateWithWhereUniqueWithoutAuthorInput: ["where", "data"],
    ReplyUpdateManyWithWhereWithoutAuthorInput: ["where", "data"],
    ReplyScalarWhereInput: ["AND", "OR", "NOT", "id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    ReactionUpsertWithWhereUniqueWithoutAuthorInput: ["where", "update", "create"],
    ReactionUpdateWithWhereUniqueWithoutAuthorInput: ["where", "data"],
    ReactionUpdateManyWithWhereWithoutAuthorInput: ["where", "data"],
    ReactionScalarWhereInput: ["AND", "OR", "NOT", "id", "type", "commentId", "replyId", "authorId", "createdAt", "updatedAt"],
    UserCreateWithoutNotificationSettingsInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "Notifications", "Activity", "Queries", "Requests", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutNotificationSettingsInput: ["where", "create"],
    UserUpsertWithoutNotificationSettingsInput: ["update", "create"],
    UserUpdateWithoutNotificationSettingsInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "Notifications", "Activity", "Queries", "Requests", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    UserCreateWithoutTenantInput: ["uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "NotificationSettings", "Notifications", "Activity", "Queries", "Requests", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutTenantInput: ["where", "create"],
    UserCreateManyTenantInputEnvelope: ["data"],
    LLMQueryCreateWithoutTenantInput: ["id", "queryLink", "question", "response", "createdAt", "updatedAt", "User"],
    LLMQueryCreateOrConnectWithoutTenantInput: ["where", "create"],
    LLMQueryCreateManyTenantInputEnvelope: ["data"],
    DocumentCreateWithoutTenantInput: ["id", "publishStatus", "indexStatus", "title", "link", "url", "source", "shortDescription", "Comments", "createdAt", "updatedAt"],
    DocumentCreateOrConnectWithoutTenantInput: ["where", "create"],
    DocumentCreateManyTenantInputEnvelope: ["data"],
    BillingCreateWithoutTenantInput: ["id", "stripeCustomerId", "plan", "status", "createdAt", "updatedAt"],
    BillingCreateOrConnectWithoutTenantInput: ["where", "create"],
    UserUpsertWithWhereUniqueWithoutTenantInput: ["where", "update", "create"],
    UserUpdateWithWhereUniqueWithoutTenantInput: ["where", "data"],
    UserUpdateManyWithWhereWithoutTenantInput: ["where", "data"],
    UserScalarWhereInput: ["AND", "OR", "NOT", "tenantId", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "createdAt", "updatedAt"],
    LLMQueryUpsertWithWhereUniqueWithoutTenantInput: ["where", "update", "create"],
    LLMQueryUpdateWithWhereUniqueWithoutTenantInput: ["where", "data"],
    LLMQueryUpdateManyWithWhereWithoutTenantInput: ["where", "data"],
    DocumentUpsertWithWhereUniqueWithoutTenantInput: ["where", "update", "create"],
    DocumentUpdateWithWhereUniqueWithoutTenantInput: ["where", "data"],
    DocumentUpdateManyWithWhereWithoutTenantInput: ["where", "data"],
    DocumentScalarWhereInput: ["AND", "OR", "NOT", "id", "publishStatus", "indexStatus", "title", "link", "url", "source", "shortDescription", "tenantId", "createdAt", "updatedAt"],
    BillingUpsertWithoutTenantInput: ["update", "create"],
    BillingUpdateWithoutTenantInput: ["stripeCustomerId", "plan", "status", "createdAt", "updatedAt"],
    TenantCreateWithoutBillingInput: ["id", "name", "slug", "description", "logoImage", "avatar", "Users", "Queries", "Documents", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    TenantCreateOrConnectWithoutBillingInput: ["where", "create"],
    TenantUpsertWithoutBillingInput: ["update", "create"],
    TenantUpdateWithoutBillingInput: ["name", "slug", "description", "logoImage", "avatar", "Users", "Queries", "Documents", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    DocumentCreateWithoutCommentsInput: ["id", "publishStatus", "indexStatus", "title", "link", "url", "source", "shortDescription", "Tenant", "createdAt", "updatedAt"],
    DocumentCreateOrConnectWithoutCommentsInput: ["where", "create"],
    UserCreateWithoutCommentsInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "NotificationSettings", "Notifications", "Activity", "Queries", "Requests", "Replies", "Reactions", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutCommentsInput: ["where", "create"],
    ReplyCreateWithoutCommentInput: ["id", "text", "Author", "Reactions", "createdAt", "updatedAt"],
    ReplyCreateOrConnectWithoutCommentInput: ["where", "create"],
    ReplyCreateManyCommentInputEnvelope: ["data"],
    ReactionCreateWithoutCommentInput: ["id", "type", "Reply", "Author", "createdAt", "updatedAt"],
    ReactionCreateOrConnectWithoutCommentInput: ["where", "create"],
    ReactionCreateManyCommentInputEnvelope: ["data"],
    DocumentUpsertWithoutCommentsInput: ["update", "create"],
    DocumentUpdateWithoutCommentsInput: ["publishStatus", "indexStatus", "title", "link", "url", "source", "shortDescription", "Tenant", "createdAt", "updatedAt"],
    UserUpsertWithoutCommentsInput: ["update", "create"],
    UserUpdateWithoutCommentsInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "NotificationSettings", "Notifications", "Activity", "Queries", "Requests", "Replies", "Reactions", "createdAt", "updatedAt"],
    ReplyUpsertWithWhereUniqueWithoutCommentInput: ["where", "update", "create"],
    ReplyUpdateWithWhereUniqueWithoutCommentInput: ["where", "data"],
    ReplyUpdateManyWithWhereWithoutCommentInput: ["where", "data"],
    ReactionUpsertWithWhereUniqueWithoutCommentInput: ["where", "update", "create"],
    ReactionUpdateWithWhereUniqueWithoutCommentInput: ["where", "data"],
    ReactionUpdateManyWithWhereWithoutCommentInput: ["where", "data"],
    CommentCreateWithoutRepliesInput: ["id", "text", "Document", "Author", "Reactions", "createdAt", "updatedAt"],
    CommentCreateOrConnectWithoutRepliesInput: ["where", "create"],
    UserCreateWithoutRepliesInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "NotificationSettings", "Notifications", "Activity", "Queries", "Requests", "Comments", "Reactions", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutRepliesInput: ["where", "create"],
    ReactionCreateWithoutReplyInput: ["id", "type", "Comment", "Author", "createdAt", "updatedAt"],
    ReactionCreateOrConnectWithoutReplyInput: ["where", "create"],
    ReactionCreateManyReplyInputEnvelope: ["data"],
    CommentUpsertWithoutRepliesInput: ["update", "create"],
    CommentUpdateWithoutRepliesInput: ["text", "Document", "Author", "Reactions", "createdAt", "updatedAt"],
    UserUpsertWithoutRepliesInput: ["update", "create"],
    UserUpdateWithoutRepliesInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "NotificationSettings", "Notifications", "Activity", "Queries", "Requests", "Comments", "Reactions", "createdAt", "updatedAt"],
    ReactionUpsertWithWhereUniqueWithoutReplyInput: ["where", "update", "create"],
    ReactionUpdateWithWhereUniqueWithoutReplyInput: ["where", "data"],
    ReactionUpdateManyWithWhereWithoutReplyInput: ["where", "data"],
    CommentCreateWithoutReactionsInput: ["id", "text", "Document", "Author", "Replies", "createdAt", "updatedAt"],
    CommentCreateOrConnectWithoutReactionsInput: ["where", "create"],
    ReplyCreateWithoutReactionsInput: ["id", "text", "Comment", "Author", "createdAt", "updatedAt"],
    ReplyCreateOrConnectWithoutReactionsInput: ["where", "create"],
    UserCreateWithoutReactionsInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "NotificationSettings", "Notifications", "Activity", "Queries", "Requests", "Comments", "Replies", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutReactionsInput: ["where", "create"],
    CommentUpsertWithoutReactionsInput: ["update", "create"],
    CommentUpdateWithoutReactionsInput: ["text", "Document", "Author", "Replies", "createdAt", "updatedAt"],
    ReplyUpsertWithoutReactionsInput: ["update", "create"],
    ReplyUpdateWithoutReactionsInput: ["text", "Comment", "Author", "createdAt", "updatedAt"],
    UserUpsertWithoutReactionsInput: ["update", "create"],
    UserUpdateWithoutReactionsInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "NotificationSettings", "Notifications", "Activity", "Queries", "Requests", "Comments", "Replies", "createdAt", "updatedAt"],
    UserCreateWithoutRequestsInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "NotificationSettings", "Notifications", "Activity", "Queries", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutRequestsInput: ["where", "create"],
    UserUpsertWithoutRequestsInput: ["update", "create"],
    UserUpdateWithoutRequestsInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "NotificationSettings", "Notifications", "Activity", "Queries", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    UserCreateWithoutNotificationsInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "NotificationSettings", "Activity", "Queries", "Requests", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutNotificationsInput: ["where", "create"],
    UserCreateWithoutActivityInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "NotificationSettings", "Notifications", "Queries", "Requests", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutActivityInput: ["where", "create"],
    UserUpsertWithoutNotificationsInput: ["update", "create"],
    UserUpdateWithoutNotificationsInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "NotificationSettings", "Activity", "Queries", "Requests", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    UserUpsertWithoutActivityInput: ["update", "create"],
    UserUpdateWithoutActivityInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "NotificationSettings", "Notifications", "Queries", "Requests", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    TenantCreateWithoutQueriesInput: ["id", "name", "slug", "description", "logoImage", "avatar", "Users", "Documents", "Billing", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    TenantCreateOrConnectWithoutQueriesInput: ["where", "create"],
    UserCreateWithoutQueriesInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "NotificationSettings", "Notifications", "Activity", "Requests", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutQueriesInput: ["where", "create"],
    TenantUpsertWithoutQueriesInput: ["update", "create"],
    TenantUpdateWithoutQueriesInput: ["name", "slug", "description", "logoImage", "avatar", "Users", "Documents", "Billing", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    UserUpsertWithoutQueriesInput: ["update", "create"],
    UserUpdateWithoutQueriesInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "NotificationSettings", "Notifications", "Activity", "Requests", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    TenantCreateWithoutDocumentsInput: ["id", "name", "slug", "description", "logoImage", "avatar", "Users", "Queries", "Billing", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    TenantCreateOrConnectWithoutDocumentsInput: ["where", "create"],
    CommentCreateWithoutDocumentInput: ["id", "text", "Author", "Replies", "Reactions", "createdAt", "updatedAt"],
    CommentCreateOrConnectWithoutDocumentInput: ["where", "create"],
    CommentCreateManyDocumentInputEnvelope: ["data"],
    TenantUpsertWithoutDocumentsInput: ["update", "create"],
    TenantUpdateWithoutDocumentsInput: ["name", "slug", "description", "logoImage", "avatar", "Users", "Queries", "Billing", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    CommentUpsertWithWhereUniqueWithoutDocumentInput: ["where", "update", "create"],
    CommentUpdateWithWhereUniqueWithoutDocumentInput: ["where", "data"],
    CommentUpdateManyWithWhereWithoutDocumentInput: ["where", "data"],
    NotificationCreateManyUserInput: ["id", "description", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationCreateManyActorInput: ["id", "description", "userId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    LLMQueryCreateManyUserInput: ["id", "tenantId", "queryLink", "question", "response", "createdAt", "updatedAt"],
    RequestCreateManyReporterInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "createdAt", "updatedAt"],
    CommentCreateManyAuthorInput: ["id", "text", "documentId", "createdAt", "updatedAt"],
    ReplyCreateManyAuthorInput: ["id", "text", "commentId", "createdAt", "updatedAt"],
    ReactionCreateManyAuthorInput: ["id", "type", "commentId", "replyId", "createdAt", "updatedAt"],
    NotificationUpdateWithoutUserInput: ["description", "Actor", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationUpdateWithoutActorInput: ["description", "User", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    LLMQueryUpdateWithoutUserInput: ["Tenant", "queryLink", "question", "response", "createdAt", "updatedAt"],
    RequestUpdateWithoutReporterInput: ["reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "createdAt", "updatedAt"],
    CommentUpdateWithoutAuthorInput: ["text", "Document", "Replies", "Reactions", "createdAt", "updatedAt"],
    ReplyUpdateWithoutAuthorInput: ["text", "Comment", "Reactions", "createdAt", "updatedAt"],
    ReactionUpdateWithoutAuthorInput: ["type", "Comment", "Reply", "createdAt", "updatedAt"],
    UserCreateManyTenantInput: ["uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "createdAt", "updatedAt"],
    LLMQueryCreateManyTenantInput: ["id", "queryLink", "question", "response", "createdAt", "updatedAt", "userId"],
    DocumentCreateManyTenantInput: ["id", "publishStatus", "indexStatus", "title", "link", "url", "source", "shortDescription", "createdAt", "updatedAt"],
    UserUpdateWithoutTenantInput: ["uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "isActive", "NotificationSettings", "Notifications", "Activity", "Queries", "Requests", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    LLMQueryUpdateWithoutTenantInput: ["queryLink", "question", "response", "createdAt", "updatedAt", "User"],
    DocumentUpdateWithoutTenantInput: ["publishStatus", "indexStatus", "title", "link", "url", "source", "shortDescription", "Comments", "createdAt", "updatedAt"],
    ReplyCreateManyCommentInput: ["id", "text", "authorId", "createdAt", "updatedAt"],
    ReactionCreateManyCommentInput: ["id", "type", "replyId", "authorId", "createdAt", "updatedAt"],
    ReplyUpdateWithoutCommentInput: ["text", "Author", "Reactions", "createdAt", "updatedAt"],
    ReactionUpdateWithoutCommentInput: ["type", "Reply", "Author", "createdAt", "updatedAt"],
    ReactionCreateManyReplyInput: ["id", "type", "commentId", "authorId", "createdAt", "updatedAt"],
    ReactionUpdateWithoutReplyInput: ["type", "Comment", "Author", "createdAt", "updatedAt"],
    CommentCreateManyDocumentInput: ["id", "text", "authorId", "createdAt", "updatedAt"],
    CommentUpdateWithoutDocumentInput: ["text", "Author", "Replies", "Reactions", "createdAt", "updatedAt"]
};
function applyInputTypesEnhanceMap(inputTypesEnhanceMap) {
    for (const inputTypeEnhanceMapKey of Object.keys(inputTypesEnhanceMap)) {
        const inputTypeName = inputTypeEnhanceMapKey;
        const typeConfig = inputTypesEnhanceMap[inputTypeName];
        const typeClass = inputTypes[inputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, inputsInfo[inputTypeName]);
    }
}
exports.applyInputTypesEnhanceMap = applyInputTypesEnhanceMap;
