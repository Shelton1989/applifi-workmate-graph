"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyInputTypesEnhanceMap = exports.applyOutputTypesEnhanceMap = exports.applyModelsEnhanceMap = exports.applyRelationResolversEnhanceMap = exports.applyArgsTypesEnhanceMap = exports.applyResolversEnhanceMap = void 0;
const tslib_1 = require("tslib");
const tslib = tslib_1.__importStar(require("tslib"));
const crudResolvers = tslib_1.__importStar(require("./resolvers/crud/resolvers-crud.index"));
const argsTypes = tslib_1.__importStar(require("./resolvers/crud/args.index"));
const actionResolvers = tslib_1.__importStar(require("./resolvers/crud/resolvers-actions.index"));
const relationResolvers = tslib_1.__importStar(require("./resolvers/relations/resolvers.index"));
const models = tslib_1.__importStar(require("./models"));
const outputTypes = tslib_1.__importStar(require("./resolvers/outputs"));
const inputTypes = tslib_1.__importStar(require("./resolvers/inputs"));
const crudResolversMap = {
    User: crudResolvers.UserCrudResolver,
    PatientProfile: crudResolvers.PatientProfileCrudResolver,
    NotificationSettings: crudResolvers.NotificationSettingsCrudResolver,
    Tenant: crudResolvers.TenantCrudResolver,
    Ward: crudResolvers.WardCrudResolver,
    AggregateRating: crudResolvers.AggregateRatingCrudResolver,
    Post: crudResolvers.PostCrudResolver,
    Comment: crudResolvers.CommentCrudResolver,
    Reply: crudResolvers.ReplyCrudResolver,
    Reaction: crudResolvers.ReactionCrudResolver,
    Request: crudResolvers.RequestCrudResolver,
    Notification: crudResolvers.NotificationCrudResolver,
    Meal: crudResolvers.MealCrudResolver,
    MealItem: crudResolvers.MealItemCrudResolver,
    Features: crudResolvers.FeaturesCrudResolver,
    MealItemOption: crudResolvers.MealItemOptionCrudResolver,
    MealAvailability: crudResolvers.MealAvailabilityCrudResolver,
    OrderLineItem: crudResolvers.OrderLineItemCrudResolver,
    Order: crudResolvers.OrderCrudResolver,
    Location: crudResolvers.LocationCrudResolver
};
const actionResolversMap = {
    User: {
        user: actionResolvers.FindUniqueUserResolver,
        findFirstUser: actionResolvers.FindFirstUserResolver,
        users: actionResolvers.FindManyUserResolver,
        createUser: actionResolvers.CreateUserResolver,
        createManyUser: actionResolvers.CreateManyUserResolver,
        deleteUser: actionResolvers.DeleteUserResolver,
        updateUser: actionResolvers.UpdateUserResolver,
        deleteManyUser: actionResolvers.DeleteManyUserResolver,
        updateManyUser: actionResolvers.UpdateManyUserResolver,
        upsertUser: actionResolvers.UpsertUserResolver,
        aggregateUser: actionResolvers.AggregateUserResolver,
        groupByUser: actionResolvers.GroupByUserResolver
    },
    PatientProfile: {
        patientProfile: actionResolvers.FindUniquePatientProfileResolver,
        findFirstPatientProfile: actionResolvers.FindFirstPatientProfileResolver,
        patientProfiles: actionResolvers.FindManyPatientProfileResolver,
        createPatientProfile: actionResolvers.CreatePatientProfileResolver,
        createManyPatientProfile: actionResolvers.CreateManyPatientProfileResolver,
        deletePatientProfile: actionResolvers.DeletePatientProfileResolver,
        updatePatientProfile: actionResolvers.UpdatePatientProfileResolver,
        deleteManyPatientProfile: actionResolvers.DeleteManyPatientProfileResolver,
        updateManyPatientProfile: actionResolvers.UpdateManyPatientProfileResolver,
        upsertPatientProfile: actionResolvers.UpsertPatientProfileResolver,
        aggregatePatientProfile: actionResolvers.AggregatePatientProfileResolver,
        groupByPatientProfile: actionResolvers.GroupByPatientProfileResolver
    },
    NotificationSettings: {
        findUniqueNotificationSettings: actionResolvers.FindUniqueNotificationSettingsResolver,
        findFirstNotificationSettings: actionResolvers.FindFirstNotificationSettingsResolver,
        findManyNotificationSettings: actionResolvers.FindManyNotificationSettingsResolver,
        createNotificationSettings: actionResolvers.CreateNotificationSettingsResolver,
        createManyNotificationSettings: actionResolvers.CreateManyNotificationSettingsResolver,
        deleteNotificationSettings: actionResolvers.DeleteNotificationSettingsResolver,
        updateNotificationSettings: actionResolvers.UpdateNotificationSettingsResolver,
        deleteManyNotificationSettings: actionResolvers.DeleteManyNotificationSettingsResolver,
        updateManyNotificationSettings: actionResolvers.UpdateManyNotificationSettingsResolver,
        upsertNotificationSettings: actionResolvers.UpsertNotificationSettingsResolver,
        aggregateNotificationSettings: actionResolvers.AggregateNotificationSettingsResolver,
        groupByNotificationSettings: actionResolvers.GroupByNotificationSettingsResolver
    },
    Tenant: {
        tenant: actionResolvers.FindUniqueTenantResolver,
        findFirstTenant: actionResolvers.FindFirstTenantResolver,
        tenants: actionResolvers.FindManyTenantResolver,
        createTenant: actionResolvers.CreateTenantResolver,
        createManyTenant: actionResolvers.CreateManyTenantResolver,
        deleteTenant: actionResolvers.DeleteTenantResolver,
        updateTenant: actionResolvers.UpdateTenantResolver,
        deleteManyTenant: actionResolvers.DeleteManyTenantResolver,
        updateManyTenant: actionResolvers.UpdateManyTenantResolver,
        upsertTenant: actionResolvers.UpsertTenantResolver,
        aggregateTenant: actionResolvers.AggregateTenantResolver,
        groupByTenant: actionResolvers.GroupByTenantResolver
    },
    Ward: {
        ward: actionResolvers.FindUniqueWardResolver,
        findFirstWard: actionResolvers.FindFirstWardResolver,
        wards: actionResolvers.FindManyWardResolver,
        createWard: actionResolvers.CreateWardResolver,
        createManyWard: actionResolvers.CreateManyWardResolver,
        deleteWard: actionResolvers.DeleteWardResolver,
        updateWard: actionResolvers.UpdateWardResolver,
        deleteManyWard: actionResolvers.DeleteManyWardResolver,
        updateManyWard: actionResolvers.UpdateManyWardResolver,
        upsertWard: actionResolvers.UpsertWardResolver,
        aggregateWard: actionResolvers.AggregateWardResolver,
        groupByWard: actionResolvers.GroupByWardResolver
    },
    AggregateRating: {
        aggregateRating: actionResolvers.FindUniqueAggregateRatingResolver,
        findFirstAggregateRating: actionResolvers.FindFirstAggregateRatingResolver,
        aggregateRatings: actionResolvers.FindManyAggregateRatingResolver,
        createAggregateRating: actionResolvers.CreateAggregateRatingResolver,
        createManyAggregateRating: actionResolvers.CreateManyAggregateRatingResolver,
        deleteAggregateRating: actionResolvers.DeleteAggregateRatingResolver,
        updateAggregateRating: actionResolvers.UpdateAggregateRatingResolver,
        deleteManyAggregateRating: actionResolvers.DeleteManyAggregateRatingResolver,
        updateManyAggregateRating: actionResolvers.UpdateManyAggregateRatingResolver,
        upsertAggregateRating: actionResolvers.UpsertAggregateRatingResolver,
        aggregateAggregateRating: actionResolvers.AggregateAggregateRatingResolver,
        groupByAggregateRating: actionResolvers.GroupByAggregateRatingResolver
    },
    Post: {
        post: actionResolvers.FindUniquePostResolver,
        findFirstPost: actionResolvers.FindFirstPostResolver,
        posts: actionResolvers.FindManyPostResolver,
        createPost: actionResolvers.CreatePostResolver,
        createManyPost: actionResolvers.CreateManyPostResolver,
        deletePost: actionResolvers.DeletePostResolver,
        updatePost: actionResolvers.UpdatePostResolver,
        deleteManyPost: actionResolvers.DeleteManyPostResolver,
        updateManyPost: actionResolvers.UpdateManyPostResolver,
        upsertPost: actionResolvers.UpsertPostResolver,
        aggregatePost: actionResolvers.AggregatePostResolver,
        groupByPost: actionResolvers.GroupByPostResolver
    },
    Comment: {
        comment: actionResolvers.FindUniqueCommentResolver,
        findFirstComment: actionResolvers.FindFirstCommentResolver,
        comments: actionResolvers.FindManyCommentResolver,
        createComment: actionResolvers.CreateCommentResolver,
        createManyComment: actionResolvers.CreateManyCommentResolver,
        deleteComment: actionResolvers.DeleteCommentResolver,
        updateComment: actionResolvers.UpdateCommentResolver,
        deleteManyComment: actionResolvers.DeleteManyCommentResolver,
        updateManyComment: actionResolvers.UpdateManyCommentResolver,
        upsertComment: actionResolvers.UpsertCommentResolver,
        aggregateComment: actionResolvers.AggregateCommentResolver,
        groupByComment: actionResolvers.GroupByCommentResolver
    },
    Reply: {
        reply: actionResolvers.FindUniqueReplyResolver,
        findFirstReply: actionResolvers.FindFirstReplyResolver,
        replies: actionResolvers.FindManyReplyResolver,
        createReply: actionResolvers.CreateReplyResolver,
        createManyReply: actionResolvers.CreateManyReplyResolver,
        deleteReply: actionResolvers.DeleteReplyResolver,
        updateReply: actionResolvers.UpdateReplyResolver,
        deleteManyReply: actionResolvers.DeleteManyReplyResolver,
        updateManyReply: actionResolvers.UpdateManyReplyResolver,
        upsertReply: actionResolvers.UpsertReplyResolver,
        aggregateReply: actionResolvers.AggregateReplyResolver,
        groupByReply: actionResolvers.GroupByReplyResolver
    },
    Reaction: {
        reaction: actionResolvers.FindUniqueReactionResolver,
        findFirstReaction: actionResolvers.FindFirstReactionResolver,
        reactions: actionResolvers.FindManyReactionResolver,
        createReaction: actionResolvers.CreateReactionResolver,
        createManyReaction: actionResolvers.CreateManyReactionResolver,
        deleteReaction: actionResolvers.DeleteReactionResolver,
        updateReaction: actionResolvers.UpdateReactionResolver,
        deleteManyReaction: actionResolvers.DeleteManyReactionResolver,
        updateManyReaction: actionResolvers.UpdateManyReactionResolver,
        upsertReaction: actionResolvers.UpsertReactionResolver,
        aggregateReaction: actionResolvers.AggregateReactionResolver,
        groupByReaction: actionResolvers.GroupByReactionResolver
    },
    Request: {
        request: actionResolvers.FindUniqueRequestResolver,
        findFirstRequest: actionResolvers.FindFirstRequestResolver,
        requests: actionResolvers.FindManyRequestResolver,
        createRequest: actionResolvers.CreateRequestResolver,
        createManyRequest: actionResolvers.CreateManyRequestResolver,
        deleteRequest: actionResolvers.DeleteRequestResolver,
        updateRequest: actionResolvers.UpdateRequestResolver,
        deleteManyRequest: actionResolvers.DeleteManyRequestResolver,
        updateManyRequest: actionResolvers.UpdateManyRequestResolver,
        upsertRequest: actionResolvers.UpsertRequestResolver,
        aggregateRequest: actionResolvers.AggregateRequestResolver,
        groupByRequest: actionResolvers.GroupByRequestResolver
    },
    Notification: {
        notification: actionResolvers.FindUniqueNotificationResolver,
        findFirstNotification: actionResolvers.FindFirstNotificationResolver,
        notifications: actionResolvers.FindManyNotificationResolver,
        createNotification: actionResolvers.CreateNotificationResolver,
        createManyNotification: actionResolvers.CreateManyNotificationResolver,
        deleteNotification: actionResolvers.DeleteNotificationResolver,
        updateNotification: actionResolvers.UpdateNotificationResolver,
        deleteManyNotification: actionResolvers.DeleteManyNotificationResolver,
        updateManyNotification: actionResolvers.UpdateManyNotificationResolver,
        upsertNotification: actionResolvers.UpsertNotificationResolver,
        aggregateNotification: actionResolvers.AggregateNotificationResolver,
        groupByNotification: actionResolvers.GroupByNotificationResolver
    },
    Meal: {
        meal: actionResolvers.FindUniqueMealResolver,
        findFirstMeal: actionResolvers.FindFirstMealResolver,
        meals: actionResolvers.FindManyMealResolver,
        createMeal: actionResolvers.CreateMealResolver,
        createManyMeal: actionResolvers.CreateManyMealResolver,
        deleteMeal: actionResolvers.DeleteMealResolver,
        updateMeal: actionResolvers.UpdateMealResolver,
        deleteManyMeal: actionResolvers.DeleteManyMealResolver,
        updateManyMeal: actionResolvers.UpdateManyMealResolver,
        upsertMeal: actionResolvers.UpsertMealResolver,
        aggregateMeal: actionResolvers.AggregateMealResolver,
        groupByMeal: actionResolvers.GroupByMealResolver
    },
    MealItem: {
        mealItem: actionResolvers.FindUniqueMealItemResolver,
        findFirstMealItem: actionResolvers.FindFirstMealItemResolver,
        mealItems: actionResolvers.FindManyMealItemResolver,
        createMealItem: actionResolvers.CreateMealItemResolver,
        createManyMealItem: actionResolvers.CreateManyMealItemResolver,
        deleteMealItem: actionResolvers.DeleteMealItemResolver,
        updateMealItem: actionResolvers.UpdateMealItemResolver,
        deleteManyMealItem: actionResolvers.DeleteManyMealItemResolver,
        updateManyMealItem: actionResolvers.UpdateManyMealItemResolver,
        upsertMealItem: actionResolvers.UpsertMealItemResolver,
        aggregateMealItem: actionResolvers.AggregateMealItemResolver,
        groupByMealItem: actionResolvers.GroupByMealItemResolver
    },
    Features: {
        findUniqueFeatures: actionResolvers.FindUniqueFeaturesResolver,
        findFirstFeatures: actionResolvers.FindFirstFeaturesResolver,
        findManyFeatures: actionResolvers.FindManyFeaturesResolver,
        createFeatures: actionResolvers.CreateFeaturesResolver,
        createManyFeatures: actionResolvers.CreateManyFeaturesResolver,
        deleteFeatures: actionResolvers.DeleteFeaturesResolver,
        updateFeatures: actionResolvers.UpdateFeaturesResolver,
        deleteManyFeatures: actionResolvers.DeleteManyFeaturesResolver,
        updateManyFeatures: actionResolvers.UpdateManyFeaturesResolver,
        upsertFeatures: actionResolvers.UpsertFeaturesResolver,
        aggregateFeatures: actionResolvers.AggregateFeaturesResolver,
        groupByFeatures: actionResolvers.GroupByFeaturesResolver
    },
    MealItemOption: {
        mealItemOption: actionResolvers.FindUniqueMealItemOptionResolver,
        findFirstMealItemOption: actionResolvers.FindFirstMealItemOptionResolver,
        mealItemOptions: actionResolvers.FindManyMealItemOptionResolver,
        createMealItemOption: actionResolvers.CreateMealItemOptionResolver,
        createManyMealItemOption: actionResolvers.CreateManyMealItemOptionResolver,
        deleteMealItemOption: actionResolvers.DeleteMealItemOptionResolver,
        updateMealItemOption: actionResolvers.UpdateMealItemOptionResolver,
        deleteManyMealItemOption: actionResolvers.DeleteManyMealItemOptionResolver,
        updateManyMealItemOption: actionResolvers.UpdateManyMealItemOptionResolver,
        upsertMealItemOption: actionResolvers.UpsertMealItemOptionResolver,
        aggregateMealItemOption: actionResolvers.AggregateMealItemOptionResolver,
        groupByMealItemOption: actionResolvers.GroupByMealItemOptionResolver
    },
    MealAvailability: {
        mealAvailability: actionResolvers.FindUniqueMealAvailabilityResolver,
        findFirstMealAvailability: actionResolvers.FindFirstMealAvailabilityResolver,
        mealAvailabilities: actionResolvers.FindManyMealAvailabilityResolver,
        createMealAvailability: actionResolvers.CreateMealAvailabilityResolver,
        createManyMealAvailability: actionResolvers.CreateManyMealAvailabilityResolver,
        deleteMealAvailability: actionResolvers.DeleteMealAvailabilityResolver,
        updateMealAvailability: actionResolvers.UpdateMealAvailabilityResolver,
        deleteManyMealAvailability: actionResolvers.DeleteManyMealAvailabilityResolver,
        updateManyMealAvailability: actionResolvers.UpdateManyMealAvailabilityResolver,
        upsertMealAvailability: actionResolvers.UpsertMealAvailabilityResolver,
        aggregateMealAvailability: actionResolvers.AggregateMealAvailabilityResolver,
        groupByMealAvailability: actionResolvers.GroupByMealAvailabilityResolver
    },
    OrderLineItem: {
        orderLineItem: actionResolvers.FindUniqueOrderLineItemResolver,
        findFirstOrderLineItem: actionResolvers.FindFirstOrderLineItemResolver,
        orderLineItems: actionResolvers.FindManyOrderLineItemResolver,
        createOrderLineItem: actionResolvers.CreateOrderLineItemResolver,
        createManyOrderLineItem: actionResolvers.CreateManyOrderLineItemResolver,
        deleteOrderLineItem: actionResolvers.DeleteOrderLineItemResolver,
        updateOrderLineItem: actionResolvers.UpdateOrderLineItemResolver,
        deleteManyOrderLineItem: actionResolvers.DeleteManyOrderLineItemResolver,
        updateManyOrderLineItem: actionResolvers.UpdateManyOrderLineItemResolver,
        upsertOrderLineItem: actionResolvers.UpsertOrderLineItemResolver,
        aggregateOrderLineItem: actionResolvers.AggregateOrderLineItemResolver,
        groupByOrderLineItem: actionResolvers.GroupByOrderLineItemResolver
    },
    Order: {
        order: actionResolvers.FindUniqueOrderResolver,
        findFirstOrder: actionResolvers.FindFirstOrderResolver,
        orders: actionResolvers.FindManyOrderResolver,
        createOrder: actionResolvers.CreateOrderResolver,
        createManyOrder: actionResolvers.CreateManyOrderResolver,
        deleteOrder: actionResolvers.DeleteOrderResolver,
        updateOrder: actionResolvers.UpdateOrderResolver,
        deleteManyOrder: actionResolvers.DeleteManyOrderResolver,
        updateManyOrder: actionResolvers.UpdateManyOrderResolver,
        upsertOrder: actionResolvers.UpsertOrderResolver,
        aggregateOrder: actionResolvers.AggregateOrderResolver,
        groupByOrder: actionResolvers.GroupByOrderResolver
    },
    Location: {
        location: actionResolvers.FindUniqueLocationResolver,
        findFirstLocation: actionResolvers.FindFirstLocationResolver,
        locations: actionResolvers.FindManyLocationResolver,
        createLocation: actionResolvers.CreateLocationResolver,
        createManyLocation: actionResolvers.CreateManyLocationResolver,
        deleteLocation: actionResolvers.DeleteLocationResolver,
        updateLocation: actionResolvers.UpdateLocationResolver,
        deleteManyLocation: actionResolvers.DeleteManyLocationResolver,
        updateManyLocation: actionResolvers.UpdateManyLocationResolver,
        upsertLocation: actionResolvers.UpsertLocationResolver,
        aggregateLocation: actionResolvers.AggregateLocationResolver,
        groupByLocation: actionResolvers.GroupByLocationResolver
    }
};
const crudResolversInfo = {
    User: ["user", "findFirstUser", "users", "createUser", "createManyUser", "deleteUser", "updateUser", "deleteManyUser", "updateManyUser", "upsertUser", "aggregateUser", "groupByUser"],
    PatientProfile: ["patientProfile", "findFirstPatientProfile", "patientProfiles", "createPatientProfile", "createManyPatientProfile", "deletePatientProfile", "updatePatientProfile", "deleteManyPatientProfile", "updateManyPatientProfile", "upsertPatientProfile", "aggregatePatientProfile", "groupByPatientProfile"],
    NotificationSettings: ["findUniqueNotificationSettings", "findFirstNotificationSettings", "findManyNotificationSettings", "createNotificationSettings", "createManyNotificationSettings", "deleteNotificationSettings", "updateNotificationSettings", "deleteManyNotificationSettings", "updateManyNotificationSettings", "upsertNotificationSettings", "aggregateNotificationSettings", "groupByNotificationSettings"],
    Tenant: ["tenant", "findFirstTenant", "tenants", "createTenant", "createManyTenant", "deleteTenant", "updateTenant", "deleteManyTenant", "updateManyTenant", "upsertTenant", "aggregateTenant", "groupByTenant"],
    Ward: ["ward", "findFirstWard", "wards", "createWard", "createManyWard", "deleteWard", "updateWard", "deleteManyWard", "updateManyWard", "upsertWard", "aggregateWard", "groupByWard"],
    AggregateRating: ["aggregateRating", "findFirstAggregateRating", "aggregateRatings", "createAggregateRating", "createManyAggregateRating", "deleteAggregateRating", "updateAggregateRating", "deleteManyAggregateRating", "updateManyAggregateRating", "upsertAggregateRating", "aggregateAggregateRating", "groupByAggregateRating"],
    Post: ["post", "findFirstPost", "posts", "createPost", "createManyPost", "deletePost", "updatePost", "deleteManyPost", "updateManyPost", "upsertPost", "aggregatePost", "groupByPost"],
    Comment: ["comment", "findFirstComment", "comments", "createComment", "createManyComment", "deleteComment", "updateComment", "deleteManyComment", "updateManyComment", "upsertComment", "aggregateComment", "groupByComment"],
    Reply: ["reply", "findFirstReply", "replies", "createReply", "createManyReply", "deleteReply", "updateReply", "deleteManyReply", "updateManyReply", "upsertReply", "aggregateReply", "groupByReply"],
    Reaction: ["reaction", "findFirstReaction", "reactions", "createReaction", "createManyReaction", "deleteReaction", "updateReaction", "deleteManyReaction", "updateManyReaction", "upsertReaction", "aggregateReaction", "groupByReaction"],
    Request: ["request", "findFirstRequest", "requests", "createRequest", "createManyRequest", "deleteRequest", "updateRequest", "deleteManyRequest", "updateManyRequest", "upsertRequest", "aggregateRequest", "groupByRequest"],
    Notification: ["notification", "findFirstNotification", "notifications", "createNotification", "createManyNotification", "deleteNotification", "updateNotification", "deleteManyNotification", "updateManyNotification", "upsertNotification", "aggregateNotification", "groupByNotification"],
    Meal: ["meal", "findFirstMeal", "meals", "createMeal", "createManyMeal", "deleteMeal", "updateMeal", "deleteManyMeal", "updateManyMeal", "upsertMeal", "aggregateMeal", "groupByMeal"],
    MealItem: ["mealItem", "findFirstMealItem", "mealItems", "createMealItem", "createManyMealItem", "deleteMealItem", "updateMealItem", "deleteManyMealItem", "updateManyMealItem", "upsertMealItem", "aggregateMealItem", "groupByMealItem"],
    Features: ["findUniqueFeatures", "findFirstFeatures", "findManyFeatures", "createFeatures", "createManyFeatures", "deleteFeatures", "updateFeatures", "deleteManyFeatures", "updateManyFeatures", "upsertFeatures", "aggregateFeatures", "groupByFeatures"],
    MealItemOption: ["mealItemOption", "findFirstMealItemOption", "mealItemOptions", "createMealItemOption", "createManyMealItemOption", "deleteMealItemOption", "updateMealItemOption", "deleteManyMealItemOption", "updateManyMealItemOption", "upsertMealItemOption", "aggregateMealItemOption", "groupByMealItemOption"],
    MealAvailability: ["mealAvailability", "findFirstMealAvailability", "mealAvailabilities", "createMealAvailability", "createManyMealAvailability", "deleteMealAvailability", "updateMealAvailability", "deleteManyMealAvailability", "updateManyMealAvailability", "upsertMealAvailability", "aggregateMealAvailability", "groupByMealAvailability"],
    OrderLineItem: ["orderLineItem", "findFirstOrderLineItem", "orderLineItems", "createOrderLineItem", "createManyOrderLineItem", "deleteOrderLineItem", "updateOrderLineItem", "deleteManyOrderLineItem", "updateManyOrderLineItem", "upsertOrderLineItem", "aggregateOrderLineItem", "groupByOrderLineItem"],
    Order: ["order", "findFirstOrder", "orders", "createOrder", "createManyOrder", "deleteOrder", "updateOrder", "deleteManyOrder", "updateManyOrder", "upsertOrder", "aggregateOrder", "groupByOrder"],
    Location: ["location", "findFirstLocation", "locations", "createLocation", "createManyLocation", "deleteLocation", "updateLocation", "deleteManyLocation", "updateManyLocation", "upsertLocation", "aggregateLocation", "groupByLocation"]
};
const argsInfo = {
    FindUniqueUserArgs: ["where"],
    FindFirstUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateUserArgs: ["data"],
    CreateManyUserArgs: ["data"],
    DeleteUserArgs: ["where"],
    UpdateUserArgs: ["data", "where"],
    DeleteManyUserArgs: ["where"],
    UpdateManyUserArgs: ["data", "where"],
    UpsertUserArgs: ["where", "create", "update"],
    AggregateUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniquePatientProfileArgs: ["where"],
    FindFirstPatientProfileArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyPatientProfileArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreatePatientProfileArgs: ["data"],
    CreateManyPatientProfileArgs: ["data"],
    DeletePatientProfileArgs: ["where"],
    UpdatePatientProfileArgs: ["data", "where"],
    DeleteManyPatientProfileArgs: ["where"],
    UpdateManyPatientProfileArgs: ["data", "where"],
    UpsertPatientProfileArgs: ["where", "create", "update"],
    AggregatePatientProfileArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByPatientProfileArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueNotificationSettingsArgs: ["where"],
    FindFirstNotificationSettingsArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyNotificationSettingsArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateNotificationSettingsArgs: ["data"],
    CreateManyNotificationSettingsArgs: ["data"],
    DeleteNotificationSettingsArgs: ["where"],
    UpdateNotificationSettingsArgs: ["data", "where"],
    DeleteManyNotificationSettingsArgs: ["where"],
    UpdateManyNotificationSettingsArgs: ["data", "where"],
    UpsertNotificationSettingsArgs: ["where", "create", "update"],
    AggregateNotificationSettingsArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByNotificationSettingsArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueTenantArgs: ["where"],
    FindFirstTenantArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyTenantArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateTenantArgs: ["data"],
    CreateManyTenantArgs: ["data"],
    DeleteTenantArgs: ["where"],
    UpdateTenantArgs: ["data", "where"],
    DeleteManyTenantArgs: ["where"],
    UpdateManyTenantArgs: ["data", "where"],
    UpsertTenantArgs: ["where", "create", "update"],
    AggregateTenantArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByTenantArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueWardArgs: ["where"],
    FindFirstWardArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyWardArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateWardArgs: ["data"],
    CreateManyWardArgs: ["data"],
    DeleteWardArgs: ["where"],
    UpdateWardArgs: ["data", "where"],
    DeleteManyWardArgs: ["where"],
    UpdateManyWardArgs: ["data", "where"],
    UpsertWardArgs: ["where", "create", "update"],
    AggregateWardArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByWardArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueAggregateRatingArgs: ["where"],
    FindFirstAggregateRatingArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyAggregateRatingArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateAggregateRatingArgs: ["data"],
    CreateManyAggregateRatingArgs: ["data"],
    DeleteAggregateRatingArgs: ["where"],
    UpdateAggregateRatingArgs: ["data", "where"],
    DeleteManyAggregateRatingArgs: ["where"],
    UpdateManyAggregateRatingArgs: ["data", "where"],
    UpsertAggregateRatingArgs: ["where", "create", "update"],
    AggregateAggregateRatingArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByAggregateRatingArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniquePostArgs: ["where"],
    FindFirstPostArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyPostArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreatePostArgs: ["data"],
    CreateManyPostArgs: ["data"],
    DeletePostArgs: ["where"],
    UpdatePostArgs: ["data", "where"],
    DeleteManyPostArgs: ["where"],
    UpdateManyPostArgs: ["data", "where"],
    UpsertPostArgs: ["where", "create", "update"],
    AggregatePostArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByPostArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueCommentArgs: ["where"],
    FindFirstCommentArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyCommentArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateCommentArgs: ["data"],
    CreateManyCommentArgs: ["data"],
    DeleteCommentArgs: ["where"],
    UpdateCommentArgs: ["data", "where"],
    DeleteManyCommentArgs: ["where"],
    UpdateManyCommentArgs: ["data", "where"],
    UpsertCommentArgs: ["where", "create", "update"],
    AggregateCommentArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByCommentArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueReplyArgs: ["where"],
    FindFirstReplyArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyReplyArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateReplyArgs: ["data"],
    CreateManyReplyArgs: ["data"],
    DeleteReplyArgs: ["where"],
    UpdateReplyArgs: ["data", "where"],
    DeleteManyReplyArgs: ["where"],
    UpdateManyReplyArgs: ["data", "where"],
    UpsertReplyArgs: ["where", "create", "update"],
    AggregateReplyArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByReplyArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueReactionArgs: ["where"],
    FindFirstReactionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyReactionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateReactionArgs: ["data"],
    CreateManyReactionArgs: ["data"],
    DeleteReactionArgs: ["where"],
    UpdateReactionArgs: ["data", "where"],
    DeleteManyReactionArgs: ["where"],
    UpdateManyReactionArgs: ["data", "where"],
    UpsertReactionArgs: ["where", "create", "update"],
    AggregateReactionArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByReactionArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueRequestArgs: ["where"],
    FindFirstRequestArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyRequestArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateRequestArgs: ["data"],
    CreateManyRequestArgs: ["data"],
    DeleteRequestArgs: ["where"],
    UpdateRequestArgs: ["data", "where"],
    DeleteManyRequestArgs: ["where"],
    UpdateManyRequestArgs: ["data", "where"],
    UpsertRequestArgs: ["where", "create", "update"],
    AggregateRequestArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByRequestArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueNotificationArgs: ["where"],
    FindFirstNotificationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyNotificationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateNotificationArgs: ["data"],
    CreateManyNotificationArgs: ["data"],
    DeleteNotificationArgs: ["where"],
    UpdateNotificationArgs: ["data", "where"],
    DeleteManyNotificationArgs: ["where"],
    UpdateManyNotificationArgs: ["data", "where"],
    UpsertNotificationArgs: ["where", "create", "update"],
    AggregateNotificationArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByNotificationArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueMealArgs: ["where"],
    FindFirstMealArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyMealArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateMealArgs: ["data"],
    CreateManyMealArgs: ["data"],
    DeleteMealArgs: ["where"],
    UpdateMealArgs: ["data", "where"],
    DeleteManyMealArgs: ["where"],
    UpdateManyMealArgs: ["data", "where"],
    UpsertMealArgs: ["where", "create", "update"],
    AggregateMealArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByMealArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueMealItemArgs: ["where"],
    FindFirstMealItemArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyMealItemArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateMealItemArgs: ["data"],
    CreateManyMealItemArgs: ["data"],
    DeleteMealItemArgs: ["where"],
    UpdateMealItemArgs: ["data", "where"],
    DeleteManyMealItemArgs: ["where"],
    UpdateManyMealItemArgs: ["data", "where"],
    UpsertMealItemArgs: ["where", "create", "update"],
    AggregateMealItemArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByMealItemArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueFeaturesArgs: ["where"],
    FindFirstFeaturesArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyFeaturesArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateFeaturesArgs: ["data"],
    CreateManyFeaturesArgs: ["data"],
    DeleteFeaturesArgs: ["where"],
    UpdateFeaturesArgs: ["data", "where"],
    DeleteManyFeaturesArgs: ["where"],
    UpdateManyFeaturesArgs: ["data", "where"],
    UpsertFeaturesArgs: ["where", "create", "update"],
    AggregateFeaturesArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByFeaturesArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueMealItemOptionArgs: ["where"],
    FindFirstMealItemOptionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyMealItemOptionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateMealItemOptionArgs: ["data"],
    CreateManyMealItemOptionArgs: ["data"],
    DeleteMealItemOptionArgs: ["where"],
    UpdateMealItemOptionArgs: ["data", "where"],
    DeleteManyMealItemOptionArgs: ["where"],
    UpdateManyMealItemOptionArgs: ["data", "where"],
    UpsertMealItemOptionArgs: ["where", "create", "update"],
    AggregateMealItemOptionArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByMealItemOptionArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueMealAvailabilityArgs: ["where"],
    FindFirstMealAvailabilityArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyMealAvailabilityArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateMealAvailabilityArgs: ["data"],
    CreateManyMealAvailabilityArgs: ["data"],
    DeleteMealAvailabilityArgs: ["where"],
    UpdateMealAvailabilityArgs: ["data", "where"],
    DeleteManyMealAvailabilityArgs: ["where"],
    UpdateManyMealAvailabilityArgs: ["data", "where"],
    UpsertMealAvailabilityArgs: ["where", "create", "update"],
    AggregateMealAvailabilityArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByMealAvailabilityArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueOrderLineItemArgs: ["where"],
    FindFirstOrderLineItemArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyOrderLineItemArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateOrderLineItemArgs: ["data"],
    CreateManyOrderLineItemArgs: ["data"],
    DeleteOrderLineItemArgs: ["where"],
    UpdateOrderLineItemArgs: ["data", "where"],
    DeleteManyOrderLineItemArgs: ["where"],
    UpdateManyOrderLineItemArgs: ["data", "where"],
    UpsertOrderLineItemArgs: ["where", "create", "update"],
    AggregateOrderLineItemArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByOrderLineItemArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueOrderArgs: ["where"],
    FindFirstOrderArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyOrderArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateOrderArgs: ["data"],
    CreateManyOrderArgs: ["data"],
    DeleteOrderArgs: ["where"],
    UpdateOrderArgs: ["data", "where"],
    DeleteManyOrderArgs: ["where"],
    UpdateManyOrderArgs: ["data", "where"],
    UpsertOrderArgs: ["where", "create", "update"],
    AggregateOrderArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByOrderArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueLocationArgs: ["where"],
    FindFirstLocationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyLocationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateLocationArgs: ["data"],
    CreateManyLocationArgs: ["data"],
    DeleteLocationArgs: ["where"],
    UpdateLocationArgs: ["data", "where"],
    DeleteManyLocationArgs: ["where"],
    UpdateManyLocationArgs: ["data", "where"],
    UpsertLocationArgs: ["where", "create", "update"],
    AggregateLocationArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByLocationArgs: ["where", "orderBy", "by", "having", "take", "skip"]
};
function applyResolversEnhanceMap(resolversEnhanceMap) {
    for (const resolversEnhanceMapKey of Object.keys(resolversEnhanceMap)) {
        const modelName = resolversEnhanceMapKey;
        const crudTarget = crudResolversMap[modelName].prototype;
        const resolverActionsConfig = resolversEnhanceMap[modelName];
        const actionResolversConfig = actionResolversMap[modelName];
        if (resolverActionsConfig._all) {
            const allActionsDecorators = resolverActionsConfig._all;
            const resolverActionNames = crudResolversInfo[modelName];
            for (const resolverActionName of resolverActionNames) {
                const actionTarget = actionResolversConfig[resolverActionName].prototype;
                tslib.__decorate(allActionsDecorators, crudTarget, resolverActionName, null);
                tslib.__decorate(allActionsDecorators, actionTarget, resolverActionName, null);
            }
        }
        const resolverActionsToApply = Object.keys(resolverActionsConfig).filter(it => it !== "_all");
        for (const resolverActionName of resolverActionsToApply) {
            const decorators = resolverActionsConfig[resolverActionName];
            const actionTarget = actionResolversConfig[resolverActionName].prototype;
            tslib.__decorate(decorators, crudTarget, resolverActionName, null);
            tslib.__decorate(decorators, actionTarget, resolverActionName, null);
        }
    }
}
exports.applyResolversEnhanceMap = applyResolversEnhanceMap;
function applyArgsTypesEnhanceMap(argsTypesEnhanceMap) {
    for (const argsTypesEnhanceMapKey of Object.keys(argsTypesEnhanceMap)) {
        const argsTypeName = argsTypesEnhanceMapKey;
        const typeConfig = argsTypesEnhanceMap[argsTypeName];
        const typeClass = argsTypes[argsTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, argsInfo[argsTypeName]);
    }
}
exports.applyArgsTypesEnhanceMap = applyArgsTypesEnhanceMap;
const relationResolversMap = {
    User: relationResolvers.UserRelationsResolver,
    PatientProfile: relationResolvers.PatientProfileRelationsResolver,
    NotificationSettings: relationResolvers.NotificationSettingsRelationsResolver,
    Tenant: relationResolvers.TenantRelationsResolver,
    Ward: relationResolvers.WardRelationsResolver,
    AggregateRating: relationResolvers.AggregateRatingRelationsResolver,
    Post: relationResolvers.PostRelationsResolver,
    Comment: relationResolvers.CommentRelationsResolver,
    Reply: relationResolvers.ReplyRelationsResolver,
    Reaction: relationResolvers.ReactionRelationsResolver,
    Request: relationResolvers.RequestRelationsResolver,
    Notification: relationResolvers.NotificationRelationsResolver,
    Meal: relationResolvers.MealRelationsResolver,
    MealItem: relationResolvers.MealItemRelationsResolver,
    Features: relationResolvers.FeaturesRelationsResolver,
    MealItemOption: relationResolvers.MealItemOptionRelationsResolver,
    MealAvailability: relationResolvers.MealAvailabilityRelationsResolver,
    OrderLineItem: relationResolvers.OrderLineItemRelationsResolver,
    Order: relationResolvers.OrderRelationsResolver,
    Location: relationResolvers.LocationRelationsResolver
};
const relationResolversInfo = {
    User: ["Tenant", "NotificationSettings", "PatientProfile", "Notifications", "Activity", "LikedMeals", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "Ward"],
    PatientProfile: ["User"],
    NotificationSettings: ["User"],
    Tenant: ["Users", "Meals", "Orders", "Locations"],
    Ward: ["Users"],
    AggregateRating: ["Meal"],
    Post: ["Author", "Meal", "Comments", "Reactions"],
    Comment: ["Post", "Author", "Replies", "Reactions"],
    Reply: ["Comment", "Author", "Reactions"],
    Reaction: ["Meal", "Post", "Comment", "Reply", "Author"],
    Request: ["Reporter"],
    Notification: ["User", "Actor"],
    Meal: ["Tenant", "Items", "Availability", "Orders", "AggregateRating", "LikedBy", "Posts", "Features", "Reactions"],
    MealItem: ["Meals", "Options", "OrderLineItems"],
    Features: ["Meal"],
    MealItemOption: ["MealItem", "OrderLineItems"],
    MealAvailability: ["Meal"],
    OrderLineItem: ["selectedMealItem", "selectedMealItemOption", "Booking"],
    Order: ["Meal", "Patient", "Tenant", "Items"],
    Location: ["Tenant"]
};
function applyRelationResolversEnhanceMap(relationResolversEnhanceMap) {
    for (const relationResolversEnhanceMapKey of Object.keys(relationResolversEnhanceMap)) {
        const modelName = relationResolversEnhanceMapKey;
        const relationResolverTarget = relationResolversMap[modelName].prototype;
        const relationResolverActionsConfig = relationResolversEnhanceMap[modelName];
        if (relationResolverActionsConfig._all) {
            const allActionsDecorators = relationResolverActionsConfig._all;
            const relationResolverActionNames = relationResolversInfo[modelName];
            for (const relationResolverActionName of relationResolverActionNames) {
                tslib.__decorate(allActionsDecorators, relationResolverTarget, relationResolverActionName, null);
            }
        }
        const relationResolverActionsToApply = Object.keys(relationResolverActionsConfig).filter(it => it !== "_all");
        for (const relationResolverActionName of relationResolverActionsToApply) {
            const decorators = relationResolverActionsConfig[relationResolverActionName];
            tslib.__decorate(decorators, relationResolverTarget, relationResolverActionName, null);
        }
    }
}
exports.applyRelationResolversEnhanceMap = applyRelationResolversEnhanceMap;
function applyTypeClassEnhanceConfig(enhanceConfig, typeClass, typePrototype, typeFieldNames) {
    if (enhanceConfig.class) {
        tslib.__decorate(enhanceConfig.class, typeClass);
    }
    if (enhanceConfig.fields) {
        if (enhanceConfig.fields._all) {
            const allFieldsDecorators = enhanceConfig.fields._all;
            for (const typeFieldName of typeFieldNames) {
                tslib.__decorate(allFieldsDecorators, typePrototype, typeFieldName, void 0);
            }
        }
        const configFieldsToApply = Object.keys(enhanceConfig.fields).filter(it => it !== "_all");
        for (const typeFieldName of configFieldsToApply) {
            const fieldDecorators = enhanceConfig.fields[typeFieldName];
            tslib.__decorate(fieldDecorators, typePrototype, typeFieldName, void 0);
        }
    }
}
const modelsInfo = {
    User: ["tenantId", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "mealIds", "createdAt", "updatedAt", "wardId"],
    PatientProfile: ["id", "identityNumber", "identityType", "bedNumber", "wardNumber", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "userId", "createdAt", "updatedAt"],
    NotificationSettings: ["id", "newMenuItems", "orderUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "userId", "createdAt", "updatedAt"],
    Tenant: ["id", "name", "slug", "description", "logoImage", "avatar", "coverImage", "MealImages", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    Ward: ["id", "number", "name", "description", "createdAt", "updatedAt"],
    AggregateRating: ["id", "ratingValue", "countedPosts", "allPosts", "ratingCount", "mealId", "createdAt", "updatedAt"],
    Post: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "mealId", "postLink", "createdAt", "updatedAt"],
    Comment: ["id", "text", "postId", "authorId", "createdAt", "updatedAt"],
    Reply: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    Reaction: ["id", "type", "mealId", "postId", "commentId", "replyId", "authorId", "createdAt", "updatedAt"],
    Request: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    Notification: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    Meal: ["id", "tenantId", "productLink", "title", "description", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "itemIds", "photo", "gallery", "publishStatus", "likedByIds", "createdAt", "updatedAt"],
    MealItem: ["id", "mealIds", "title", "shortDescription", "createdAt", "updatedAt"],
    Features: ["id", "mealId", "title", "shortDescription", "createdAt", "updatedAt"],
    MealItemOption: ["id", "mealItemId", "title", "shortDescription", "createdAt", "updatedAt"],
    MealAvailability: ["id", "mealId", "startDate", "endDate", "createdAt", "updatedAt"],
    OrderLineItem: ["id", "details", "comments", "mealItemId", "mealItemOptionId", "bookingId", "createdAt", "updatedAt"],
    Order: ["id", "mealId", "status", "patientId", "tenantId", "createdAt", "updatedAt"],
    Location: ["id", "description", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "tenantId", "createdAt", "updatedAt"]
};
function applyModelsEnhanceMap(modelsEnhanceMap) {
    for (const modelsEnhanceMapKey of Object.keys(modelsEnhanceMap)) {
        const modelName = modelsEnhanceMapKey;
        const modelConfig = modelsEnhanceMap[modelName];
        const modelClass = models[modelName];
        const modelTarget = modelClass.prototype;
        applyTypeClassEnhanceConfig(modelConfig, modelClass, modelTarget, modelsInfo[modelName]);
    }
}
exports.applyModelsEnhanceMap = applyModelsEnhanceMap;
const outputsInfo = {
    AggregateUser: ["_count", "_min", "_max"],
    UserGroupBy: ["tenantId", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "mealIds", "createdAt", "updatedAt", "wardId", "_count", "_min", "_max"],
    AggregatePatientProfile: ["_count", "_min", "_max"],
    PatientProfileGroupBy: ["id", "identityNumber", "identityType", "bedNumber", "wardNumber", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "userId", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateNotificationSettings: ["_count", "_min", "_max"],
    NotificationSettingsGroupBy: ["id", "newMenuItems", "orderUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "userId", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateTenant: ["_count", "_min", "_max"],
    TenantGroupBy: ["id", "name", "slug", "description", "logoImage", "avatar", "coverImage", "MealImages", "acceptedUserEmailDomains", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateWard: ["_count", "_avg", "_sum", "_min", "_max"],
    WardGroupBy: ["id", "number", "name", "description", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateAggregateRating: ["_count", "_avg", "_sum", "_min", "_max"],
    Aggregateundefined: ["id", "ratingValue", "countedPosts", "allPosts", "ratingCount", "mealId", "createdAt", "updatedAt"],
    AggregatePost: ["_count", "_avg", "_sum", "_min", "_max"],
    PostGroupBy: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "mealId", "postLink", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateComment: ["_count", "_min", "_max"],
    CommentGroupBy: ["id", "text", "postId", "authorId", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateReply: ["_count", "_min", "_max"],
    ReplyGroupBy: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateReaction: ["_count", "_min", "_max"],
    ReactionGroupBy: ["id", "type", "mealId", "postId", "commentId", "replyId", "authorId", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateRequest: ["_count", "_min", "_max"],
    RequestGroupBy: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "userId", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateNotification: ["_count", "_min", "_max"],
    NotificationGroupBy: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateMeal: ["_count", "_min", "_max"],
    MealGroupBy: ["id", "tenantId", "productLink", "title", "description", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "itemIds", "photo", "gallery", "publishStatus", "likedByIds", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateMealItem: ["_count", "_min", "_max"],
    MealItemGroupBy: ["id", "mealIds", "title", "shortDescription", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateFeatures: ["_count", "_min", "_max"],
    FeaturesGroupBy: ["id", "mealId", "title", "shortDescription", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateMealItemOption: ["_count", "_min", "_max"],
    MealItemOptionGroupBy: ["id", "mealItemId", "title", "shortDescription", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateMealAvailability: ["_count", "_min", "_max"],
    MealAvailabilityGroupBy: ["id", "mealId", "startDate", "endDate", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateOrderLineItem: ["_count", "_min", "_max"],
    OrderLineItemGroupBy: ["id", "details", "comments", "mealItemId", "mealItemOptionId", "bookingId", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateOrder: ["_count", "_min", "_max"],
    OrderGroupBy: ["id", "mealId", "status", "patientId", "tenantId", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateLocation: ["_count", "_avg", "_sum", "_min", "_max"],
    LocationGroupBy: ["id", "description", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "tenantId", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
    AffectedRowsOutput: ["count"],
    UserCount: ["Notifications", "Activity", "LikedMeals", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings"],
    UserCountAggregate: ["tenantId", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "mealIds", "createdAt", "updatedAt", "wardId", "_all"],
    UserMinAggregate: ["tenantId", "uid", "uuid", "id", "username", "email", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "createdAt", "updatedAt", "wardId"],
    UserMaxAggregate: ["tenantId", "uid", "uuid", "id", "username", "email", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "createdAt", "updatedAt", "wardId"],
    PatientProfileCountAggregate: ["id", "identityNumber", "identityType", "bedNumber", "wardNumber", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "userId", "createdAt", "updatedAt", "_all"],
    PatientProfileMinAggregate: ["id", "identityNumber", "identityType", "bedNumber", "wardNumber", "userId", "createdAt", "updatedAt"],
    PatientProfileMaxAggregate: ["id", "identityNumber", "identityType", "bedNumber", "wardNumber", "userId", "createdAt", "updatedAt"],
    NotificationSettingsCountAggregate: ["id", "newMenuItems", "orderUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "userId", "createdAt", "updatedAt", "_all"],
    NotificationSettingsMinAggregate: ["id", "newMenuItems", "orderUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "userId", "createdAt", "updatedAt"],
    NotificationSettingsMaxAggregate: ["id", "newMenuItems", "orderUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "userId", "createdAt", "updatedAt"],
    TenantCount: ["Users", "Meals", "Orders", "Locations"],
    TenantCountAggregate: ["id", "name", "slug", "description", "logoImage", "avatar", "coverImage", "MealImages", "acceptedUserEmailDomains", "createdAt", "updatedAt", "_all"],
    TenantMinAggregate: ["id", "name", "slug", "description", "logoImage", "avatar", "coverImage", "createdAt", "updatedAt"],
    TenantMaxAggregate: ["id", "name", "slug", "description", "logoImage", "avatar", "coverImage", "createdAt", "updatedAt"],
    WardCount: ["Users"],
    WardCountAggregate: ["id", "number", "name", "description", "createdAt", "updatedAt", "_all"],
    WardAvgAggregate: ["number"],
    WardSumAggregate: ["number"],
    WardMinAggregate: ["id", "number", "name", "description", "createdAt", "updatedAt"],
    WardMaxAggregate: ["id", "number", "name", "description", "createdAt", "updatedAt"],
    PostCount: ["Comments", "Reactions"],
    PostCountAggregate: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "mealId", "postLink", "createdAt", "updatedAt", "_all"],
    PostAvgAggregate: ["rating"],
    PostSumAggregate: ["rating"],
    PostMinAggregate: ["id", "type", "caption", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "mealId", "postLink", "createdAt", "updatedAt"],
    PostMaxAggregate: ["id", "type", "caption", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "mealId", "postLink", "createdAt", "updatedAt"],
    CommentCount: ["Replies", "Reactions"],
    CommentCountAggregate: ["id", "text", "postId", "authorId", "createdAt", "updatedAt", "_all"],
    CommentMinAggregate: ["id", "text", "postId", "authorId", "createdAt", "updatedAt"],
    CommentMaxAggregate: ["id", "text", "postId", "authorId", "createdAt", "updatedAt"],
    ReplyCount: ["Reactions"],
    ReplyCountAggregate: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt", "_all"],
    ReplyMinAggregate: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    ReplyMaxAggregate: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    ReactionCountAggregate: ["id", "type", "mealId", "postId", "commentId", "replyId", "authorId", "createdAt", "updatedAt", "_all"],
    ReactionMinAggregate: ["id", "type", "mealId", "postId", "commentId", "replyId", "authorId", "createdAt", "updatedAt"],
    ReactionMaxAggregate: ["id", "type", "mealId", "postId", "commentId", "replyId", "authorId", "createdAt", "updatedAt"],
    RequestCountAggregate: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "userId", "createdAt", "updatedAt", "_all"],
    RequestMinAggregate: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    RequestMaxAggregate: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    NotificationCountAggregate: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt", "_all"],
    NotificationMinAggregate: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationMaxAggregate: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    MealCount: ["Items", "Availability", "Orders", "LikedBy", "Posts", "Features", "Reactions"],
    MealCountAggregate: ["id", "tenantId", "productLink", "title", "description", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "itemIds", "photo", "gallery", "publishStatus", "likedByIds", "createdAt", "updatedAt", "_all"],
    MealMinAggregate: ["id", "tenantId", "productLink", "title", "description", "photo", "publishStatus", "createdAt", "updatedAt"],
    MealMaxAggregate: ["id", "tenantId", "productLink", "title", "description", "photo", "publishStatus", "createdAt", "updatedAt"],
    MealItemCount: ["Meals", "Options", "OrderLineItems"],
    MealItemCountAggregate: ["id", "mealIds", "title", "shortDescription", "createdAt", "updatedAt", "_all"],
    MealItemMinAggregate: ["id", "title", "shortDescription", "createdAt", "updatedAt"],
    MealItemMaxAggregate: ["id", "title", "shortDescription", "createdAt", "updatedAt"],
    FeaturesCountAggregate: ["id", "mealId", "title", "shortDescription", "createdAt", "updatedAt", "_all"],
    FeaturesMinAggregate: ["id", "mealId", "title", "shortDescription", "createdAt", "updatedAt"],
    FeaturesMaxAggregate: ["id", "mealId", "title", "shortDescription", "createdAt", "updatedAt"],
    MealItemOptionCount: ["OrderLineItems"],
    MealItemOptionCountAggregate: ["id", "mealItemId", "title", "shortDescription", "createdAt", "updatedAt", "_all"],
    MealItemOptionMinAggregate: ["id", "mealItemId", "title", "shortDescription", "createdAt", "updatedAt"],
    MealItemOptionMaxAggregate: ["id", "mealItemId", "title", "shortDescription", "createdAt", "updatedAt"],
    MealAvailabilityCountAggregate: ["id", "mealId", "startDate", "endDate", "createdAt", "updatedAt", "_all"],
    MealAvailabilityMinAggregate: ["id", "mealId", "startDate", "endDate", "createdAt", "updatedAt"],
    MealAvailabilityMaxAggregate: ["id", "mealId", "startDate", "endDate", "createdAt", "updatedAt"],
    OrderLineItemCountAggregate: ["id", "details", "comments", "mealItemId", "mealItemOptionId", "bookingId", "createdAt", "updatedAt", "_all"],
    OrderLineItemMinAggregate: ["id", "details", "comments", "mealItemId", "mealItemOptionId", "bookingId", "createdAt", "updatedAt"],
    OrderLineItemMaxAggregate: ["id", "details", "comments", "mealItemId", "mealItemOptionId", "bookingId", "createdAt", "updatedAt"],
    OrderCount: ["Items"],
    OrderCountAggregate: ["id", "mealId", "status", "patientId", "tenantId", "createdAt", "updatedAt", "_all"],
    OrderMinAggregate: ["id", "mealId", "status", "patientId", "tenantId", "createdAt", "updatedAt"],
    OrderMaxAggregate: ["id", "mealId", "status", "patientId", "tenantId", "createdAt", "updatedAt"],
    LocationCountAggregate: ["id", "description", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "tenantId", "createdAt", "updatedAt", "_all"],
    LocationAvgAggregate: ["longitude", "latitude"],
    LocationSumAggregate: ["longitude", "latitude"],
    LocationMinAggregate: ["id", "description", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "tenantId", "createdAt", "updatedAt"],
    LocationMaxAggregate: ["id", "description", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "tenantId", "createdAt", "updatedAt"]
};
function applyOutputTypesEnhanceMap(outputTypesEnhanceMap) {
    for (const outputTypeEnhanceMapKey of Object.keys(outputTypesEnhanceMap)) {
        const outputTypeName = outputTypeEnhanceMapKey;
        const typeConfig = outputTypesEnhanceMap[outputTypeName];
        const typeClass = outputTypes[outputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, outputsInfo[outputTypeName]);
    }
}
exports.applyOutputTypesEnhanceMap = applyOutputTypesEnhanceMap;
const inputsInfo = {
    UserWhereInput: ["AND", "OR", "NOT", "Tenant", "tenantId", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "PatientProfile", "Notifications", "Activity", "LikedMeals", "mealIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt", "Ward", "wardId"],
    UserOrderByWithRelationInput: ["Tenant", "tenantId", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "PatientProfile", "Notifications", "Activity", "LikedMeals", "mealIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt", "Ward", "wardId"],
    UserWhereUniqueInput: ["uid", "id", "username", "email"],
    UserOrderByWithAggregationInput: ["tenantId", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "mealIds", "createdAt", "updatedAt", "wardId", "_count", "_max", "_min"],
    UserScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "tenantId", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "mealIds", "createdAt", "updatedAt", "wardId"],
    PatientProfileWhereInput: ["AND", "OR", "NOT", "id", "identityNumber", "identityType", "bedNumber", "wardNumber", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "User", "userId", "createdAt", "updatedAt"],
    PatientProfileOrderByWithRelationInput: ["id", "identityNumber", "identityType", "bedNumber", "wardNumber", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "User", "userId", "createdAt", "updatedAt"],
    PatientProfileWhereUniqueInput: ["id", "userId"],
    PatientProfileOrderByWithAggregationInput: ["id", "identityNumber", "identityType", "bedNumber", "wardNumber", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "userId", "createdAt", "updatedAt", "_count", "_max", "_min"],
    PatientProfileScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "identityNumber", "identityType", "bedNumber", "wardNumber", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "userId", "createdAt", "updatedAt"],
    NotificationSettingsWhereInput: ["AND", "OR", "NOT", "id", "newMenuItems", "orderUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "User", "userId", "createdAt", "updatedAt"],
    NotificationSettingsOrderByWithRelationInput: ["id", "newMenuItems", "orderUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "User", "userId", "createdAt", "updatedAt"],
    NotificationSettingsWhereUniqueInput: ["id", "userId"],
    NotificationSettingsOrderByWithAggregationInput: ["id", "newMenuItems", "orderUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "userId", "createdAt", "updatedAt", "_count", "_max", "_min"],
    NotificationSettingsScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "newMenuItems", "orderUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "userId", "createdAt", "updatedAt"],
    TenantWhereInput: ["AND", "OR", "NOT", "id", "name", "slug", "description", "logoImage", "avatar", "coverImage", "MealImages", "Users", "Meals", "Orders", "Locations", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    TenantOrderByWithRelationInput: ["id", "name", "slug", "description", "logoImage", "avatar", "coverImage", "MealImages", "Users", "Meals", "Orders", "Locations", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    TenantWhereUniqueInput: ["id", "slug"],
    TenantOrderByWithAggregationInput: ["id", "name", "slug", "description", "logoImage", "avatar", "coverImage", "MealImages", "acceptedUserEmailDomains", "createdAt", "updatedAt", "_count", "_max", "_min"],
    TenantScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "slug", "description", "logoImage", "avatar", "coverImage", "MealImages", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    WardWhereInput: ["AND", "OR", "NOT", "id", "number", "name", "description", "Users", "createdAt", "updatedAt"],
    WardOrderByWithRelationInput: ["id", "number", "name", "description", "Users", "createdAt", "updatedAt"],
    WardWhereUniqueInput: ["id"],
    WardOrderByWithAggregationInput: ["id", "number", "name", "description", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
    WardScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "number", "name", "description", "createdAt", "updatedAt"],
    AggregateRatingWhereInput: ["AND", "OR", "NOT", "id", "ratingValue", "countedPosts", "allPosts", "ratingCount", "Meal", "mealId", "createdAt", "updatedAt"],
    AggregateRatingOrderByWithRelationInput: ["id", "ratingValue", "countedPosts", "allPosts", "ratingCount", "Meal", "mealId", "createdAt", "updatedAt"],
    AggregateRatingWhereUniqueInput: ["id", "mealId"],
    AggregateRatingOrderByWithAggregationInput: ["id", "ratingValue", "countedPosts", "allPosts", "ratingCount", "mealId", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
    AggregateRatingScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "ratingValue", "countedPosts", "allPosts", "ratingCount", "mealId", "createdAt", "updatedAt"],
    PostWhereInput: ["AND", "OR", "NOT", "id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "authorId", "Meal", "mealId", "Comments", "Reactions", "postLink", "createdAt", "updatedAt"],
    PostOrderByWithRelationInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "authorId", "Meal", "mealId", "Comments", "Reactions", "postLink", "createdAt", "updatedAt"],
    PostWhereUniqueInput: ["id"],
    PostOrderByWithAggregationInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "mealId", "postLink", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
    PostScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "mealId", "postLink", "createdAt", "updatedAt"],
    CommentWhereInput: ["AND", "OR", "NOT", "id", "text", "Post", "postId", "Author", "authorId", "Replies", "Reactions", "createdAt", "updatedAt"],
    CommentOrderByWithRelationInput: ["id", "text", "Post", "postId", "Author", "authorId", "Replies", "Reactions", "createdAt", "updatedAt"],
    CommentWhereUniqueInput: ["id"],
    CommentOrderByWithAggregationInput: ["id", "text", "postId", "authorId", "createdAt", "updatedAt", "_count", "_max", "_min"],
    CommentScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "text", "postId", "authorId", "createdAt", "updatedAt"],
    ReplyWhereInput: ["AND", "OR", "NOT", "id", "text", "Comment", "commentId", "Author", "authorId", "Reactions", "createdAt", "updatedAt"],
    ReplyOrderByWithRelationInput: ["id", "text", "Comment", "commentId", "Author", "authorId", "Reactions", "createdAt", "updatedAt"],
    ReplyWhereUniqueInput: ["id"],
    ReplyOrderByWithAggregationInput: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt", "_count", "_max", "_min"],
    ReplyScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    ReactionWhereInput: ["AND", "OR", "NOT", "id", "type", "Meal", "mealId", "Post", "postId", "Comment", "commentId", "Reply", "replyId", "Author", "authorId", "createdAt", "updatedAt"],
    ReactionOrderByWithRelationInput: ["id", "type", "Meal", "mealId", "Post", "postId", "Comment", "commentId", "Reply", "replyId", "Author", "authorId", "createdAt", "updatedAt"],
    ReactionWhereUniqueInput: ["id"],
    ReactionOrderByWithAggregationInput: ["id", "type", "mealId", "postId", "commentId", "replyId", "authorId", "createdAt", "updatedAt", "_count", "_max", "_min"],
    ReactionScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "type", "mealId", "postId", "commentId", "replyId", "authorId", "createdAt", "updatedAt"],
    RequestWhereInput: ["AND", "OR", "NOT", "id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "Reporter", "userId", "createdAt", "updatedAt"],
    RequestOrderByWithRelationInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "Reporter", "userId", "createdAt", "updatedAt"],
    RequestWhereUniqueInput: ["id"],
    RequestOrderByWithAggregationInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "userId", "createdAt", "updatedAt", "_count", "_max", "_min"],
    RequestScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    NotificationWhereInput: ["AND", "OR", "NOT", "id", "description", "User", "userId", "Actor", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationOrderByWithRelationInput: ["id", "description", "User", "userId", "Actor", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationWhereUniqueInput: ["id"],
    NotificationOrderByWithAggregationInput: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt", "_count", "_max", "_min"],
    NotificationScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    MealWhereInput: ["AND", "OR", "NOT", "id", "Tenant", "tenantId", "productLink", "title", "description", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "Items", "itemIds", "Availability", "Orders", "photo", "gallery", "AggregateRating", "publishStatus", "LikedBy", "likedByIds", "Posts", "Features", "Reactions", "createdAt", "updatedAt"],
    MealOrderByWithRelationInput: ["id", "Tenant", "tenantId", "productLink", "title", "description", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "Items", "itemIds", "Availability", "Orders", "photo", "gallery", "AggregateRating", "publishStatus", "LikedBy", "likedByIds", "Posts", "Features", "Reactions", "createdAt", "updatedAt"],
    MealWhereUniqueInput: ["id"],
    MealOrderByWithAggregationInput: ["id", "tenantId", "productLink", "title", "description", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "itemIds", "photo", "gallery", "publishStatus", "likedByIds", "createdAt", "updatedAt", "_count", "_max", "_min"],
    MealScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "tenantId", "productLink", "title", "description", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "itemIds", "photo", "gallery", "publishStatus", "likedByIds", "createdAt", "updatedAt"],
    MealItemWhereInput: ["AND", "OR", "NOT", "id", "Meals", "mealIds", "title", "shortDescription", "Options", "OrderLineItems", "createdAt", "updatedAt"],
    MealItemOrderByWithRelationInput: ["id", "Meals", "mealIds", "title", "shortDescription", "Options", "OrderLineItems", "createdAt", "updatedAt"],
    MealItemWhereUniqueInput: ["id"],
    MealItemOrderByWithAggregationInput: ["id", "mealIds", "title", "shortDescription", "createdAt", "updatedAt", "_count", "_max", "_min"],
    MealItemScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "mealIds", "title", "shortDescription", "createdAt", "updatedAt"],
    FeaturesWhereInput: ["AND", "OR", "NOT", "id", "Meal", "mealId", "title", "shortDescription", "createdAt", "updatedAt"],
    FeaturesOrderByWithRelationInput: ["id", "Meal", "mealId", "title", "shortDescription", "createdAt", "updatedAt"],
    FeaturesWhereUniqueInput: ["id"],
    FeaturesOrderByWithAggregationInput: ["id", "mealId", "title", "shortDescription", "createdAt", "updatedAt", "_count", "_max", "_min"],
    FeaturesScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "mealId", "title", "shortDescription", "createdAt", "updatedAt"],
    MealItemOptionWhereInput: ["AND", "OR", "NOT", "id", "MealItem", "mealItemId", "title", "shortDescription", "OrderLineItems", "createdAt", "updatedAt"],
    MealItemOptionOrderByWithRelationInput: ["id", "MealItem", "mealItemId", "title", "shortDescription", "OrderLineItems", "createdAt", "updatedAt"],
    MealItemOptionWhereUniqueInput: ["id"],
    MealItemOptionOrderByWithAggregationInput: ["id", "mealItemId", "title", "shortDescription", "createdAt", "updatedAt", "_count", "_max", "_min"],
    MealItemOptionScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "mealItemId", "title", "shortDescription", "createdAt", "updatedAt"],
    MealAvailabilityWhereInput: ["AND", "OR", "NOT", "id", "Meal", "mealId", "startDate", "endDate", "createdAt", "updatedAt"],
    MealAvailabilityOrderByWithRelationInput: ["id", "Meal", "mealId", "startDate", "endDate", "createdAt", "updatedAt"],
    MealAvailabilityWhereUniqueInput: ["id"],
    MealAvailabilityOrderByWithAggregationInput: ["id", "mealId", "startDate", "endDate", "createdAt", "updatedAt", "_count", "_max", "_min"],
    MealAvailabilityScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "mealId", "startDate", "endDate", "createdAt", "updatedAt"],
    OrderLineItemWhereInput: ["AND", "OR", "NOT", "id", "details", "comments", "selectedMealItem", "mealItemId", "selectedMealItemOption", "mealItemOptionId", "Booking", "bookingId", "createdAt", "updatedAt"],
    OrderLineItemOrderByWithRelationInput: ["id", "details", "comments", "selectedMealItem", "mealItemId", "selectedMealItemOption", "mealItemOptionId", "Booking", "bookingId", "createdAt", "updatedAt"],
    OrderLineItemWhereUniqueInput: ["id"],
    OrderLineItemOrderByWithAggregationInput: ["id", "details", "comments", "mealItemId", "mealItemOptionId", "bookingId", "createdAt", "updatedAt", "_count", "_max", "_min"],
    OrderLineItemScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "details", "comments", "mealItemId", "mealItemOptionId", "bookingId", "createdAt", "updatedAt"],
    OrderWhereInput: ["AND", "OR", "NOT", "id", "Meal", "mealId", "status", "Patient", "patientId", "Tenant", "tenantId", "Items", "createdAt", "updatedAt"],
    OrderOrderByWithRelationInput: ["id", "Meal", "mealId", "status", "Patient", "patientId", "Tenant", "tenantId", "Items", "createdAt", "updatedAt"],
    OrderWhereUniqueInput: ["id"],
    OrderOrderByWithAggregationInput: ["id", "mealId", "status", "patientId", "tenantId", "createdAt", "updatedAt", "_count", "_max", "_min"],
    OrderScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "mealId", "status", "patientId", "tenantId", "createdAt", "updatedAt"],
    LocationWhereInput: ["AND", "OR", "NOT", "id", "description", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "Tenant", "tenantId", "createdAt", "updatedAt"],
    LocationOrderByWithRelationInput: ["id", "description", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "Tenant", "tenantId", "createdAt", "updatedAt"],
    LocationWhereUniqueInput: ["id"],
    LocationOrderByWithAggregationInput: ["id", "description", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "tenantId", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
    LocationScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "description", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "tenantId", "createdAt", "updatedAt"],
    UserCreateInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "PatientProfile", "Notifications", "Activity", "LikedMeals", "mealIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt", "Ward"],
    UserUpdateInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "PatientProfile", "Notifications", "Activity", "LikedMeals", "mealIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt", "Ward"],
    UserCreateManyInput: ["tenantId", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "mealIds", "createdAt", "updatedAt", "wardId"],
    UserUpdateManyMutationInput: ["uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "mealIds", "createdAt", "updatedAt"],
    PatientProfileCreateInput: ["id", "identityNumber", "identityType", "bedNumber", "wardNumber", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "User", "createdAt", "updatedAt"],
    PatientProfileUpdateInput: ["identityNumber", "identityType", "bedNumber", "wardNumber", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "User", "createdAt", "updatedAt"],
    PatientProfileCreateManyInput: ["id", "identityNumber", "identityType", "bedNumber", "wardNumber", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "userId", "createdAt", "updatedAt"],
    PatientProfileUpdateManyMutationInput: ["identityNumber", "identityType", "bedNumber", "wardNumber", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "createdAt", "updatedAt"],
    NotificationSettingsCreateInput: ["id", "newMenuItems", "orderUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "User", "createdAt", "updatedAt"],
    NotificationSettingsUpdateInput: ["newMenuItems", "orderUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "User", "createdAt", "updatedAt"],
    NotificationSettingsCreateManyInput: ["id", "newMenuItems", "orderUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "userId", "createdAt", "updatedAt"],
    NotificationSettingsUpdateManyMutationInput: ["newMenuItems", "orderUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "createdAt", "updatedAt"],
    TenantCreateInput: ["id", "name", "slug", "description", "logoImage", "avatar", "coverImage", "MealImages", "Users", "Meals", "Orders", "Locations", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    TenantUpdateInput: ["name", "slug", "description", "logoImage", "avatar", "coverImage", "MealImages", "Users", "Meals", "Orders", "Locations", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    TenantCreateManyInput: ["id", "name", "slug", "description", "logoImage", "avatar", "coverImage", "MealImages", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    TenantUpdateManyMutationInput: ["name", "slug", "description", "logoImage", "avatar", "coverImage", "MealImages", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    WardCreateInput: ["id", "number", "name", "description", "Users", "createdAt", "updatedAt"],
    WardUpdateInput: ["number", "name", "description", "Users", "createdAt", "updatedAt"],
    WardCreateManyInput: ["id", "number", "name", "description", "createdAt", "updatedAt"],
    WardUpdateManyMutationInput: ["number", "name", "description", "createdAt", "updatedAt"],
    AggregateRatingCreateInput: ["id", "ratingValue", "countedPosts", "allPosts", "ratingCount", "Meal", "createdAt", "updatedAt"],
    AggregateRatingUpdateInput: ["ratingValue", "countedPosts", "allPosts", "ratingCount", "Meal", "createdAt", "updatedAt"],
    AggregateRatingCreateManyInput: ["id", "ratingValue", "countedPosts", "allPosts", "ratingCount", "mealId", "createdAt", "updatedAt"],
    AggregateRatingUpdateManyMutationInput: ["ratingValue", "countedPosts", "allPosts", "ratingCount", "createdAt", "updatedAt"],
    PostCreateInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "Meal", "Comments", "Reactions", "postLink", "createdAt", "updatedAt"],
    PostUpdateInput: ["type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "Meal", "Comments", "Reactions", "postLink", "createdAt", "updatedAt"],
    PostCreateManyInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "mealId", "postLink", "createdAt", "updatedAt"],
    PostUpdateManyMutationInput: ["type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "postLink", "createdAt", "updatedAt"],
    CommentCreateInput: ["id", "text", "Post", "Author", "Replies", "Reactions", "createdAt", "updatedAt"],
    CommentUpdateInput: ["text", "Post", "Author", "Replies", "Reactions", "createdAt", "updatedAt"],
    CommentCreateManyInput: ["id", "text", "postId", "authorId", "createdAt", "updatedAt"],
    CommentUpdateManyMutationInput: ["text", "createdAt", "updatedAt"],
    ReplyCreateInput: ["id", "text", "Comment", "Author", "Reactions", "createdAt", "updatedAt"],
    ReplyUpdateInput: ["text", "Comment", "Author", "Reactions", "createdAt", "updatedAt"],
    ReplyCreateManyInput: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    ReplyUpdateManyMutationInput: ["text", "createdAt", "updatedAt"],
    ReactionCreateInput: ["id", "type", "Meal", "Post", "Comment", "Reply", "Author", "createdAt", "updatedAt"],
    ReactionUpdateInput: ["type", "Meal", "Post", "Comment", "Reply", "Author", "createdAt", "updatedAt"],
    ReactionCreateManyInput: ["id", "type", "mealId", "postId", "commentId", "replyId", "authorId", "createdAt", "updatedAt"],
    ReactionUpdateManyMutationInput: ["type", "createdAt", "updatedAt"],
    RequestCreateInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "Reporter", "createdAt", "updatedAt"],
    RequestUpdateInput: ["reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "Reporter", "createdAt", "updatedAt"],
    RequestCreateManyInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    RequestUpdateManyMutationInput: ["reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "createdAt", "updatedAt"],
    NotificationCreateInput: ["id", "description", "User", "Actor", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationUpdateInput: ["description", "User", "Actor", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationCreateManyInput: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationUpdateManyMutationInput: ["description", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    MealCreateInput: ["id", "Tenant", "productLink", "title", "description", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "Items", "itemIds", "Availability", "Orders", "photo", "gallery", "AggregateRating", "publishStatus", "LikedBy", "likedByIds", "Posts", "Features", "Reactions", "createdAt", "updatedAt"],
    MealUpdateInput: ["Tenant", "productLink", "title", "description", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "Items", "itemIds", "Availability", "Orders", "photo", "gallery", "AggregateRating", "publishStatus", "LikedBy", "likedByIds", "Posts", "Features", "Reactions", "createdAt", "updatedAt"],
    MealCreateManyInput: ["id", "tenantId", "productLink", "title", "description", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "itemIds", "photo", "gallery", "publishStatus", "likedByIds", "createdAt", "updatedAt"],
    MealUpdateManyMutationInput: ["productLink", "title", "description", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "itemIds", "photo", "gallery", "publishStatus", "likedByIds", "createdAt", "updatedAt"],
    MealItemCreateInput: ["id", "Meals", "mealIds", "title", "shortDescription", "Options", "OrderLineItems", "createdAt", "updatedAt"],
    MealItemUpdateInput: ["Meals", "mealIds", "title", "shortDescription", "Options", "OrderLineItems", "createdAt", "updatedAt"],
    MealItemCreateManyInput: ["id", "mealIds", "title", "shortDescription", "createdAt", "updatedAt"],
    MealItemUpdateManyMutationInput: ["mealIds", "title", "shortDescription", "createdAt", "updatedAt"],
    FeaturesCreateInput: ["id", "Meal", "title", "shortDescription", "createdAt", "updatedAt"],
    FeaturesUpdateInput: ["Meal", "title", "shortDescription", "createdAt", "updatedAt"],
    FeaturesCreateManyInput: ["id", "mealId", "title", "shortDescription", "createdAt", "updatedAt"],
    FeaturesUpdateManyMutationInput: ["title", "shortDescription", "createdAt", "updatedAt"],
    MealItemOptionCreateInput: ["id", "MealItem", "title", "shortDescription", "OrderLineItems", "createdAt", "updatedAt"],
    MealItemOptionUpdateInput: ["MealItem", "title", "shortDescription", "OrderLineItems", "createdAt", "updatedAt"],
    MealItemOptionCreateManyInput: ["id", "mealItemId", "title", "shortDescription", "createdAt", "updatedAt"],
    MealItemOptionUpdateManyMutationInput: ["title", "shortDescription", "createdAt", "updatedAt"],
    MealAvailabilityCreateInput: ["id", "Meal", "startDate", "endDate", "createdAt", "updatedAt"],
    MealAvailabilityUpdateInput: ["Meal", "startDate", "endDate", "createdAt", "updatedAt"],
    MealAvailabilityCreateManyInput: ["id", "mealId", "startDate", "endDate", "createdAt", "updatedAt"],
    MealAvailabilityUpdateManyMutationInput: ["startDate", "endDate", "createdAt", "updatedAt"],
    OrderLineItemCreateInput: ["id", "details", "comments", "selectedMealItem", "selectedMealItemOption", "Booking", "createdAt", "updatedAt"],
    OrderLineItemUpdateInput: ["details", "comments", "selectedMealItem", "selectedMealItemOption", "Booking", "createdAt", "updatedAt"],
    OrderLineItemCreateManyInput: ["id", "details", "comments", "mealItemId", "mealItemOptionId", "bookingId", "createdAt", "updatedAt"],
    OrderLineItemUpdateManyMutationInput: ["details", "comments", "createdAt", "updatedAt"],
    OrderCreateInput: ["id", "Meal", "status", "Patient", "Tenant", "Items", "createdAt", "updatedAt"],
    OrderUpdateInput: ["Meal", "status", "Patient", "Tenant", "Items", "createdAt", "updatedAt"],
    OrderCreateManyInput: ["id", "mealId", "status", "patientId", "tenantId", "createdAt", "updatedAt"],
    OrderUpdateManyMutationInput: ["status", "createdAt", "updatedAt"],
    LocationCreateInput: ["id", "description", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "Tenant", "createdAt", "updatedAt"],
    LocationUpdateInput: ["description", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "Tenant", "createdAt", "updatedAt"],
    LocationCreateManyInput: ["id", "description", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "tenantId", "createdAt", "updatedAt"],
    LocationUpdateManyMutationInput: ["description", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "createdAt", "updatedAt"],
    TenantRelationFilter: ["is", "isNot"],
    StringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "isSet"],
    StringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not"],
    EnumROLENullableListFilter: ["equals", "has", "hasEvery", "hasSome", "isEmpty"],
    DateTimeNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "isSet"],
    BoolNullableFilter: ["equals", "not", "isSet"],
    NotificationSettingsRelationFilter: ["is", "isNot"],
    PatientProfileRelationFilter: ["is", "isNot"],
    NotificationListRelationFilter: ["every", "some", "none"],
    MealListRelationFilter: ["every", "some", "none"],
    StringNullableListFilter: ["equals", "has", "hasEvery", "hasSome", "isEmpty"],
    RequestListRelationFilter: ["every", "some", "none"],
    PostListRelationFilter: ["every", "some", "none"],
    CommentListRelationFilter: ["every", "some", "none"],
    ReplyListRelationFilter: ["every", "some", "none"],
    ReactionListRelationFilter: ["every", "some", "none"],
    OrderListRelationFilter: ["every", "some", "none"],
    DateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    WardRelationFilter: ["is", "isNot"],
    NotificationOrderByRelationAggregateInput: ["_count"],
    MealOrderByRelationAggregateInput: ["_count"],
    RequestOrderByRelationAggregateInput: ["_count"],
    PostOrderByRelationAggregateInput: ["_count"],
    CommentOrderByRelationAggregateInput: ["_count"],
    ReplyOrderByRelationAggregateInput: ["_count"],
    ReactionOrderByRelationAggregateInput: ["_count"],
    OrderOrderByRelationAggregateInput: ["_count"],
    UserCountOrderByAggregateInput: ["tenantId", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "mealIds", "createdAt", "updatedAt", "wardId"],
    UserMaxOrderByAggregateInput: ["tenantId", "uid", "uuid", "id", "username", "email", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "createdAt", "updatedAt", "wardId"],
    UserMinOrderByAggregateInput: ["tenantId", "uid", "uuid", "id", "username", "email", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "createdAt", "updatedAt", "wardId"],
    StringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "_count", "_min", "_max", "isSet"],
    StringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "_count", "_min", "_max"],
    DateTimeNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max", "isSet"],
    BoolNullableWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max", "isSet"],
    DateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    EnumDIETARY_RESTRICTIONSNullableListFilter: ["equals", "has", "hasEvery", "hasSome", "isEmpty"],
    EnumMEAL_TYPESNullableListFilter: ["equals", "has", "hasEvery", "hasSome", "isEmpty"],
    EnumMEAL_KINDNullableListFilter: ["equals", "has", "hasEvery", "hasSome", "isEmpty"],
    EnumSPECIAL_DIETSNullableListFilter: ["equals", "has", "hasEvery", "hasSome", "isEmpty"],
    UserRelationFilter: ["is", "isNot"],
    PatientProfileCountOrderByAggregateInput: ["id", "identityNumber", "identityType", "bedNumber", "wardNumber", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "userId", "createdAt", "updatedAt"],
    PatientProfileMaxOrderByAggregateInput: ["id", "identityNumber", "identityType", "bedNumber", "wardNumber", "userId", "createdAt", "updatedAt"],
    PatientProfileMinOrderByAggregateInput: ["id", "identityNumber", "identityType", "bedNumber", "wardNumber", "userId", "createdAt", "updatedAt"],
    BoolFilter: ["equals", "not"],
    NotificationSettingsCountOrderByAggregateInput: ["id", "newMenuItems", "orderUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "userId", "createdAt", "updatedAt"],
    NotificationSettingsMaxOrderByAggregateInput: ["id", "newMenuItems", "orderUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "userId", "createdAt", "updatedAt"],
    NotificationSettingsMinOrderByAggregateInput: ["id", "newMenuItems", "orderUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "userId", "createdAt", "updatedAt"],
    BoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
    UserListRelationFilter: ["every", "some", "none"],
    LocationListRelationFilter: ["every", "some", "none"],
    UserOrderByRelationAggregateInput: ["_count"],
    LocationOrderByRelationAggregateInput: ["_count"],
    TenantCountOrderByAggregateInput: ["id", "name", "slug", "description", "logoImage", "avatar", "coverImage", "MealImages", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    TenantMaxOrderByAggregateInput: ["id", "name", "slug", "description", "logoImage", "avatar", "coverImage", "createdAt", "updatedAt"],
    TenantMinOrderByAggregateInput: ["id", "name", "slug", "description", "logoImage", "avatar", "coverImage", "createdAt", "updatedAt"],
    IntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    WardCountOrderByAggregateInput: ["id", "number", "name", "description", "createdAt", "updatedAt"],
    WardAvgOrderByAggregateInput: ["number"],
    WardMaxOrderByAggregateInput: ["id", "number", "name", "description", "createdAt", "updatedAt"],
    WardMinOrderByAggregateInput: ["id", "number", "name", "description", "createdAt", "updatedAt"],
    WardSumOrderByAggregateInput: ["number"],
    IntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    FloatFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    IntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "isSet"],
    MealRelationFilter: ["is", "isNot"],
    AggregateRatingCountOrderByAggregateInput: ["id", "ratingValue", "countedPosts", "allPosts", "ratingCount", "mealId", "createdAt", "updatedAt"],
    AggregateRatingAvgOrderByAggregateInput: ["ratingValue", "countedPosts", "allPosts", "ratingCount"],
    AggregateRatingMaxOrderByAggregateInput: ["id", "ratingValue", "countedPosts", "allPosts", "ratingCount", "mealId", "createdAt", "updatedAt"],
    AggregateRatingMinOrderByAggregateInput: ["id", "ratingValue", "countedPosts", "allPosts", "ratingCount", "mealId", "createdAt", "updatedAt"],
    AggregateRatingSumOrderByAggregateInput: ["ratingValue", "countedPosts", "allPosts", "ratingCount"],
    FloatWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    IntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max", "isSet"],
    EnumMEDIA_TYPEFilter: ["equals", "in", "notIn", "not"],
    PostCountOrderByAggregateInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "mealId", "postLink", "createdAt", "updatedAt"],
    PostAvgOrderByAggregateInput: ["rating"],
    PostMaxOrderByAggregateInput: ["id", "type", "caption", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "mealId", "postLink", "createdAt", "updatedAt"],
    PostMinOrderByAggregateInput: ["id", "type", "caption", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "mealId", "postLink", "createdAt", "updatedAt"],
    PostSumOrderByAggregateInput: ["rating"],
    EnumMEDIA_TYPEWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    PostRelationFilter: ["is", "isNot"],
    CommentCountOrderByAggregateInput: ["id", "text", "postId", "authorId", "createdAt", "updatedAt"],
    CommentMaxOrderByAggregateInput: ["id", "text", "postId", "authorId", "createdAt", "updatedAt"],
    CommentMinOrderByAggregateInput: ["id", "text", "postId", "authorId", "createdAt", "updatedAt"],
    CommentRelationFilter: ["is", "isNot"],
    ReplyCountOrderByAggregateInput: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    ReplyMaxOrderByAggregateInput: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    ReplyMinOrderByAggregateInput: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    EnumREACTION_TYPEFilter: ["equals", "in", "notIn", "not"],
    ReplyRelationFilter: ["is", "isNot"],
    ReactionCountOrderByAggregateInput: ["id", "type", "mealId", "postId", "commentId", "replyId", "authorId", "createdAt", "updatedAt"],
    ReactionMaxOrderByAggregateInput: ["id", "type", "mealId", "postId", "commentId", "replyId", "authorId", "createdAt", "updatedAt"],
    ReactionMinOrderByAggregateInput: ["id", "type", "mealId", "postId", "commentId", "replyId", "authorId", "createdAt", "updatedAt"],
    EnumREACTION_TYPEWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    EnumREQUEST_TYPEFilter: ["equals", "in", "notIn", "not"],
    EnumREQUEST_STATUSFilter: ["equals", "in", "notIn", "not"],
    RequestCountOrderByAggregateInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    RequestMaxOrderByAggregateInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    RequestMinOrderByAggregateInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    EnumREQUEST_TYPEWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    EnumREQUEST_STATUSWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NotificationCountOrderByAggregateInput: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationMaxOrderByAggregateInput: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationMinOrderByAggregateInput: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    MealItemListRelationFilter: ["every", "some", "none"],
    MealAvailabilityListRelationFilter: ["every", "some", "none"],
    AggregateRatingRelationFilter: ["is", "isNot"],
    EnumPUBLISH_STATUSFilter: ["equals", "in", "notIn", "not"],
    FeaturesListRelationFilter: ["every", "some", "none"],
    MealItemOrderByRelationAggregateInput: ["_count"],
    MealAvailabilityOrderByRelationAggregateInput: ["_count"],
    FeaturesOrderByRelationAggregateInput: ["_count"],
    MealCountOrderByAggregateInput: ["id", "tenantId", "productLink", "title", "description", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "itemIds", "photo", "gallery", "publishStatus", "likedByIds", "createdAt", "updatedAt"],
    MealMaxOrderByAggregateInput: ["id", "tenantId", "productLink", "title", "description", "photo", "publishStatus", "createdAt", "updatedAt"],
    MealMinOrderByAggregateInput: ["id", "tenantId", "productLink", "title", "description", "photo", "publishStatus", "createdAt", "updatedAt"],
    EnumPUBLISH_STATUSWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    MealItemOptionListRelationFilter: ["every", "some", "none"],
    OrderLineItemListRelationFilter: ["every", "some", "none"],
    MealItemOptionOrderByRelationAggregateInput: ["_count"],
    OrderLineItemOrderByRelationAggregateInput: ["_count"],
    MealItemCountOrderByAggregateInput: ["id", "mealIds", "title", "shortDescription", "createdAt", "updatedAt"],
    MealItemMaxOrderByAggregateInput: ["id", "title", "shortDescription", "createdAt", "updatedAt"],
    MealItemMinOrderByAggregateInput: ["id", "title", "shortDescription", "createdAt", "updatedAt"],
    FeaturesCountOrderByAggregateInput: ["id", "mealId", "title", "shortDescription", "createdAt", "updatedAt"],
    FeaturesMaxOrderByAggregateInput: ["id", "mealId", "title", "shortDescription", "createdAt", "updatedAt"],
    FeaturesMinOrderByAggregateInput: ["id", "mealId", "title", "shortDescription", "createdAt", "updatedAt"],
    MealItemRelationFilter: ["is", "isNot"],
    MealItemOptionCountOrderByAggregateInput: ["id", "mealItemId", "title", "shortDescription", "createdAt", "updatedAt"],
    MealItemOptionMaxOrderByAggregateInput: ["id", "mealItemId", "title", "shortDescription", "createdAt", "updatedAt"],
    MealItemOptionMinOrderByAggregateInput: ["id", "mealItemId", "title", "shortDescription", "createdAt", "updatedAt"],
    MealAvailabilityCountOrderByAggregateInput: ["id", "mealId", "startDate", "endDate", "createdAt", "updatedAt"],
    MealAvailabilityMaxOrderByAggregateInput: ["id", "mealId", "startDate", "endDate", "createdAt", "updatedAt"],
    MealAvailabilityMinOrderByAggregateInput: ["id", "mealId", "startDate", "endDate", "createdAt", "updatedAt"],
    MealItemOptionRelationFilter: ["is", "isNot"],
    OrderRelationFilter: ["is", "isNot"],
    OrderLineItemCountOrderByAggregateInput: ["id", "details", "comments", "mealItemId", "mealItemOptionId", "bookingId", "createdAt", "updatedAt"],
    OrderLineItemMaxOrderByAggregateInput: ["id", "details", "comments", "mealItemId", "mealItemOptionId", "bookingId", "createdAt", "updatedAt"],
    OrderLineItemMinOrderByAggregateInput: ["id", "details", "comments", "mealItemId", "mealItemOptionId", "bookingId", "createdAt", "updatedAt"],
    EnumORDER_STATUSFilter: ["equals", "in", "notIn", "not"],
    OrderCountOrderByAggregateInput: ["id", "mealId", "status", "patientId", "tenantId", "createdAt", "updatedAt"],
    OrderMaxOrderByAggregateInput: ["id", "mealId", "status", "patientId", "tenantId", "createdAt", "updatedAt"],
    OrderMinOrderByAggregateInput: ["id", "mealId", "status", "patientId", "tenantId", "createdAt", "updatedAt"],
    EnumORDER_STATUSWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    FloatNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "isSet"],
    EnumADDRESS_TYPENullableFilter: ["equals", "in", "notIn", "not", "isSet"],
    LocationCountOrderByAggregateInput: ["id", "description", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "tenantId", "createdAt", "updatedAt"],
    LocationAvgOrderByAggregateInput: ["longitude", "latitude"],
    LocationMaxOrderByAggregateInput: ["id", "description", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "tenantId", "createdAt", "updatedAt"],
    LocationMinOrderByAggregateInput: ["id", "description", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "tenantId", "createdAt", "updatedAt"],
    LocationSumOrderByAggregateInput: ["longitude", "latitude"],
    FloatNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max", "isSet"],
    EnumADDRESS_TYPENullableWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max", "isSet"],
    TenantCreateNestedOneWithoutUsersInput: ["create", "connectOrCreate", "connect"],
    UserCreaterolesInput: ["set"],
    NotificationSettingsCreateNestedOneWithoutUserInput: ["create", "connectOrCreate", "connect"],
    PatientProfileCreateNestedOneWithoutUserInput: ["create", "connectOrCreate", "connect"],
    NotificationCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
    NotificationCreateNestedManyWithoutActorInput: ["create", "connectOrCreate", "createMany", "connect"],
    MealCreateNestedManyWithoutLikedByInput: ["create", "connectOrCreate", "connect"],
    UserCreatemealIdsInput: ["set"],
    RequestCreateNestedManyWithoutReporterInput: ["create", "connectOrCreate", "createMany", "connect"],
    PostCreateNestedManyWithoutAuthorInput: ["create", "connectOrCreate", "createMany", "connect"],
    CommentCreateNestedManyWithoutAuthorInput: ["create", "connectOrCreate", "createMany", "connect"],
    ReplyCreateNestedManyWithoutAuthorInput: ["create", "connectOrCreate", "createMany", "connect"],
    ReactionCreateNestedManyWithoutAuthorInput: ["create", "connectOrCreate", "createMany", "connect"],
    OrderCreateNestedManyWithoutPatientInput: ["create", "connectOrCreate", "createMany", "connect"],
    WardCreateNestedOneWithoutUsersInput: ["create", "connectOrCreate", "connect"],
    TenantUpdateOneWithoutUsersInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    StringFieldUpdateOperationsInput: ["set"],
    NullableStringFieldUpdateOperationsInput: ["set", "unset"],
    UserUpdaterolesInput: ["set", "push"],
    NullableDateTimeFieldUpdateOperationsInput: ["set", "unset"],
    NullableBoolFieldUpdateOperationsInput: ["set", "unset"],
    NotificationSettingsUpdateOneWithoutUserInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    PatientProfileUpdateOneWithoutUserInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    NotificationUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    NotificationUpdateManyWithoutActorInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    MealUpdateManyWithoutLikedByInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    UserUpdatemealIdsInput: ["set", "push"],
    RequestUpdateManyWithoutReporterInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    PostUpdateManyWithoutAuthorInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    CommentUpdateManyWithoutAuthorInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ReplyUpdateManyWithoutAuthorInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ReactionUpdateManyWithoutAuthorInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    OrderUpdateManyWithoutPatientInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    DateTimeFieldUpdateOperationsInput: ["set"],
    WardUpdateOneWithoutUsersInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    PatientProfileCreatedietaryRestrictionsInput: ["set"],
    PatientProfileCreateallowedMealTypesInput: ["set"],
    PatientProfileCreateallowedMealKindsInput: ["set"],
    PatientProfileCreatedoctorSpecificDietsInput: ["set"],
    PatientProfileCreatespecialDietsInput: ["set"],
    UserCreateNestedOneWithoutPatientProfileInput: ["create", "connectOrCreate", "connect"],
    PatientProfileUpdatedietaryRestrictionsInput: ["set", "push"],
    PatientProfileUpdateallowedMealTypesInput: ["set", "push"],
    PatientProfileUpdateallowedMealKindsInput: ["set", "push"],
    PatientProfileUpdatedoctorSpecificDietsInput: ["set", "push"],
    PatientProfileUpdatespecialDietsInput: ["set", "push"],
    UserUpdateOneWithoutPatientProfileInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    UserCreateNestedOneWithoutNotificationSettingsInput: ["create", "connectOrCreate", "connect"],
    BoolFieldUpdateOperationsInput: ["set"],
    UserUpdateOneWithoutNotificationSettingsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    TenantCreateMealImagesInput: ["set"],
    UserCreateNestedManyWithoutTenantInput: ["create", "connectOrCreate", "createMany", "connect"],
    MealCreateNestedManyWithoutTenantInput: ["create", "connectOrCreate", "createMany", "connect"],
    OrderCreateNestedManyWithoutTenantInput: ["create", "connectOrCreate", "createMany", "connect"],
    LocationCreateNestedManyWithoutTenantInput: ["create", "connectOrCreate", "createMany", "connect"],
    TenantCreateacceptedUserEmailDomainsInput: ["set"],
    TenantUpdateMealImagesInput: ["set", "push"],
    UserUpdateManyWithoutTenantInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    MealUpdateManyWithoutTenantInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    OrderUpdateManyWithoutTenantInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    LocationUpdateManyWithoutTenantInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    TenantUpdateacceptedUserEmailDomainsInput: ["set", "push"],
    UserCreateNestedManyWithoutWardInput: ["create", "connectOrCreate", "createMany", "connect"],
    IntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
    UserUpdateManyWithoutWardInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    MealCreateNestedOneWithoutAggregateRatingInput: ["create", "connectOrCreate", "connect"],
    FloatFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
    NullableIntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide", "unset"],
    MealUpdateOneWithoutAggregateRatingInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    PostCreatemediaUrlInput: ["set"],
    UserCreateNestedOneWithoutPostsInput: ["create", "connectOrCreate", "connect"],
    MealCreateNestedOneWithoutPostsInput: ["create", "connectOrCreate", "connect"],
    CommentCreateNestedManyWithoutPostInput: ["create", "connectOrCreate", "createMany", "connect"],
    ReactionCreateNestedManyWithoutPostInput: ["create", "connectOrCreate", "createMany", "connect"],
    EnumMEDIA_TYPEFieldUpdateOperationsInput: ["set"],
    PostUpdatemediaUrlInput: ["set", "push"],
    UserUpdateOneRequiredWithoutPostsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    MealUpdateOneWithoutPostsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    CommentUpdateManyWithoutPostInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ReactionUpdateManyWithoutPostInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    PostCreateNestedOneWithoutCommentsInput: ["create", "connectOrCreate", "connect"],
    UserCreateNestedOneWithoutCommentsInput: ["create", "connectOrCreate", "connect"],
    ReplyCreateNestedManyWithoutCommentInput: ["create", "connectOrCreate", "createMany", "connect"],
    ReactionCreateNestedManyWithoutCommentInput: ["create", "connectOrCreate", "createMany", "connect"],
    PostUpdateOneRequiredWithoutCommentsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    UserUpdateOneRequiredWithoutCommentsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    ReplyUpdateManyWithoutCommentInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ReactionUpdateManyWithoutCommentInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    CommentCreateNestedOneWithoutRepliesInput: ["create", "connectOrCreate", "connect"],
    UserCreateNestedOneWithoutRepliesInput: ["create", "connectOrCreate", "connect"],
    ReactionCreateNestedManyWithoutReplyInput: ["create", "connectOrCreate", "createMany", "connect"],
    CommentUpdateOneRequiredWithoutRepliesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    UserUpdateOneRequiredWithoutRepliesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    ReactionUpdateManyWithoutReplyInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    MealCreateNestedOneWithoutReactionsInput: ["create", "connectOrCreate", "connect"],
    PostCreateNestedOneWithoutReactionsInput: ["create", "connectOrCreate", "connect"],
    CommentCreateNestedOneWithoutReactionsInput: ["create", "connectOrCreate", "connect"],
    ReplyCreateNestedOneWithoutReactionsInput: ["create", "connectOrCreate", "connect"],
    UserCreateNestedOneWithoutReactionsInput: ["create", "connectOrCreate", "connect"],
    EnumREACTION_TYPEFieldUpdateOperationsInput: ["set"],
    MealUpdateOneWithoutReactionsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    PostUpdateOneWithoutReactionsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    CommentUpdateOneWithoutReactionsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    ReplyUpdateOneWithoutReactionsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    UserUpdateOneRequiredWithoutReactionsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    RequestCreatesocialLinksInput: ["set"],
    UserCreateNestedOneWithoutRequestsInput: ["create", "connectOrCreate", "connect"],
    EnumREQUEST_TYPEFieldUpdateOperationsInput: ["set"],
    RequestUpdatesocialLinksInput: ["set", "push"],
    EnumREQUEST_STATUSFieldUpdateOperationsInput: ["set"],
    UserUpdateOneWithoutRequestsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    UserCreateNestedOneWithoutNotificationsInput: ["create", "connectOrCreate", "connect"],
    UserCreateNestedOneWithoutActivityInput: ["create", "connectOrCreate", "connect"],
    UserUpdateOneWithoutNotificationsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    UserUpdateOneWithoutActivityInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    TenantCreateNestedOneWithoutMealsInput: ["create", "connectOrCreate", "connect"],
    MealCreatedietaryRestrictionsInput: ["set"],
    MealCreateallowedMealTypesInput: ["set"],
    MealCreateallowedMealKindsInput: ["set"],
    MealCreatedoctorSpecificDietsInput: ["set"],
    MealCreatespecialDietsInput: ["set"],
    MealItemCreateNestedManyWithoutMealsInput: ["create", "connectOrCreate", "connect"],
    MealCreateitemIdsInput: ["set"],
    MealAvailabilityCreateNestedManyWithoutMealInput: ["create", "connectOrCreate", "createMany", "connect"],
    OrderCreateNestedManyWithoutMealInput: ["create", "connectOrCreate", "createMany", "connect"],
    MealCreategalleryInput: ["set"],
    AggregateRatingCreateNestedOneWithoutMealInput: ["create", "connectOrCreate", "connect"],
    UserCreateNestedManyWithoutLikedMealsInput: ["create", "connectOrCreate", "connect"],
    MealCreatelikedByIdsInput: ["set"],
    PostCreateNestedManyWithoutMealInput: ["create", "connectOrCreate", "createMany", "connect"],
    FeaturesCreateNestedManyWithoutMealInput: ["create", "connectOrCreate", "createMany", "connect"],
    ReactionCreateNestedManyWithoutMealInput: ["create", "connectOrCreate", "createMany", "connect"],
    TenantUpdateOneRequiredWithoutMealsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    MealUpdatedietaryRestrictionsInput: ["set", "push"],
    MealUpdateallowedMealTypesInput: ["set", "push"],
    MealUpdateallowedMealKindsInput: ["set", "push"],
    MealUpdatedoctorSpecificDietsInput: ["set", "push"],
    MealUpdatespecialDietsInput: ["set", "push"],
    MealItemUpdateManyWithoutMealsInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    MealUpdateitemIdsInput: ["set", "push"],
    MealAvailabilityUpdateManyWithoutMealInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    OrderUpdateManyWithoutMealInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    MealUpdategalleryInput: ["set", "push"],
    AggregateRatingUpdateOneWithoutMealInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    EnumPUBLISH_STATUSFieldUpdateOperationsInput: ["set"],
    UserUpdateManyWithoutLikedMealsInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    MealUpdatelikedByIdsInput: ["set", "push"],
    PostUpdateManyWithoutMealInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    FeaturesUpdateManyWithoutMealInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ReactionUpdateManyWithoutMealInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    MealCreateNestedManyWithoutItemsInput: ["create", "connectOrCreate", "connect"],
    MealItemCreatemealIdsInput: ["set"],
    MealItemOptionCreateNestedManyWithoutMealItemInput: ["create", "connectOrCreate", "createMany", "connect"],
    OrderLineItemCreateNestedManyWithoutSelectedMealItemInput: ["create", "connectOrCreate", "createMany", "connect"],
    MealUpdateManyWithoutItemsInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    MealItemUpdatemealIdsInput: ["set", "push"],
    MealItemOptionUpdateManyWithoutMealItemInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    OrderLineItemUpdateManyWithoutSelectedMealItemInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    MealCreateNestedOneWithoutFeaturesInput: ["create", "connectOrCreate", "connect"],
    MealUpdateOneRequiredWithoutFeaturesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    MealItemCreateNestedOneWithoutOptionsInput: ["create", "connectOrCreate", "connect"],
    OrderLineItemCreateNestedManyWithoutSelectedMealItemOptionInput: ["create", "connectOrCreate", "createMany", "connect"],
    MealItemUpdateOneRequiredWithoutOptionsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    OrderLineItemUpdateManyWithoutSelectedMealItemOptionInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    MealCreateNestedOneWithoutAvailabilityInput: ["create", "connectOrCreate", "connect"],
    MealUpdateOneRequiredWithoutAvailabilityInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    MealItemCreateNestedOneWithoutOrderLineItemsInput: ["create", "connectOrCreate", "connect"],
    MealItemOptionCreateNestedOneWithoutOrderLineItemsInput: ["create", "connectOrCreate", "connect"],
    OrderCreateNestedOneWithoutItemsInput: ["create", "connectOrCreate", "connect"],
    MealItemUpdateOneWithoutOrderLineItemsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    MealItemOptionUpdateOneWithoutOrderLineItemsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    OrderUpdateOneRequiredWithoutItemsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    MealCreateNestedOneWithoutOrdersInput: ["create", "connectOrCreate", "connect"],
    UserCreateNestedOneWithoutBookingsInput: ["create", "connectOrCreate", "connect"],
    TenantCreateNestedOneWithoutOrdersInput: ["create", "connectOrCreate", "connect"],
    OrderLineItemCreateNestedManyWithoutBookingInput: ["create", "connectOrCreate", "createMany", "connect"],
    MealUpdateOneRequiredWithoutOrdersInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    EnumORDER_STATUSFieldUpdateOperationsInput: ["set"],
    UserUpdateOneRequiredWithoutBookingsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    TenantUpdateOneRequiredWithoutOrdersInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    OrderLineItemUpdateManyWithoutBookingInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    TenantCreateNestedOneWithoutLocationsInput: ["create", "connectOrCreate", "connect"],
    NullableFloatFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide", "unset"],
    NullableEnumADDRESS_TYPEFieldUpdateOperationsInput: ["set", "unset"],
    TenantUpdateOneWithoutLocationsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    NestedStringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "isSet"],
    NestedStringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    NestedDateTimeNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "isSet"],
    NestedBoolNullableFilter: ["equals", "not", "isSet"],
    NestedDateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedStringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max", "isSet"],
    NestedIntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "isSet"],
    NestedStringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    NestedIntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedDateTimeNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max", "isSet"],
    NestedBoolNullableWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max", "isSet"],
    NestedDateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    NestedBoolFilter: ["equals", "not"],
    NestedBoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
    NestedIntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    NestedFloatFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedFloatWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    NestedIntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max", "isSet"],
    NestedFloatNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "isSet"],
    NestedEnumMEDIA_TYPEFilter: ["equals", "in", "notIn", "not"],
    NestedEnumMEDIA_TYPEWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumREACTION_TYPEFilter: ["equals", "in", "notIn", "not"],
    NestedEnumREACTION_TYPEWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumREQUEST_TYPEFilter: ["equals", "in", "notIn", "not"],
    NestedEnumREQUEST_STATUSFilter: ["equals", "in", "notIn", "not"],
    NestedEnumREQUEST_TYPEWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumREQUEST_STATUSWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumPUBLISH_STATUSFilter: ["equals", "in", "notIn", "not"],
    NestedEnumPUBLISH_STATUSWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumORDER_STATUSFilter: ["equals", "in", "notIn", "not"],
    NestedEnumORDER_STATUSWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumADDRESS_TYPENullableFilter: ["equals", "in", "notIn", "not", "isSet"],
    NestedFloatNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max", "isSet"],
    NestedEnumADDRESS_TYPENullableWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max", "isSet"],
    TenantCreateWithoutUsersInput: ["id", "name", "slug", "description", "logoImage", "avatar", "coverImage", "MealImages", "Meals", "Orders", "Locations", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    TenantCreateOrConnectWithoutUsersInput: ["where", "create"],
    NotificationSettingsCreateWithoutUserInput: ["id", "newMenuItems", "orderUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "createdAt", "updatedAt"],
    NotificationSettingsCreateOrConnectWithoutUserInput: ["where", "create"],
    PatientProfileCreateWithoutUserInput: ["id", "identityNumber", "identityType", "bedNumber", "wardNumber", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "createdAt", "updatedAt"],
    PatientProfileCreateOrConnectWithoutUserInput: ["where", "create"],
    NotificationCreateWithoutUserInput: ["id", "description", "Actor", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationCreateOrConnectWithoutUserInput: ["where", "create"],
    NotificationCreateManyUserInputEnvelope: ["data"],
    NotificationCreateWithoutActorInput: ["id", "description", "User", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationCreateOrConnectWithoutActorInput: ["where", "create"],
    NotificationCreateManyActorInputEnvelope: ["data"],
    MealCreateWithoutLikedByInput: ["id", "Tenant", "productLink", "title", "description", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "Items", "itemIds", "Availability", "Orders", "photo", "gallery", "AggregateRating", "publishStatus", "likedByIds", "Posts", "Features", "Reactions", "createdAt", "updatedAt"],
    MealCreateOrConnectWithoutLikedByInput: ["where", "create"],
    RequestCreateWithoutReporterInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "createdAt", "updatedAt"],
    RequestCreateOrConnectWithoutReporterInput: ["where", "create"],
    RequestCreateManyReporterInputEnvelope: ["data"],
    PostCreateWithoutAuthorInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Meal", "Comments", "Reactions", "postLink", "createdAt", "updatedAt"],
    PostCreateOrConnectWithoutAuthorInput: ["where", "create"],
    PostCreateManyAuthorInputEnvelope: ["data"],
    CommentCreateWithoutAuthorInput: ["id", "text", "Post", "Replies", "Reactions", "createdAt", "updatedAt"],
    CommentCreateOrConnectWithoutAuthorInput: ["where", "create"],
    CommentCreateManyAuthorInputEnvelope: ["data"],
    ReplyCreateWithoutAuthorInput: ["id", "text", "Comment", "Reactions", "createdAt", "updatedAt"],
    ReplyCreateOrConnectWithoutAuthorInput: ["where", "create"],
    ReplyCreateManyAuthorInputEnvelope: ["data"],
    ReactionCreateWithoutAuthorInput: ["id", "type", "Meal", "Post", "Comment", "Reply", "createdAt", "updatedAt"],
    ReactionCreateOrConnectWithoutAuthorInput: ["where", "create"],
    ReactionCreateManyAuthorInputEnvelope: ["data"],
    OrderCreateWithoutPatientInput: ["id", "Meal", "status", "Tenant", "Items", "createdAt", "updatedAt"],
    OrderCreateOrConnectWithoutPatientInput: ["where", "create"],
    OrderCreateManyPatientInputEnvelope: ["data"],
    WardCreateWithoutUsersInput: ["id", "number", "name", "description", "createdAt", "updatedAt"],
    WardCreateOrConnectWithoutUsersInput: ["where", "create"],
    TenantUpsertWithoutUsersInput: ["update", "create"],
    TenantUpdateWithoutUsersInput: ["name", "slug", "description", "logoImage", "avatar", "coverImage", "MealImages", "Meals", "Orders", "Locations", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    NotificationSettingsUpsertWithoutUserInput: ["update", "create"],
    NotificationSettingsUpdateWithoutUserInput: ["newMenuItems", "orderUpdates", "newRequests", "requestUpdates", "commentsOnMyReviews", "repliesToMyReviews", "createdAt", "updatedAt"],
    PatientProfileUpsertWithoutUserInput: ["update", "create"],
    PatientProfileUpdateWithoutUserInput: ["identityNumber", "identityType", "bedNumber", "wardNumber", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "createdAt", "updatedAt"],
    NotificationUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
    NotificationUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
    NotificationUpdateManyWithWhereWithoutUserInput: ["where", "data"],
    NotificationScalarWhereInput: ["AND", "OR", "NOT", "id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationUpsertWithWhereUniqueWithoutActorInput: ["where", "update", "create"],
    NotificationUpdateWithWhereUniqueWithoutActorInput: ["where", "data"],
    NotificationUpdateManyWithWhereWithoutActorInput: ["where", "data"],
    MealUpsertWithWhereUniqueWithoutLikedByInput: ["where", "update", "create"],
    MealUpdateWithWhereUniqueWithoutLikedByInput: ["where", "data"],
    MealUpdateManyWithWhereWithoutLikedByInput: ["where", "data"],
    MealScalarWhereInput: ["AND", "OR", "NOT", "id", "tenantId", "productLink", "title", "description", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "itemIds", "photo", "gallery", "publishStatus", "likedByIds", "createdAt", "updatedAt"],
    RequestUpsertWithWhereUniqueWithoutReporterInput: ["where", "update", "create"],
    RequestUpdateWithWhereUniqueWithoutReporterInput: ["where", "data"],
    RequestUpdateManyWithWhereWithoutReporterInput: ["where", "data"],
    RequestScalarWhereInput: ["AND", "OR", "NOT", "id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    PostUpsertWithWhereUniqueWithoutAuthorInput: ["where", "update", "create"],
    PostUpdateWithWhereUniqueWithoutAuthorInput: ["where", "data"],
    PostUpdateManyWithWhereWithoutAuthorInput: ["where", "data"],
    PostScalarWhereInput: ["AND", "OR", "NOT", "id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "mealId", "postLink", "createdAt", "updatedAt"],
    CommentUpsertWithWhereUniqueWithoutAuthorInput: ["where", "update", "create"],
    CommentUpdateWithWhereUniqueWithoutAuthorInput: ["where", "data"],
    CommentUpdateManyWithWhereWithoutAuthorInput: ["where", "data"],
    CommentScalarWhereInput: ["AND", "OR", "NOT", "id", "text", "postId", "authorId", "createdAt", "updatedAt"],
    ReplyUpsertWithWhereUniqueWithoutAuthorInput: ["where", "update", "create"],
    ReplyUpdateWithWhereUniqueWithoutAuthorInput: ["where", "data"],
    ReplyUpdateManyWithWhereWithoutAuthorInput: ["where", "data"],
    ReplyScalarWhereInput: ["AND", "OR", "NOT", "id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    ReactionUpsertWithWhereUniqueWithoutAuthorInput: ["where", "update", "create"],
    ReactionUpdateWithWhereUniqueWithoutAuthorInput: ["where", "data"],
    ReactionUpdateManyWithWhereWithoutAuthorInput: ["where", "data"],
    ReactionScalarWhereInput: ["AND", "OR", "NOT", "id", "type", "mealId", "postId", "commentId", "replyId", "authorId", "createdAt", "updatedAt"],
    OrderUpsertWithWhereUniqueWithoutPatientInput: ["where", "update", "create"],
    OrderUpdateWithWhereUniqueWithoutPatientInput: ["where", "data"],
    OrderUpdateManyWithWhereWithoutPatientInput: ["where", "data"],
    OrderScalarWhereInput: ["AND", "OR", "NOT", "id", "mealId", "status", "patientId", "tenantId", "createdAt", "updatedAt"],
    WardUpsertWithoutUsersInput: ["update", "create"],
    WardUpdateWithoutUsersInput: ["number", "name", "description", "createdAt", "updatedAt"],
    UserCreateWithoutPatientProfileInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "LikedMeals", "mealIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt", "Ward"],
    UserCreateOrConnectWithoutPatientProfileInput: ["where", "create"],
    UserUpsertWithoutPatientProfileInput: ["update", "create"],
    UserUpdateWithoutPatientProfileInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "LikedMeals", "mealIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt", "Ward"],
    UserCreateWithoutNotificationSettingsInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "PatientProfile", "Notifications", "Activity", "LikedMeals", "mealIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt", "Ward"],
    UserCreateOrConnectWithoutNotificationSettingsInput: ["where", "create"],
    UserUpsertWithoutNotificationSettingsInput: ["update", "create"],
    UserUpdateWithoutNotificationSettingsInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "PatientProfile", "Notifications", "Activity", "LikedMeals", "mealIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt", "Ward"],
    UserCreateWithoutTenantInput: ["uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "PatientProfile", "Notifications", "Activity", "LikedMeals", "mealIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt", "Ward"],
    UserCreateOrConnectWithoutTenantInput: ["where", "create"],
    UserCreateManyTenantInputEnvelope: ["data"],
    MealCreateWithoutTenantInput: ["id", "productLink", "title", "description", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "Items", "itemIds", "Availability", "Orders", "photo", "gallery", "AggregateRating", "publishStatus", "LikedBy", "likedByIds", "Posts", "Features", "Reactions", "createdAt", "updatedAt"],
    MealCreateOrConnectWithoutTenantInput: ["where", "create"],
    MealCreateManyTenantInputEnvelope: ["data"],
    OrderCreateWithoutTenantInput: ["id", "Meal", "status", "Patient", "Items", "createdAt", "updatedAt"],
    OrderCreateOrConnectWithoutTenantInput: ["where", "create"],
    OrderCreateManyTenantInputEnvelope: ["data"],
    LocationCreateWithoutTenantInput: ["id", "description", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "createdAt", "updatedAt"],
    LocationCreateOrConnectWithoutTenantInput: ["where", "create"],
    LocationCreateManyTenantInputEnvelope: ["data"],
    UserUpsertWithWhereUniqueWithoutTenantInput: ["where", "update", "create"],
    UserUpdateWithWhereUniqueWithoutTenantInput: ["where", "data"],
    UserUpdateManyWithWhereWithoutTenantInput: ["where", "data"],
    UserScalarWhereInput: ["AND", "OR", "NOT", "tenantId", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "mealIds", "createdAt", "updatedAt", "wardId"],
    MealUpsertWithWhereUniqueWithoutTenantInput: ["where", "update", "create"],
    MealUpdateWithWhereUniqueWithoutTenantInput: ["where", "data"],
    MealUpdateManyWithWhereWithoutTenantInput: ["where", "data"],
    OrderUpsertWithWhereUniqueWithoutTenantInput: ["where", "update", "create"],
    OrderUpdateWithWhereUniqueWithoutTenantInput: ["where", "data"],
    OrderUpdateManyWithWhereWithoutTenantInput: ["where", "data"],
    LocationUpsertWithWhereUniqueWithoutTenantInput: ["where", "update", "create"],
    LocationUpdateWithWhereUniqueWithoutTenantInput: ["where", "data"],
    LocationUpdateManyWithWhereWithoutTenantInput: ["where", "data"],
    LocationScalarWhereInput: ["AND", "OR", "NOT", "id", "description", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "tenantId", "createdAt", "updatedAt"],
    UserCreateWithoutWardInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "PatientProfile", "Notifications", "Activity", "LikedMeals", "mealIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutWardInput: ["where", "create"],
    UserCreateManyWardInputEnvelope: ["data"],
    UserUpsertWithWhereUniqueWithoutWardInput: ["where", "update", "create"],
    UserUpdateWithWhereUniqueWithoutWardInput: ["where", "data"],
    UserUpdateManyWithWhereWithoutWardInput: ["where", "data"],
    MealCreateWithoutAggregateRatingInput: ["id", "Tenant", "productLink", "title", "description", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "Items", "itemIds", "Availability", "Orders", "photo", "gallery", "publishStatus", "LikedBy", "likedByIds", "Posts", "Features", "Reactions", "createdAt", "updatedAt"],
    MealCreateOrConnectWithoutAggregateRatingInput: ["where", "create"],
    MealUpsertWithoutAggregateRatingInput: ["update", "create"],
    MealUpdateWithoutAggregateRatingInput: ["Tenant", "productLink", "title", "description", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "Items", "itemIds", "Availability", "Orders", "photo", "gallery", "publishStatus", "LikedBy", "likedByIds", "Posts", "Features", "Reactions", "createdAt", "updatedAt"],
    UserCreateWithoutPostsInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "PatientProfile", "Notifications", "Activity", "LikedMeals", "mealIds", "Requests", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt", "Ward"],
    UserCreateOrConnectWithoutPostsInput: ["where", "create"],
    MealCreateWithoutPostsInput: ["id", "Tenant", "productLink", "title", "description", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "Items", "itemIds", "Availability", "Orders", "photo", "gallery", "AggregateRating", "publishStatus", "LikedBy", "likedByIds", "Features", "Reactions", "createdAt", "updatedAt"],
    MealCreateOrConnectWithoutPostsInput: ["where", "create"],
    CommentCreateWithoutPostInput: ["id", "text", "Author", "Replies", "Reactions", "createdAt", "updatedAt"],
    CommentCreateOrConnectWithoutPostInput: ["where", "create"],
    CommentCreateManyPostInputEnvelope: ["data"],
    ReactionCreateWithoutPostInput: ["id", "type", "Meal", "Comment", "Reply", "Author", "createdAt", "updatedAt"],
    ReactionCreateOrConnectWithoutPostInput: ["where", "create"],
    ReactionCreateManyPostInputEnvelope: ["data"],
    UserUpsertWithoutPostsInput: ["update", "create"],
    UserUpdateWithoutPostsInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "PatientProfile", "Notifications", "Activity", "LikedMeals", "mealIds", "Requests", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt", "Ward"],
    MealUpsertWithoutPostsInput: ["update", "create"],
    MealUpdateWithoutPostsInput: ["Tenant", "productLink", "title", "description", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "Items", "itemIds", "Availability", "Orders", "photo", "gallery", "AggregateRating", "publishStatus", "LikedBy", "likedByIds", "Features", "Reactions", "createdAt", "updatedAt"],
    CommentUpsertWithWhereUniqueWithoutPostInput: ["where", "update", "create"],
    CommentUpdateWithWhereUniqueWithoutPostInput: ["where", "data"],
    CommentUpdateManyWithWhereWithoutPostInput: ["where", "data"],
    ReactionUpsertWithWhereUniqueWithoutPostInput: ["where", "update", "create"],
    ReactionUpdateWithWhereUniqueWithoutPostInput: ["where", "data"],
    ReactionUpdateManyWithWhereWithoutPostInput: ["where", "data"],
    PostCreateWithoutCommentsInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "Meal", "Reactions", "postLink", "createdAt", "updatedAt"],
    PostCreateOrConnectWithoutCommentsInput: ["where", "create"],
    UserCreateWithoutCommentsInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "PatientProfile", "Notifications", "Activity", "LikedMeals", "mealIds", "Requests", "Posts", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt", "Ward"],
    UserCreateOrConnectWithoutCommentsInput: ["where", "create"],
    ReplyCreateWithoutCommentInput: ["id", "text", "Author", "Reactions", "createdAt", "updatedAt"],
    ReplyCreateOrConnectWithoutCommentInput: ["where", "create"],
    ReplyCreateManyCommentInputEnvelope: ["data"],
    ReactionCreateWithoutCommentInput: ["id", "type", "Meal", "Post", "Reply", "Author", "createdAt", "updatedAt"],
    ReactionCreateOrConnectWithoutCommentInput: ["where", "create"],
    ReactionCreateManyCommentInputEnvelope: ["data"],
    PostUpsertWithoutCommentsInput: ["update", "create"],
    PostUpdateWithoutCommentsInput: ["type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "Meal", "Reactions", "postLink", "createdAt", "updatedAt"],
    UserUpsertWithoutCommentsInput: ["update", "create"],
    UserUpdateWithoutCommentsInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "PatientProfile", "Notifications", "Activity", "LikedMeals", "mealIds", "Requests", "Posts", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt", "Ward"],
    ReplyUpsertWithWhereUniqueWithoutCommentInput: ["where", "update", "create"],
    ReplyUpdateWithWhereUniqueWithoutCommentInput: ["where", "data"],
    ReplyUpdateManyWithWhereWithoutCommentInput: ["where", "data"],
    ReactionUpsertWithWhereUniqueWithoutCommentInput: ["where", "update", "create"],
    ReactionUpdateWithWhereUniqueWithoutCommentInput: ["where", "data"],
    ReactionUpdateManyWithWhereWithoutCommentInput: ["where", "data"],
    CommentCreateWithoutRepliesInput: ["id", "text", "Post", "Author", "Reactions", "createdAt", "updatedAt"],
    CommentCreateOrConnectWithoutRepliesInput: ["where", "create"],
    UserCreateWithoutRepliesInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "PatientProfile", "Notifications", "Activity", "LikedMeals", "mealIds", "Requests", "Posts", "Comments", "Reactions", "Bookings", "createdAt", "updatedAt", "Ward"],
    UserCreateOrConnectWithoutRepliesInput: ["where", "create"],
    ReactionCreateWithoutReplyInput: ["id", "type", "Meal", "Post", "Comment", "Author", "createdAt", "updatedAt"],
    ReactionCreateOrConnectWithoutReplyInput: ["where", "create"],
    ReactionCreateManyReplyInputEnvelope: ["data"],
    CommentUpsertWithoutRepliesInput: ["update", "create"],
    CommentUpdateWithoutRepliesInput: ["text", "Post", "Author", "Reactions", "createdAt", "updatedAt"],
    UserUpsertWithoutRepliesInput: ["update", "create"],
    UserUpdateWithoutRepliesInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "PatientProfile", "Notifications", "Activity", "LikedMeals", "mealIds", "Requests", "Posts", "Comments", "Reactions", "Bookings", "createdAt", "updatedAt", "Ward"],
    ReactionUpsertWithWhereUniqueWithoutReplyInput: ["where", "update", "create"],
    ReactionUpdateWithWhereUniqueWithoutReplyInput: ["where", "data"],
    ReactionUpdateManyWithWhereWithoutReplyInput: ["where", "data"],
    MealCreateWithoutReactionsInput: ["id", "Tenant", "productLink", "title", "description", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "Items", "itemIds", "Availability", "Orders", "photo", "gallery", "AggregateRating", "publishStatus", "LikedBy", "likedByIds", "Posts", "Features", "createdAt", "updatedAt"],
    MealCreateOrConnectWithoutReactionsInput: ["where", "create"],
    PostCreateWithoutReactionsInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "Meal", "Comments", "postLink", "createdAt", "updatedAt"],
    PostCreateOrConnectWithoutReactionsInput: ["where", "create"],
    CommentCreateWithoutReactionsInput: ["id", "text", "Post", "Author", "Replies", "createdAt", "updatedAt"],
    CommentCreateOrConnectWithoutReactionsInput: ["where", "create"],
    ReplyCreateWithoutReactionsInput: ["id", "text", "Comment", "Author", "createdAt", "updatedAt"],
    ReplyCreateOrConnectWithoutReactionsInput: ["where", "create"],
    UserCreateWithoutReactionsInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "PatientProfile", "Notifications", "Activity", "LikedMeals", "mealIds", "Requests", "Posts", "Comments", "Replies", "Bookings", "createdAt", "updatedAt", "Ward"],
    UserCreateOrConnectWithoutReactionsInput: ["where", "create"],
    MealUpsertWithoutReactionsInput: ["update", "create"],
    MealUpdateWithoutReactionsInput: ["Tenant", "productLink", "title", "description", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "Items", "itemIds", "Availability", "Orders", "photo", "gallery", "AggregateRating", "publishStatus", "LikedBy", "likedByIds", "Posts", "Features", "createdAt", "updatedAt"],
    PostUpsertWithoutReactionsInput: ["update", "create"],
    PostUpdateWithoutReactionsInput: ["type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "Meal", "Comments", "postLink", "createdAt", "updatedAt"],
    CommentUpsertWithoutReactionsInput: ["update", "create"],
    CommentUpdateWithoutReactionsInput: ["text", "Post", "Author", "Replies", "createdAt", "updatedAt"],
    ReplyUpsertWithoutReactionsInput: ["update", "create"],
    ReplyUpdateWithoutReactionsInput: ["text", "Comment", "Author", "createdAt", "updatedAt"],
    UserUpsertWithoutReactionsInput: ["update", "create"],
    UserUpdateWithoutReactionsInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "PatientProfile", "Notifications", "Activity", "LikedMeals", "mealIds", "Requests", "Posts", "Comments", "Replies", "Bookings", "createdAt", "updatedAt", "Ward"],
    UserCreateWithoutRequestsInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "PatientProfile", "Notifications", "Activity", "LikedMeals", "mealIds", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt", "Ward"],
    UserCreateOrConnectWithoutRequestsInput: ["where", "create"],
    UserUpsertWithoutRequestsInput: ["update", "create"],
    UserUpdateWithoutRequestsInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "PatientProfile", "Notifications", "Activity", "LikedMeals", "mealIds", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt", "Ward"],
    UserCreateWithoutNotificationsInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "PatientProfile", "Activity", "LikedMeals", "mealIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt", "Ward"],
    UserCreateOrConnectWithoutNotificationsInput: ["where", "create"],
    UserCreateWithoutActivityInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "PatientProfile", "Notifications", "LikedMeals", "mealIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt", "Ward"],
    UserCreateOrConnectWithoutActivityInput: ["where", "create"],
    UserUpsertWithoutNotificationsInput: ["update", "create"],
    UserUpdateWithoutNotificationsInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "PatientProfile", "Activity", "LikedMeals", "mealIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt", "Ward"],
    UserUpsertWithoutActivityInput: ["update", "create"],
    UserUpdateWithoutActivityInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "PatientProfile", "Notifications", "LikedMeals", "mealIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt", "Ward"],
    TenantCreateWithoutMealsInput: ["id", "name", "slug", "description", "logoImage", "avatar", "coverImage", "MealImages", "Users", "Orders", "Locations", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    TenantCreateOrConnectWithoutMealsInput: ["where", "create"],
    MealItemCreateWithoutMealsInput: ["id", "mealIds", "title", "shortDescription", "Options", "OrderLineItems", "createdAt", "updatedAt"],
    MealItemCreateOrConnectWithoutMealsInput: ["where", "create"],
    MealAvailabilityCreateWithoutMealInput: ["id", "startDate", "endDate", "createdAt", "updatedAt"],
    MealAvailabilityCreateOrConnectWithoutMealInput: ["where", "create"],
    MealAvailabilityCreateManyMealInputEnvelope: ["data"],
    OrderCreateWithoutMealInput: ["id", "status", "Patient", "Tenant", "Items", "createdAt", "updatedAt"],
    OrderCreateOrConnectWithoutMealInput: ["where", "create"],
    OrderCreateManyMealInputEnvelope: ["data"],
    AggregateRatingCreateWithoutMealInput: ["id", "ratingValue", "countedPosts", "allPosts", "ratingCount", "createdAt", "updatedAt"],
    AggregateRatingCreateOrConnectWithoutMealInput: ["where", "create"],
    UserCreateWithoutLikedMealsInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "PatientProfile", "Notifications", "Activity", "mealIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt", "Ward"],
    UserCreateOrConnectWithoutLikedMealsInput: ["where", "create"],
    PostCreateWithoutMealInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "Comments", "Reactions", "postLink", "createdAt", "updatedAt"],
    PostCreateOrConnectWithoutMealInput: ["where", "create"],
    PostCreateManyMealInputEnvelope: ["data"],
    FeaturesCreateWithoutMealInput: ["id", "title", "shortDescription", "createdAt", "updatedAt"],
    FeaturesCreateOrConnectWithoutMealInput: ["where", "create"],
    FeaturesCreateManyMealInputEnvelope: ["data"],
    ReactionCreateWithoutMealInput: ["id", "type", "Post", "Comment", "Reply", "Author", "createdAt", "updatedAt"],
    ReactionCreateOrConnectWithoutMealInput: ["where", "create"],
    ReactionCreateManyMealInputEnvelope: ["data"],
    TenantUpsertWithoutMealsInput: ["update", "create"],
    TenantUpdateWithoutMealsInput: ["name", "slug", "description", "logoImage", "avatar", "coverImage", "MealImages", "Users", "Orders", "Locations", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    MealItemUpsertWithWhereUniqueWithoutMealsInput: ["where", "update", "create"],
    MealItemUpdateWithWhereUniqueWithoutMealsInput: ["where", "data"],
    MealItemUpdateManyWithWhereWithoutMealsInput: ["where", "data"],
    MealItemScalarWhereInput: ["AND", "OR", "NOT", "id", "mealIds", "title", "shortDescription", "createdAt", "updatedAt"],
    MealAvailabilityUpsertWithWhereUniqueWithoutMealInput: ["where", "update", "create"],
    MealAvailabilityUpdateWithWhereUniqueWithoutMealInput: ["where", "data"],
    MealAvailabilityUpdateManyWithWhereWithoutMealInput: ["where", "data"],
    MealAvailabilityScalarWhereInput: ["AND", "OR", "NOT", "id", "mealId", "startDate", "endDate", "createdAt", "updatedAt"],
    OrderUpsertWithWhereUniqueWithoutMealInput: ["where", "update", "create"],
    OrderUpdateWithWhereUniqueWithoutMealInput: ["where", "data"],
    OrderUpdateManyWithWhereWithoutMealInput: ["where", "data"],
    AggregateRatingUpsertWithoutMealInput: ["update", "create"],
    AggregateRatingUpdateWithoutMealInput: ["ratingValue", "countedPosts", "allPosts", "ratingCount", "createdAt", "updatedAt"],
    UserUpsertWithWhereUniqueWithoutLikedMealsInput: ["where", "update", "create"],
    UserUpdateWithWhereUniqueWithoutLikedMealsInput: ["where", "data"],
    UserUpdateManyWithWhereWithoutLikedMealsInput: ["where", "data"],
    PostUpsertWithWhereUniqueWithoutMealInput: ["where", "update", "create"],
    PostUpdateWithWhereUniqueWithoutMealInput: ["where", "data"],
    PostUpdateManyWithWhereWithoutMealInput: ["where", "data"],
    FeaturesUpsertWithWhereUniqueWithoutMealInput: ["where", "update", "create"],
    FeaturesUpdateWithWhereUniqueWithoutMealInput: ["where", "data"],
    FeaturesUpdateManyWithWhereWithoutMealInput: ["where", "data"],
    FeaturesScalarWhereInput: ["AND", "OR", "NOT", "id", "mealId", "title", "shortDescription", "createdAt", "updatedAt"],
    ReactionUpsertWithWhereUniqueWithoutMealInput: ["where", "update", "create"],
    ReactionUpdateWithWhereUniqueWithoutMealInput: ["where", "data"],
    ReactionUpdateManyWithWhereWithoutMealInput: ["where", "data"],
    MealCreateWithoutItemsInput: ["id", "Tenant", "productLink", "title", "description", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "itemIds", "Availability", "Orders", "photo", "gallery", "AggregateRating", "publishStatus", "LikedBy", "likedByIds", "Posts", "Features", "Reactions", "createdAt", "updatedAt"],
    MealCreateOrConnectWithoutItemsInput: ["where", "create"],
    MealItemOptionCreateWithoutMealItemInput: ["id", "title", "shortDescription", "OrderLineItems", "createdAt", "updatedAt"],
    MealItemOptionCreateOrConnectWithoutMealItemInput: ["where", "create"],
    MealItemOptionCreateManyMealItemInputEnvelope: ["data"],
    OrderLineItemCreateWithoutSelectedMealItemInput: ["id", "details", "comments", "selectedMealItemOption", "Booking", "createdAt", "updatedAt"],
    OrderLineItemCreateOrConnectWithoutSelectedMealItemInput: ["where", "create"],
    OrderLineItemCreateManySelectedMealItemInputEnvelope: ["data"],
    MealUpsertWithWhereUniqueWithoutItemsInput: ["where", "update", "create"],
    MealUpdateWithWhereUniqueWithoutItemsInput: ["where", "data"],
    MealUpdateManyWithWhereWithoutItemsInput: ["where", "data"],
    MealItemOptionUpsertWithWhereUniqueWithoutMealItemInput: ["where", "update", "create"],
    MealItemOptionUpdateWithWhereUniqueWithoutMealItemInput: ["where", "data"],
    MealItemOptionUpdateManyWithWhereWithoutMealItemInput: ["where", "data"],
    MealItemOptionScalarWhereInput: ["AND", "OR", "NOT", "id", "mealItemId", "title", "shortDescription", "createdAt", "updatedAt"],
    OrderLineItemUpsertWithWhereUniqueWithoutSelectedMealItemInput: ["where", "update", "create"],
    OrderLineItemUpdateWithWhereUniqueWithoutSelectedMealItemInput: ["where", "data"],
    OrderLineItemUpdateManyWithWhereWithoutSelectedMealItemInput: ["where", "data"],
    OrderLineItemScalarWhereInput: ["AND", "OR", "NOT", "id", "details", "comments", "mealItemId", "mealItemOptionId", "bookingId", "createdAt", "updatedAt"],
    MealCreateWithoutFeaturesInput: ["id", "Tenant", "productLink", "title", "description", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "Items", "itemIds", "Availability", "Orders", "photo", "gallery", "AggregateRating", "publishStatus", "LikedBy", "likedByIds", "Posts", "Reactions", "createdAt", "updatedAt"],
    MealCreateOrConnectWithoutFeaturesInput: ["where", "create"],
    MealUpsertWithoutFeaturesInput: ["update", "create"],
    MealUpdateWithoutFeaturesInput: ["Tenant", "productLink", "title", "description", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "Items", "itemIds", "Availability", "Orders", "photo", "gallery", "AggregateRating", "publishStatus", "LikedBy", "likedByIds", "Posts", "Reactions", "createdAt", "updatedAt"],
    MealItemCreateWithoutOptionsInput: ["id", "Meals", "mealIds", "title", "shortDescription", "OrderLineItems", "createdAt", "updatedAt"],
    MealItemCreateOrConnectWithoutOptionsInput: ["where", "create"],
    OrderLineItemCreateWithoutSelectedMealItemOptionInput: ["id", "details", "comments", "selectedMealItem", "Booking", "createdAt", "updatedAt"],
    OrderLineItemCreateOrConnectWithoutSelectedMealItemOptionInput: ["where", "create"],
    OrderLineItemCreateManySelectedMealItemOptionInputEnvelope: ["data"],
    MealItemUpsertWithoutOptionsInput: ["update", "create"],
    MealItemUpdateWithoutOptionsInput: ["Meals", "mealIds", "title", "shortDescription", "OrderLineItems", "createdAt", "updatedAt"],
    OrderLineItemUpsertWithWhereUniqueWithoutSelectedMealItemOptionInput: ["where", "update", "create"],
    OrderLineItemUpdateWithWhereUniqueWithoutSelectedMealItemOptionInput: ["where", "data"],
    OrderLineItemUpdateManyWithWhereWithoutSelectedMealItemOptionInput: ["where", "data"],
    MealCreateWithoutAvailabilityInput: ["id", "Tenant", "productLink", "title", "description", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "Items", "itemIds", "Orders", "photo", "gallery", "AggregateRating", "publishStatus", "LikedBy", "likedByIds", "Posts", "Features", "Reactions", "createdAt", "updatedAt"],
    MealCreateOrConnectWithoutAvailabilityInput: ["where", "create"],
    MealUpsertWithoutAvailabilityInput: ["update", "create"],
    MealUpdateWithoutAvailabilityInput: ["Tenant", "productLink", "title", "description", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "Items", "itemIds", "Orders", "photo", "gallery", "AggregateRating", "publishStatus", "LikedBy", "likedByIds", "Posts", "Features", "Reactions", "createdAt", "updatedAt"],
    MealItemCreateWithoutOrderLineItemsInput: ["id", "Meals", "mealIds", "title", "shortDescription", "Options", "createdAt", "updatedAt"],
    MealItemCreateOrConnectWithoutOrderLineItemsInput: ["where", "create"],
    MealItemOptionCreateWithoutOrderLineItemsInput: ["id", "MealItem", "title", "shortDescription", "createdAt", "updatedAt"],
    MealItemOptionCreateOrConnectWithoutOrderLineItemsInput: ["where", "create"],
    OrderCreateWithoutItemsInput: ["id", "Meal", "status", "Patient", "Tenant", "createdAt", "updatedAt"],
    OrderCreateOrConnectWithoutItemsInput: ["where", "create"],
    MealItemUpsertWithoutOrderLineItemsInput: ["update", "create"],
    MealItemUpdateWithoutOrderLineItemsInput: ["Meals", "mealIds", "title", "shortDescription", "Options", "createdAt", "updatedAt"],
    MealItemOptionUpsertWithoutOrderLineItemsInput: ["update", "create"],
    MealItemOptionUpdateWithoutOrderLineItemsInput: ["MealItem", "title", "shortDescription", "createdAt", "updatedAt"],
    OrderUpsertWithoutItemsInput: ["update", "create"],
    OrderUpdateWithoutItemsInput: ["Meal", "status", "Patient", "Tenant", "createdAt", "updatedAt"],
    MealCreateWithoutOrdersInput: ["id", "Tenant", "productLink", "title", "description", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "Items", "itemIds", "Availability", "photo", "gallery", "AggregateRating", "publishStatus", "LikedBy", "likedByIds", "Posts", "Features", "Reactions", "createdAt", "updatedAt"],
    MealCreateOrConnectWithoutOrdersInput: ["where", "create"],
    UserCreateWithoutBookingsInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "PatientProfile", "Notifications", "Activity", "LikedMeals", "mealIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "createdAt", "updatedAt", "Ward"],
    UserCreateOrConnectWithoutBookingsInput: ["where", "create"],
    TenantCreateWithoutOrdersInput: ["id", "name", "slug", "description", "logoImage", "avatar", "coverImage", "MealImages", "Users", "Meals", "Locations", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    TenantCreateOrConnectWithoutOrdersInput: ["where", "create"],
    OrderLineItemCreateWithoutBookingInput: ["id", "details", "comments", "selectedMealItem", "selectedMealItemOption", "createdAt", "updatedAt"],
    OrderLineItemCreateOrConnectWithoutBookingInput: ["where", "create"],
    OrderLineItemCreateManyBookingInputEnvelope: ["data"],
    MealUpsertWithoutOrdersInput: ["update", "create"],
    MealUpdateWithoutOrdersInput: ["Tenant", "productLink", "title", "description", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "Items", "itemIds", "Availability", "photo", "gallery", "AggregateRating", "publishStatus", "LikedBy", "likedByIds", "Posts", "Features", "Reactions", "createdAt", "updatedAt"],
    UserUpsertWithoutBookingsInput: ["update", "create"],
    UserUpdateWithoutBookingsInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "PatientProfile", "Notifications", "Activity", "LikedMeals", "mealIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "createdAt", "updatedAt", "Ward"],
    TenantUpsertWithoutOrdersInput: ["update", "create"],
    TenantUpdateWithoutOrdersInput: ["name", "slug", "description", "logoImage", "avatar", "coverImage", "MealImages", "Users", "Meals", "Locations", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    OrderLineItemUpsertWithWhereUniqueWithoutBookingInput: ["where", "update", "create"],
    OrderLineItemUpdateWithWhereUniqueWithoutBookingInput: ["where", "data"],
    OrderLineItemUpdateManyWithWhereWithoutBookingInput: ["where", "data"],
    TenantCreateWithoutLocationsInput: ["id", "name", "slug", "description", "logoImage", "avatar", "coverImage", "MealImages", "Users", "Meals", "Orders", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    TenantCreateOrConnectWithoutLocationsInput: ["where", "create"],
    TenantUpsertWithoutLocationsInput: ["update", "create"],
    TenantUpdateWithoutLocationsInput: ["name", "slug", "description", "logoImage", "avatar", "coverImage", "MealImages", "Users", "Meals", "Orders", "acceptedUserEmailDomains", "createdAt", "updatedAt"],
    NotificationCreateManyUserInput: ["id", "description", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationCreateManyActorInput: ["id", "description", "userId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    RequestCreateManyReporterInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "createdAt", "updatedAt"],
    PostCreateManyAuthorInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "mealId", "postLink", "createdAt", "updatedAt"],
    CommentCreateManyAuthorInput: ["id", "text", "postId", "createdAt", "updatedAt"],
    ReplyCreateManyAuthorInput: ["id", "text", "commentId", "createdAt", "updatedAt"],
    ReactionCreateManyAuthorInput: ["id", "type", "mealId", "postId", "commentId", "replyId", "createdAt", "updatedAt"],
    OrderCreateManyPatientInput: ["id", "mealId", "status", "tenantId", "createdAt", "updatedAt"],
    NotificationUpdateWithoutUserInput: ["description", "Actor", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationUpdateWithoutActorInput: ["description", "User", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    MealUpdateWithoutLikedByInput: ["Tenant", "productLink", "title", "description", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "Items", "itemIds", "Availability", "Orders", "photo", "gallery", "AggregateRating", "publishStatus", "likedByIds", "Posts", "Features", "Reactions", "createdAt", "updatedAt"],
    RequestUpdateWithoutReporterInput: ["reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "createdAt", "updatedAt"],
    PostUpdateWithoutAuthorInput: ["type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Meal", "Comments", "Reactions", "postLink", "createdAt", "updatedAt"],
    CommentUpdateWithoutAuthorInput: ["text", "Post", "Replies", "Reactions", "createdAt", "updatedAt"],
    ReplyUpdateWithoutAuthorInput: ["text", "Comment", "Reactions", "createdAt", "updatedAt"],
    ReactionUpdateWithoutAuthorInput: ["type", "Meal", "Post", "Comment", "Reply", "createdAt", "updatedAt"],
    OrderUpdateWithoutPatientInput: ["Meal", "status", "Tenant", "Items", "createdAt", "updatedAt"],
    UserCreateManyTenantInput: ["uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "mealIds", "createdAt", "updatedAt", "wardId"],
    MealCreateManyTenantInput: ["id", "productLink", "title", "description", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "itemIds", "photo", "gallery", "publishStatus", "likedByIds", "createdAt", "updatedAt"],
    OrderCreateManyTenantInput: ["id", "mealId", "status", "patientId", "createdAt", "updatedAt"],
    LocationCreateManyTenantInput: ["id", "description", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "createdAt", "updatedAt"],
    UserUpdateWithoutTenantInput: ["uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "PatientProfile", "Notifications", "Activity", "LikedMeals", "mealIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt", "Ward"],
    MealUpdateWithoutTenantInput: ["productLink", "title", "description", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "Items", "itemIds", "Availability", "Orders", "photo", "gallery", "AggregateRating", "publishStatus", "LikedBy", "likedByIds", "Posts", "Features", "Reactions", "createdAt", "updatedAt"],
    OrderUpdateWithoutTenantInput: ["Meal", "status", "Patient", "Items", "createdAt", "updatedAt"],
    LocationUpdateWithoutTenantInput: ["description", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "createdAt", "updatedAt"],
    UserCreateManyWardInput: ["tenantId", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "mealIds", "createdAt", "updatedAt"],
    UserUpdateWithoutWardInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "PatientProfile", "Notifications", "Activity", "LikedMeals", "mealIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt"],
    CommentCreateManyPostInput: ["id", "text", "authorId", "createdAt", "updatedAt"],
    ReactionCreateManyPostInput: ["id", "type", "mealId", "commentId", "replyId", "authorId", "createdAt", "updatedAt"],
    CommentUpdateWithoutPostInput: ["text", "Author", "Replies", "Reactions", "createdAt", "updatedAt"],
    ReactionUpdateWithoutPostInput: ["type", "Meal", "Comment", "Reply", "Author", "createdAt", "updatedAt"],
    ReplyCreateManyCommentInput: ["id", "text", "authorId", "createdAt", "updatedAt"],
    ReactionCreateManyCommentInput: ["id", "type", "mealId", "postId", "replyId", "authorId", "createdAt", "updatedAt"],
    ReplyUpdateWithoutCommentInput: ["text", "Author", "Reactions", "createdAt", "updatedAt"],
    ReactionUpdateWithoutCommentInput: ["type", "Meal", "Post", "Reply", "Author", "createdAt", "updatedAt"],
    ReactionCreateManyReplyInput: ["id", "type", "mealId", "postId", "commentId", "authorId", "createdAt", "updatedAt"],
    ReactionUpdateWithoutReplyInput: ["type", "Meal", "Post", "Comment", "Author", "createdAt", "updatedAt"],
    MealAvailabilityCreateManyMealInput: ["id", "startDate", "endDate", "createdAt", "updatedAt"],
    OrderCreateManyMealInput: ["id", "status", "patientId", "tenantId", "createdAt", "updatedAt"],
    PostCreateManyMealInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "postLink", "createdAt", "updatedAt"],
    FeaturesCreateManyMealInput: ["id", "title", "shortDescription", "createdAt", "updatedAt"],
    ReactionCreateManyMealInput: ["id", "type", "postId", "commentId", "replyId", "authorId", "createdAt", "updatedAt"],
    MealItemUpdateWithoutMealsInput: ["mealIds", "title", "shortDescription", "Options", "OrderLineItems", "createdAt", "updatedAt"],
    MealAvailabilityUpdateWithoutMealInput: ["startDate", "endDate", "createdAt", "updatedAt"],
    OrderUpdateWithoutMealInput: ["status", "Patient", "Tenant", "Items", "createdAt", "updatedAt"],
    UserUpdateWithoutLikedMealsInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "PatientProfile", "Notifications", "Activity", "mealIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt", "Ward"],
    PostUpdateWithoutMealInput: ["type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "Comments", "Reactions", "postLink", "createdAt", "updatedAt"],
    FeaturesUpdateWithoutMealInput: ["title", "shortDescription", "createdAt", "updatedAt"],
    ReactionUpdateWithoutMealInput: ["type", "Post", "Comment", "Reply", "Author", "createdAt", "updatedAt"],
    MealItemOptionCreateManyMealItemInput: ["id", "title", "shortDescription", "createdAt", "updatedAt"],
    OrderLineItemCreateManySelectedMealItemInput: ["id", "details", "comments", "mealItemOptionId", "bookingId", "createdAt", "updatedAt"],
    MealUpdateWithoutItemsInput: ["Tenant", "productLink", "title", "description", "dietaryRestrictions", "allowedMealTypes", "allowedMealKinds", "doctorSpecificDiets", "specialDiets", "itemIds", "Availability", "Orders", "photo", "gallery", "AggregateRating", "publishStatus", "LikedBy", "likedByIds", "Posts", "Features", "Reactions", "createdAt", "updatedAt"],
    MealItemOptionUpdateWithoutMealItemInput: ["title", "shortDescription", "OrderLineItems", "createdAt", "updatedAt"],
    OrderLineItemUpdateWithoutSelectedMealItemInput: ["details", "comments", "selectedMealItemOption", "Booking", "createdAt", "updatedAt"],
    OrderLineItemCreateManySelectedMealItemOptionInput: ["id", "details", "comments", "mealItemId", "bookingId", "createdAt", "updatedAt"],
    OrderLineItemUpdateWithoutSelectedMealItemOptionInput: ["details", "comments", "selectedMealItem", "Booking", "createdAt", "updatedAt"],
    OrderLineItemCreateManyBookingInput: ["id", "details", "comments", "mealItemId", "mealItemOptionId", "createdAt", "updatedAt"],
    OrderLineItemUpdateWithoutBookingInput: ["details", "comments", "selectedMealItem", "selectedMealItemOption", "createdAt", "updatedAt"]
};
function applyInputTypesEnhanceMap(inputTypesEnhanceMap) {
    for (const inputTypeEnhanceMapKey of Object.keys(inputTypesEnhanceMap)) {
        const inputTypeName = inputTypeEnhanceMapKey;
        const typeConfig = inputTypesEnhanceMap[inputTypeName];
        const typeClass = inputTypes[inputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, inputsInfo[inputTypeName]);
    }
}
exports.applyInputTypesEnhanceMap = applyInputTypesEnhanceMap;
