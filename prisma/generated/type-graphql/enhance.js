"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyInputTypesEnhanceMap = exports.applyOutputTypesEnhanceMap = exports.applyModelsEnhanceMap = exports.applyRelationResolversEnhanceMap = exports.applyArgsTypesEnhanceMap = exports.applyResolversEnhanceMap = void 0;
const tslib_1 = require("tslib");
const tslib = tslib_1.__importStar(require("tslib"));
const crudResolvers = tslib_1.__importStar(require("./resolvers/crud/resolvers-crud.index"));
const argsTypes = tslib_1.__importStar(require("./resolvers/crud/args.index"));
const actionResolvers = tslib_1.__importStar(require("./resolvers/crud/resolvers-actions.index"));
const relationResolvers = tslib_1.__importStar(require("./resolvers/relations/resolvers.index"));
const models = tslib_1.__importStar(require("./models"));
const outputTypes = tslib_1.__importStar(require("./resolvers/outputs"));
const inputTypes = tslib_1.__importStar(require("./resolvers/inputs"));
const crudResolversMap = {
    User: crudResolvers.UserCrudResolver,
    NotificationSettings: crudResolvers.NotificationSettingsCrudResolver,
    Tenant: crudResolvers.TenantCrudResolver,
    AggregateRating: crudResolvers.AggregateRatingCrudResolver,
    Post: crudResolvers.PostCrudResolver,
    Comment: crudResolvers.CommentCrudResolver,
    Reply: crudResolvers.ReplyCrudResolver,
    Reaction: crudResolvers.ReactionCrudResolver,
    Request: crudResolvers.RequestCrudResolver,
    Notification: crudResolvers.NotificationCrudResolver,
    Experience: crudResolvers.ExperienceCrudResolver,
    ExperienceAvailability: crudResolvers.ExperienceAvailabilityCrudResolver,
    Currency: crudResolvers.CurrencyCrudResolver,
    Price: crudResolvers.PriceCrudResolver,
    TopicLists: crudResolvers.TopicListsCrudResolver,
    BookingOrderLineItem: crudResolvers.BookingOrderLineItemCrudResolver,
    BookingOrder: crudResolvers.BookingOrderCrudResolver,
    Location: crudResolvers.LocationCrudResolver
};
const actionResolversMap = {
    User: {
        user: actionResolvers.FindUniqueUserResolver,
        findFirstUser: actionResolvers.FindFirstUserResolver,
        users: actionResolvers.FindManyUserResolver,
        createUser: actionResolvers.CreateUserResolver,
        createManyUser: actionResolvers.CreateManyUserResolver,
        deleteUser: actionResolvers.DeleteUserResolver,
        updateUser: actionResolvers.UpdateUserResolver,
        deleteManyUser: actionResolvers.DeleteManyUserResolver,
        updateManyUser: actionResolvers.UpdateManyUserResolver,
        upsertUser: actionResolvers.UpsertUserResolver,
        aggregateUser: actionResolvers.AggregateUserResolver,
        groupByUser: actionResolvers.GroupByUserResolver
    },
    NotificationSettings: {
        findUniqueNotificationSettings: actionResolvers.FindUniqueNotificationSettingsResolver,
        findFirstNotificationSettings: actionResolvers.FindFirstNotificationSettingsResolver,
        findManyNotificationSettings: actionResolvers.FindManyNotificationSettingsResolver,
        createNotificationSettings: actionResolvers.CreateNotificationSettingsResolver,
        createManyNotificationSettings: actionResolvers.CreateManyNotificationSettingsResolver,
        deleteNotificationSettings: actionResolvers.DeleteNotificationSettingsResolver,
        updateNotificationSettings: actionResolvers.UpdateNotificationSettingsResolver,
        deleteManyNotificationSettings: actionResolvers.DeleteManyNotificationSettingsResolver,
        updateManyNotificationSettings: actionResolvers.UpdateManyNotificationSettingsResolver,
        upsertNotificationSettings: actionResolvers.UpsertNotificationSettingsResolver,
        aggregateNotificationSettings: actionResolvers.AggregateNotificationSettingsResolver,
        groupByNotificationSettings: actionResolvers.GroupByNotificationSettingsResolver
    },
    Tenant: {
        tenant: actionResolvers.FindUniqueTenantResolver,
        findFirstTenant: actionResolvers.FindFirstTenantResolver,
        tenants: actionResolvers.FindManyTenantResolver,
        createTenant: actionResolvers.CreateTenantResolver,
        createManyTenant: actionResolvers.CreateManyTenantResolver,
        deleteTenant: actionResolvers.DeleteTenantResolver,
        updateTenant: actionResolvers.UpdateTenantResolver,
        deleteManyTenant: actionResolvers.DeleteManyTenantResolver,
        updateManyTenant: actionResolvers.UpdateManyTenantResolver,
        upsertTenant: actionResolvers.UpsertTenantResolver,
        aggregateTenant: actionResolvers.AggregateTenantResolver,
        groupByTenant: actionResolvers.GroupByTenantResolver
    },
    AggregateRating: {
        aggregateRating: actionResolvers.FindUniqueAggregateRatingResolver,
        findFirstAggregateRating: actionResolvers.FindFirstAggregateRatingResolver,
        aggregateRatings: actionResolvers.FindManyAggregateRatingResolver,
        createAggregateRating: actionResolvers.CreateAggregateRatingResolver,
        createManyAggregateRating: actionResolvers.CreateManyAggregateRatingResolver,
        deleteAggregateRating: actionResolvers.DeleteAggregateRatingResolver,
        updateAggregateRating: actionResolvers.UpdateAggregateRatingResolver,
        deleteManyAggregateRating: actionResolvers.DeleteManyAggregateRatingResolver,
        updateManyAggregateRating: actionResolvers.UpdateManyAggregateRatingResolver,
        upsertAggregateRating: actionResolvers.UpsertAggregateRatingResolver,
        aggregateAggregateRating: actionResolvers.AggregateAggregateRatingResolver,
        groupByAggregateRating: actionResolvers.GroupByAggregateRatingResolver
    },
    Post: {
        post: actionResolvers.FindUniquePostResolver,
        findFirstPost: actionResolvers.FindFirstPostResolver,
        posts: actionResolvers.FindManyPostResolver,
        createPost: actionResolvers.CreatePostResolver,
        createManyPost: actionResolvers.CreateManyPostResolver,
        deletePost: actionResolvers.DeletePostResolver,
        updatePost: actionResolvers.UpdatePostResolver,
        deleteManyPost: actionResolvers.DeleteManyPostResolver,
        updateManyPost: actionResolvers.UpdateManyPostResolver,
        upsertPost: actionResolvers.UpsertPostResolver,
        aggregatePost: actionResolvers.AggregatePostResolver,
        groupByPost: actionResolvers.GroupByPostResolver
    },
    Comment: {
        comment: actionResolvers.FindUniqueCommentResolver,
        findFirstComment: actionResolvers.FindFirstCommentResolver,
        comments: actionResolvers.FindManyCommentResolver,
        createComment: actionResolvers.CreateCommentResolver,
        createManyComment: actionResolvers.CreateManyCommentResolver,
        deleteComment: actionResolvers.DeleteCommentResolver,
        updateComment: actionResolvers.UpdateCommentResolver,
        deleteManyComment: actionResolvers.DeleteManyCommentResolver,
        updateManyComment: actionResolvers.UpdateManyCommentResolver,
        upsertComment: actionResolvers.UpsertCommentResolver,
        aggregateComment: actionResolvers.AggregateCommentResolver,
        groupByComment: actionResolvers.GroupByCommentResolver
    },
    Reply: {
        reply: actionResolvers.FindUniqueReplyResolver,
        findFirstReply: actionResolvers.FindFirstReplyResolver,
        replies: actionResolvers.FindManyReplyResolver,
        createReply: actionResolvers.CreateReplyResolver,
        createManyReply: actionResolvers.CreateManyReplyResolver,
        deleteReply: actionResolvers.DeleteReplyResolver,
        updateReply: actionResolvers.UpdateReplyResolver,
        deleteManyReply: actionResolvers.DeleteManyReplyResolver,
        updateManyReply: actionResolvers.UpdateManyReplyResolver,
        upsertReply: actionResolvers.UpsertReplyResolver,
        aggregateReply: actionResolvers.AggregateReplyResolver,
        groupByReply: actionResolvers.GroupByReplyResolver
    },
    Reaction: {
        reaction: actionResolvers.FindUniqueReactionResolver,
        findFirstReaction: actionResolvers.FindFirstReactionResolver,
        reactions: actionResolvers.FindManyReactionResolver,
        createReaction: actionResolvers.CreateReactionResolver,
        createManyReaction: actionResolvers.CreateManyReactionResolver,
        deleteReaction: actionResolvers.DeleteReactionResolver,
        updateReaction: actionResolvers.UpdateReactionResolver,
        deleteManyReaction: actionResolvers.DeleteManyReactionResolver,
        updateManyReaction: actionResolvers.UpdateManyReactionResolver,
        upsertReaction: actionResolvers.UpsertReactionResolver,
        aggregateReaction: actionResolvers.AggregateReactionResolver,
        groupByReaction: actionResolvers.GroupByReactionResolver
    },
    Request: {
        request: actionResolvers.FindUniqueRequestResolver,
        findFirstRequest: actionResolvers.FindFirstRequestResolver,
        requests: actionResolvers.FindManyRequestResolver,
        createRequest: actionResolvers.CreateRequestResolver,
        createManyRequest: actionResolvers.CreateManyRequestResolver,
        deleteRequest: actionResolvers.DeleteRequestResolver,
        updateRequest: actionResolvers.UpdateRequestResolver,
        deleteManyRequest: actionResolvers.DeleteManyRequestResolver,
        updateManyRequest: actionResolvers.UpdateManyRequestResolver,
        upsertRequest: actionResolvers.UpsertRequestResolver,
        aggregateRequest: actionResolvers.AggregateRequestResolver,
        groupByRequest: actionResolvers.GroupByRequestResolver
    },
    Notification: {
        notification: actionResolvers.FindUniqueNotificationResolver,
        findFirstNotification: actionResolvers.FindFirstNotificationResolver,
        notifications: actionResolvers.FindManyNotificationResolver,
        createNotification: actionResolvers.CreateNotificationResolver,
        createManyNotification: actionResolvers.CreateManyNotificationResolver,
        deleteNotification: actionResolvers.DeleteNotificationResolver,
        updateNotification: actionResolvers.UpdateNotificationResolver,
        deleteManyNotification: actionResolvers.DeleteManyNotificationResolver,
        updateManyNotification: actionResolvers.UpdateManyNotificationResolver,
        upsertNotification: actionResolvers.UpsertNotificationResolver,
        aggregateNotification: actionResolvers.AggregateNotificationResolver,
        groupByNotification: actionResolvers.GroupByNotificationResolver
    },
    Experience: {
        experience: actionResolvers.FindUniqueExperienceResolver,
        findFirstExperience: actionResolvers.FindFirstExperienceResolver,
        experiences: actionResolvers.FindManyExperienceResolver,
        createExperience: actionResolvers.CreateExperienceResolver,
        createManyExperience: actionResolvers.CreateManyExperienceResolver,
        deleteExperience: actionResolvers.DeleteExperienceResolver,
        updateExperience: actionResolvers.UpdateExperienceResolver,
        deleteManyExperience: actionResolvers.DeleteManyExperienceResolver,
        updateManyExperience: actionResolvers.UpdateManyExperienceResolver,
        upsertExperience: actionResolvers.UpsertExperienceResolver,
        aggregateExperience: actionResolvers.AggregateExperienceResolver,
        groupByExperience: actionResolvers.GroupByExperienceResolver
    },
    ExperienceAvailability: {
        experienceAvailability: actionResolvers.FindUniqueExperienceAvailabilityResolver,
        findFirstExperienceAvailability: actionResolvers.FindFirstExperienceAvailabilityResolver,
        experienceAvailabilities: actionResolvers.FindManyExperienceAvailabilityResolver,
        createExperienceAvailability: actionResolvers.CreateExperienceAvailabilityResolver,
        createManyExperienceAvailability: actionResolvers.CreateManyExperienceAvailabilityResolver,
        deleteExperienceAvailability: actionResolvers.DeleteExperienceAvailabilityResolver,
        updateExperienceAvailability: actionResolvers.UpdateExperienceAvailabilityResolver,
        deleteManyExperienceAvailability: actionResolvers.DeleteManyExperienceAvailabilityResolver,
        updateManyExperienceAvailability: actionResolvers.UpdateManyExperienceAvailabilityResolver,
        upsertExperienceAvailability: actionResolvers.UpsertExperienceAvailabilityResolver,
        aggregateExperienceAvailability: actionResolvers.AggregateExperienceAvailabilityResolver,
        groupByExperienceAvailability: actionResolvers.GroupByExperienceAvailabilityResolver
    },
    Currency: {
        currency: actionResolvers.FindUniqueCurrencyResolver,
        findFirstCurrency: actionResolvers.FindFirstCurrencyResolver,
        currencies: actionResolvers.FindManyCurrencyResolver,
        createCurrency: actionResolvers.CreateCurrencyResolver,
        createManyCurrency: actionResolvers.CreateManyCurrencyResolver,
        deleteCurrency: actionResolvers.DeleteCurrencyResolver,
        updateCurrency: actionResolvers.UpdateCurrencyResolver,
        deleteManyCurrency: actionResolvers.DeleteManyCurrencyResolver,
        updateManyCurrency: actionResolvers.UpdateManyCurrencyResolver,
        upsertCurrency: actionResolvers.UpsertCurrencyResolver,
        aggregateCurrency: actionResolvers.AggregateCurrencyResolver,
        groupByCurrency: actionResolvers.GroupByCurrencyResolver
    },
    Price: {
        price: actionResolvers.FindUniquePriceResolver,
        findFirstPrice: actionResolvers.FindFirstPriceResolver,
        prices: actionResolvers.FindManyPriceResolver,
        createPrice: actionResolvers.CreatePriceResolver,
        createManyPrice: actionResolvers.CreateManyPriceResolver,
        deletePrice: actionResolvers.DeletePriceResolver,
        updatePrice: actionResolvers.UpdatePriceResolver,
        deleteManyPrice: actionResolvers.DeleteManyPriceResolver,
        updateManyPrice: actionResolvers.UpdateManyPriceResolver,
        upsertPrice: actionResolvers.UpsertPriceResolver,
        aggregatePrice: actionResolvers.AggregatePriceResolver,
        groupByPrice: actionResolvers.GroupByPriceResolver
    },
    TopicLists: {
        findUniqueTopicLists: actionResolvers.FindUniqueTopicListsResolver,
        findFirstTopicLists: actionResolvers.FindFirstTopicListsResolver,
        findManyTopicLists: actionResolvers.FindManyTopicListsResolver,
        createTopicLists: actionResolvers.CreateTopicListsResolver,
        createManyTopicLists: actionResolvers.CreateManyTopicListsResolver,
        deleteTopicLists: actionResolvers.DeleteTopicListsResolver,
        updateTopicLists: actionResolvers.UpdateTopicListsResolver,
        deleteManyTopicLists: actionResolvers.DeleteManyTopicListsResolver,
        updateManyTopicLists: actionResolvers.UpdateManyTopicListsResolver,
        upsertTopicLists: actionResolvers.UpsertTopicListsResolver,
        aggregateTopicLists: actionResolvers.AggregateTopicListsResolver,
        groupByTopicLists: actionResolvers.GroupByTopicListsResolver
    },
    BookingOrderLineItem: {
        bookingOrderLineItem: actionResolvers.FindUniqueBookingOrderLineItemResolver,
        findFirstBookingOrderLineItem: actionResolvers.FindFirstBookingOrderLineItemResolver,
        bookingOrderLineItems: actionResolvers.FindManyBookingOrderLineItemResolver,
        createBookingOrderLineItem: actionResolvers.CreateBookingOrderLineItemResolver,
        createManyBookingOrderLineItem: actionResolvers.CreateManyBookingOrderLineItemResolver,
        deleteBookingOrderLineItem: actionResolvers.DeleteBookingOrderLineItemResolver,
        updateBookingOrderLineItem: actionResolvers.UpdateBookingOrderLineItemResolver,
        deleteManyBookingOrderLineItem: actionResolvers.DeleteManyBookingOrderLineItemResolver,
        updateManyBookingOrderLineItem: actionResolvers.UpdateManyBookingOrderLineItemResolver,
        upsertBookingOrderLineItem: actionResolvers.UpsertBookingOrderLineItemResolver,
        aggregateBookingOrderLineItem: actionResolvers.AggregateBookingOrderLineItemResolver,
        groupByBookingOrderLineItem: actionResolvers.GroupByBookingOrderLineItemResolver
    },
    BookingOrder: {
        bookingOrder: actionResolvers.FindUniqueBookingOrderResolver,
        findFirstBookingOrder: actionResolvers.FindFirstBookingOrderResolver,
        bookingOrders: actionResolvers.FindManyBookingOrderResolver,
        createBookingOrder: actionResolvers.CreateBookingOrderResolver,
        createManyBookingOrder: actionResolvers.CreateManyBookingOrderResolver,
        deleteBookingOrder: actionResolvers.DeleteBookingOrderResolver,
        updateBookingOrder: actionResolvers.UpdateBookingOrderResolver,
        deleteManyBookingOrder: actionResolvers.DeleteManyBookingOrderResolver,
        updateManyBookingOrder: actionResolvers.UpdateManyBookingOrderResolver,
        upsertBookingOrder: actionResolvers.UpsertBookingOrderResolver,
        aggregateBookingOrder: actionResolvers.AggregateBookingOrderResolver,
        groupByBookingOrder: actionResolvers.GroupByBookingOrderResolver
    },
    Location: {
        location: actionResolvers.FindUniqueLocationResolver,
        findFirstLocation: actionResolvers.FindFirstLocationResolver,
        locations: actionResolvers.FindManyLocationResolver,
        createLocation: actionResolvers.CreateLocationResolver,
        createManyLocation: actionResolvers.CreateManyLocationResolver,
        deleteLocation: actionResolvers.DeleteLocationResolver,
        updateLocation: actionResolvers.UpdateLocationResolver,
        deleteManyLocation: actionResolvers.DeleteManyLocationResolver,
        updateManyLocation: actionResolvers.UpdateManyLocationResolver,
        upsertLocation: actionResolvers.UpsertLocationResolver,
        aggregateLocation: actionResolvers.AggregateLocationResolver,
        groupByLocation: actionResolvers.GroupByLocationResolver
    }
};
const crudResolversInfo = {
    User: ["user", "findFirstUser", "users", "createUser", "createManyUser", "deleteUser", "updateUser", "deleteManyUser", "updateManyUser", "upsertUser", "aggregateUser", "groupByUser"],
    NotificationSettings: ["findUniqueNotificationSettings", "findFirstNotificationSettings", "findManyNotificationSettings", "createNotificationSettings", "createManyNotificationSettings", "deleteNotificationSettings", "updateNotificationSettings", "deleteManyNotificationSettings", "updateManyNotificationSettings", "upsertNotificationSettings", "aggregateNotificationSettings", "groupByNotificationSettings"],
    Tenant: ["tenant", "findFirstTenant", "tenants", "createTenant", "createManyTenant", "deleteTenant", "updateTenant", "deleteManyTenant", "updateManyTenant", "upsertTenant", "aggregateTenant", "groupByTenant"],
    AggregateRating: ["aggregateRating", "findFirstAggregateRating", "aggregateRatings", "createAggregateRating", "createManyAggregateRating", "deleteAggregateRating", "updateAggregateRating", "deleteManyAggregateRating", "updateManyAggregateRating", "upsertAggregateRating", "aggregateAggregateRating", "groupByAggregateRating"],
    Post: ["post", "findFirstPost", "posts", "createPost", "createManyPost", "deletePost", "updatePost", "deleteManyPost", "updateManyPost", "upsertPost", "aggregatePost", "groupByPost"],
    Comment: ["comment", "findFirstComment", "comments", "createComment", "createManyComment", "deleteComment", "updateComment", "deleteManyComment", "updateManyComment", "upsertComment", "aggregateComment", "groupByComment"],
    Reply: ["reply", "findFirstReply", "replies", "createReply", "createManyReply", "deleteReply", "updateReply", "deleteManyReply", "updateManyReply", "upsertReply", "aggregateReply", "groupByReply"],
    Reaction: ["reaction", "findFirstReaction", "reactions", "createReaction", "createManyReaction", "deleteReaction", "updateReaction", "deleteManyReaction", "updateManyReaction", "upsertReaction", "aggregateReaction", "groupByReaction"],
    Request: ["request", "findFirstRequest", "requests", "createRequest", "createManyRequest", "deleteRequest", "updateRequest", "deleteManyRequest", "updateManyRequest", "upsertRequest", "aggregateRequest", "groupByRequest"],
    Notification: ["notification", "findFirstNotification", "notifications", "createNotification", "createManyNotification", "deleteNotification", "updateNotification", "deleteManyNotification", "updateManyNotification", "upsertNotification", "aggregateNotification", "groupByNotification"],
    Experience: ["experience", "findFirstExperience", "experiences", "createExperience", "createManyExperience", "deleteExperience", "updateExperience", "deleteManyExperience", "updateManyExperience", "upsertExperience", "aggregateExperience", "groupByExperience"],
    ExperienceAvailability: ["experienceAvailability", "findFirstExperienceAvailability", "experienceAvailabilities", "createExperienceAvailability", "createManyExperienceAvailability", "deleteExperienceAvailability", "updateExperienceAvailability", "deleteManyExperienceAvailability", "updateManyExperienceAvailability", "upsertExperienceAvailability", "aggregateExperienceAvailability", "groupByExperienceAvailability"],
    Currency: ["currency", "findFirstCurrency", "currencies", "createCurrency", "createManyCurrency", "deleteCurrency", "updateCurrency", "deleteManyCurrency", "updateManyCurrency", "upsertCurrency", "aggregateCurrency", "groupByCurrency"],
    Price: ["price", "findFirstPrice", "prices", "createPrice", "createManyPrice", "deletePrice", "updatePrice", "deleteManyPrice", "updateManyPrice", "upsertPrice", "aggregatePrice", "groupByPrice"],
    TopicLists: ["findUniqueTopicLists", "findFirstTopicLists", "findManyTopicLists", "createTopicLists", "createManyTopicLists", "deleteTopicLists", "updateTopicLists", "deleteManyTopicLists", "updateManyTopicLists", "upsertTopicLists", "aggregateTopicLists", "groupByTopicLists"],
    BookingOrderLineItem: ["bookingOrderLineItem", "findFirstBookingOrderLineItem", "bookingOrderLineItems", "createBookingOrderLineItem", "createManyBookingOrderLineItem", "deleteBookingOrderLineItem", "updateBookingOrderLineItem", "deleteManyBookingOrderLineItem", "updateManyBookingOrderLineItem", "upsertBookingOrderLineItem", "aggregateBookingOrderLineItem", "groupByBookingOrderLineItem"],
    BookingOrder: ["bookingOrder", "findFirstBookingOrder", "bookingOrders", "createBookingOrder", "createManyBookingOrder", "deleteBookingOrder", "updateBookingOrder", "deleteManyBookingOrder", "updateManyBookingOrder", "upsertBookingOrder", "aggregateBookingOrder", "groupByBookingOrder"],
    Location: ["location", "findFirstLocation", "locations", "createLocation", "createManyLocation", "deleteLocation", "updateLocation", "deleteManyLocation", "updateManyLocation", "upsertLocation", "aggregateLocation", "groupByLocation"]
};
const argsInfo = {
    FindUniqueUserArgs: ["where"],
    FindFirstUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateUserArgs: ["data"],
    CreateManyUserArgs: ["data"],
    DeleteUserArgs: ["where"],
    UpdateUserArgs: ["data", "where"],
    DeleteManyUserArgs: ["where"],
    UpdateManyUserArgs: ["data", "where"],
    UpsertUserArgs: ["where", "create", "update"],
    AggregateUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueNotificationSettingsArgs: ["where"],
    FindFirstNotificationSettingsArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyNotificationSettingsArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateNotificationSettingsArgs: ["data"],
    CreateManyNotificationSettingsArgs: ["data"],
    DeleteNotificationSettingsArgs: ["where"],
    UpdateNotificationSettingsArgs: ["data", "where"],
    DeleteManyNotificationSettingsArgs: ["where"],
    UpdateManyNotificationSettingsArgs: ["data", "where"],
    UpsertNotificationSettingsArgs: ["where", "create", "update"],
    AggregateNotificationSettingsArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByNotificationSettingsArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueTenantArgs: ["where"],
    FindFirstTenantArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyTenantArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateTenantArgs: ["data"],
    CreateManyTenantArgs: ["data"],
    DeleteTenantArgs: ["where"],
    UpdateTenantArgs: ["data", "where"],
    DeleteManyTenantArgs: ["where"],
    UpdateManyTenantArgs: ["data", "where"],
    UpsertTenantArgs: ["where", "create", "update"],
    AggregateTenantArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByTenantArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueAggregateRatingArgs: ["where"],
    FindFirstAggregateRatingArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyAggregateRatingArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateAggregateRatingArgs: ["data"],
    CreateManyAggregateRatingArgs: ["data"],
    DeleteAggregateRatingArgs: ["where"],
    UpdateAggregateRatingArgs: ["data", "where"],
    DeleteManyAggregateRatingArgs: ["where"],
    UpdateManyAggregateRatingArgs: ["data", "where"],
    UpsertAggregateRatingArgs: ["where", "create", "update"],
    AggregateAggregateRatingArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByAggregateRatingArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniquePostArgs: ["where"],
    FindFirstPostArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyPostArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreatePostArgs: ["data"],
    CreateManyPostArgs: ["data"],
    DeletePostArgs: ["where"],
    UpdatePostArgs: ["data", "where"],
    DeleteManyPostArgs: ["where"],
    UpdateManyPostArgs: ["data", "where"],
    UpsertPostArgs: ["where", "create", "update"],
    AggregatePostArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByPostArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueCommentArgs: ["where"],
    FindFirstCommentArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyCommentArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateCommentArgs: ["data"],
    CreateManyCommentArgs: ["data"],
    DeleteCommentArgs: ["where"],
    UpdateCommentArgs: ["data", "where"],
    DeleteManyCommentArgs: ["where"],
    UpdateManyCommentArgs: ["data", "where"],
    UpsertCommentArgs: ["where", "create", "update"],
    AggregateCommentArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByCommentArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueReplyArgs: ["where"],
    FindFirstReplyArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyReplyArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateReplyArgs: ["data"],
    CreateManyReplyArgs: ["data"],
    DeleteReplyArgs: ["where"],
    UpdateReplyArgs: ["data", "where"],
    DeleteManyReplyArgs: ["where"],
    UpdateManyReplyArgs: ["data", "where"],
    UpsertReplyArgs: ["where", "create", "update"],
    AggregateReplyArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByReplyArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueReactionArgs: ["where"],
    FindFirstReactionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyReactionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateReactionArgs: ["data"],
    CreateManyReactionArgs: ["data"],
    DeleteReactionArgs: ["where"],
    UpdateReactionArgs: ["data", "where"],
    DeleteManyReactionArgs: ["where"],
    UpdateManyReactionArgs: ["data", "where"],
    UpsertReactionArgs: ["where", "create", "update"],
    AggregateReactionArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByReactionArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueRequestArgs: ["where"],
    FindFirstRequestArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyRequestArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateRequestArgs: ["data"],
    CreateManyRequestArgs: ["data"],
    DeleteRequestArgs: ["where"],
    UpdateRequestArgs: ["data", "where"],
    DeleteManyRequestArgs: ["where"],
    UpdateManyRequestArgs: ["data", "where"],
    UpsertRequestArgs: ["where", "create", "update"],
    AggregateRequestArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByRequestArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueNotificationArgs: ["where"],
    FindFirstNotificationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyNotificationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateNotificationArgs: ["data"],
    CreateManyNotificationArgs: ["data"],
    DeleteNotificationArgs: ["where"],
    UpdateNotificationArgs: ["data", "where"],
    DeleteManyNotificationArgs: ["where"],
    UpdateManyNotificationArgs: ["data", "where"],
    UpsertNotificationArgs: ["where", "create", "update"],
    AggregateNotificationArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByNotificationArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueExperienceArgs: ["where"],
    FindFirstExperienceArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyExperienceArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateExperienceArgs: ["data"],
    CreateManyExperienceArgs: ["data"],
    DeleteExperienceArgs: ["where"],
    UpdateExperienceArgs: ["data", "where"],
    DeleteManyExperienceArgs: ["where"],
    UpdateManyExperienceArgs: ["data", "where"],
    UpsertExperienceArgs: ["where", "create", "update"],
    AggregateExperienceArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByExperienceArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueExperienceAvailabilityArgs: ["where"],
    FindFirstExperienceAvailabilityArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyExperienceAvailabilityArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateExperienceAvailabilityArgs: ["data"],
    CreateManyExperienceAvailabilityArgs: ["data"],
    DeleteExperienceAvailabilityArgs: ["where"],
    UpdateExperienceAvailabilityArgs: ["data", "where"],
    DeleteManyExperienceAvailabilityArgs: ["where"],
    UpdateManyExperienceAvailabilityArgs: ["data", "where"],
    UpsertExperienceAvailabilityArgs: ["where", "create", "update"],
    AggregateExperienceAvailabilityArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByExperienceAvailabilityArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueCurrencyArgs: ["where"],
    FindFirstCurrencyArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyCurrencyArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateCurrencyArgs: ["data"],
    CreateManyCurrencyArgs: ["data"],
    DeleteCurrencyArgs: ["where"],
    UpdateCurrencyArgs: ["data", "where"],
    DeleteManyCurrencyArgs: ["where"],
    UpdateManyCurrencyArgs: ["data", "where"],
    UpsertCurrencyArgs: ["where", "create", "update"],
    AggregateCurrencyArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByCurrencyArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniquePriceArgs: ["where"],
    FindFirstPriceArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyPriceArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreatePriceArgs: ["data"],
    CreateManyPriceArgs: ["data"],
    DeletePriceArgs: ["where"],
    UpdatePriceArgs: ["data", "where"],
    DeleteManyPriceArgs: ["where"],
    UpdateManyPriceArgs: ["data", "where"],
    UpsertPriceArgs: ["where", "create", "update"],
    AggregatePriceArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByPriceArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueTopicListsArgs: ["where"],
    FindFirstTopicListsArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyTopicListsArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateTopicListsArgs: ["data"],
    CreateManyTopicListsArgs: ["data"],
    DeleteTopicListsArgs: ["where"],
    UpdateTopicListsArgs: ["data", "where"],
    DeleteManyTopicListsArgs: ["where"],
    UpdateManyTopicListsArgs: ["data", "where"],
    UpsertTopicListsArgs: ["where", "create", "update"],
    AggregateTopicListsArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByTopicListsArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueBookingOrderLineItemArgs: ["where"],
    FindFirstBookingOrderLineItemArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyBookingOrderLineItemArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateBookingOrderLineItemArgs: ["data"],
    CreateManyBookingOrderLineItemArgs: ["data"],
    DeleteBookingOrderLineItemArgs: ["where"],
    UpdateBookingOrderLineItemArgs: ["data", "where"],
    DeleteManyBookingOrderLineItemArgs: ["where"],
    UpdateManyBookingOrderLineItemArgs: ["data", "where"],
    UpsertBookingOrderLineItemArgs: ["where", "create", "update"],
    AggregateBookingOrderLineItemArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByBookingOrderLineItemArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueBookingOrderArgs: ["where"],
    FindFirstBookingOrderArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyBookingOrderArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateBookingOrderArgs: ["data"],
    CreateManyBookingOrderArgs: ["data"],
    DeleteBookingOrderArgs: ["where"],
    UpdateBookingOrderArgs: ["data", "where"],
    DeleteManyBookingOrderArgs: ["where"],
    UpdateManyBookingOrderArgs: ["data", "where"],
    UpsertBookingOrderArgs: ["where", "create", "update"],
    AggregateBookingOrderArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByBookingOrderArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueLocationArgs: ["where"],
    FindFirstLocationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyLocationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateLocationArgs: ["data"],
    CreateManyLocationArgs: ["data"],
    DeleteLocationArgs: ["where"],
    UpdateLocationArgs: ["data", "where"],
    DeleteManyLocationArgs: ["where"],
    UpdateManyLocationArgs: ["data", "where"],
    UpsertLocationArgs: ["where", "create", "update"],
    AggregateLocationArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByLocationArgs: ["where", "orderBy", "by", "having", "take", "skip"]
};
function applyResolversEnhanceMap(resolversEnhanceMap) {
    for (const resolversEnhanceMapKey of Object.keys(resolversEnhanceMap)) {
        const modelName = resolversEnhanceMapKey;
        const crudTarget = crudResolversMap[modelName].prototype;
        const resolverActionsConfig = resolversEnhanceMap[modelName];
        const actionResolversConfig = actionResolversMap[modelName];
        if (resolverActionsConfig._all) {
            const allActionsDecorators = resolverActionsConfig._all;
            const resolverActionNames = crudResolversInfo[modelName];
            for (const resolverActionName of resolverActionNames) {
                const actionTarget = actionResolversConfig[resolverActionName].prototype;
                tslib.__decorate(allActionsDecorators, crudTarget, resolverActionName, null);
                tslib.__decorate(allActionsDecorators, actionTarget, resolverActionName, null);
            }
        }
        const resolverActionsToApply = Object.keys(resolverActionsConfig).filter(it => it !== "_all");
        for (const resolverActionName of resolverActionsToApply) {
            const decorators = resolverActionsConfig[resolverActionName];
            const actionTarget = actionResolversConfig[resolverActionName].prototype;
            tslib.__decorate(decorators, crudTarget, resolverActionName, null);
            tslib.__decorate(decorators, actionTarget, resolverActionName, null);
        }
    }
}
exports.applyResolversEnhanceMap = applyResolversEnhanceMap;
function applyArgsTypesEnhanceMap(argsTypesEnhanceMap) {
    for (const argsTypesEnhanceMapKey of Object.keys(argsTypesEnhanceMap)) {
        const argsTypeName = argsTypesEnhanceMapKey;
        const typeConfig = argsTypesEnhanceMap[argsTypeName];
        const typeClass = argsTypes[argsTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, argsInfo[argsTypeName]);
    }
}
exports.applyArgsTypesEnhanceMap = applyArgsTypesEnhanceMap;
const relationResolversMap = {
    User: relationResolvers.UserRelationsResolver,
    NotificationSettings: relationResolvers.NotificationSettingsRelationsResolver,
    Tenant: relationResolvers.TenantRelationsResolver,
    AggregateRating: relationResolvers.AggregateRatingRelationsResolver,
    Post: relationResolvers.PostRelationsResolver,
    Comment: relationResolvers.CommentRelationsResolver,
    Reply: relationResolvers.ReplyRelationsResolver,
    Reaction: relationResolvers.ReactionRelationsResolver,
    Request: relationResolvers.RequestRelationsResolver,
    Notification: relationResolvers.NotificationRelationsResolver,
    Experience: relationResolvers.ExperienceRelationsResolver,
    ExperienceAvailability: relationResolvers.ExperienceAvailabilityRelationsResolver,
    Currency: relationResolvers.CurrencyRelationsResolver,
    Price: relationResolvers.PriceRelationsResolver,
    BookingOrderLineItem: relationResolvers.BookingOrderLineItemRelationsResolver,
    BookingOrder: relationResolvers.BookingOrderRelationsResolver,
    Location: relationResolvers.LocationRelationsResolver
};
const relationResolversInfo = {
    User: ["Tenant", "NotificationSettings", "Notifications", "Activity", "Following", "Followers", "LikedExperiences", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings"],
    NotificationSettings: ["User"],
    Tenant: ["Users", "Experiences", "BookingOrders", "Locations"],
    AggregateRating: ["Experience"],
    Post: ["Author", "Experience", "Comments", "Reactions"],
    Comment: ["Post", "Author", "Replies", "Reactions"],
    Reply: ["Comment", "Author", "Reactions"],
    Reaction: ["Post", "Comment", "Reply", "Author"],
    Request: ["Reporter"],
    Notification: ["User", "Actor"],
    Experience: ["Tenant", "Availability", "AggregatedRating", "LikedBy", "Locations", "Price", "Posts"],
    ExperienceAvailability: ["Experience"],
    Currency: ["prices"],
    Price: ["currency", "Experience", "BookingLineItems"],
    BookingOrderLineItem: ["LineItemPrice", "Booking"],
    BookingOrder: ["Buyer", "Tenant", "Items"],
    Location: ["Experience", "Tenant"]
};
function applyRelationResolversEnhanceMap(relationResolversEnhanceMap) {
    for (const relationResolversEnhanceMapKey of Object.keys(relationResolversEnhanceMap)) {
        const modelName = relationResolversEnhanceMapKey;
        const relationResolverTarget = relationResolversMap[modelName].prototype;
        const relationResolverActionsConfig = relationResolversEnhanceMap[modelName];
        if (relationResolverActionsConfig._all) {
            const allActionsDecorators = relationResolverActionsConfig._all;
            const relationResolverActionNames = relationResolversInfo[modelName];
            for (const relationResolverActionName of relationResolverActionNames) {
                tslib.__decorate(allActionsDecorators, relationResolverTarget, relationResolverActionName, null);
            }
        }
        const relationResolverActionsToApply = Object.keys(relationResolverActionsConfig).filter(it => it !== "_all");
        for (const relationResolverActionName of relationResolverActionsToApply) {
            const decorators = relationResolverActionsConfig[relationResolverActionName];
            tslib.__decorate(decorators, relationResolverTarget, relationResolverActionName, null);
        }
    }
}
exports.applyRelationResolversEnhanceMap = applyRelationResolversEnhanceMap;
function applyTypeClassEnhanceConfig(enhanceConfig, typeClass, typePrototype, typeFieldNames) {
    if (enhanceConfig.class) {
        tslib.__decorate(enhanceConfig.class, typeClass);
    }
    if (enhanceConfig.fields) {
        if (enhanceConfig.fields._all) {
            const allFieldsDecorators = enhanceConfig.fields._all;
            for (const typeFieldName of typeFieldNames) {
                tslib.__decorate(allFieldsDecorators, typePrototype, typeFieldName, void 0);
            }
        }
        const configFieldsToApply = Object.keys(enhanceConfig.fields).filter(it => it !== "_all");
        for (const typeFieldName of configFieldsToApply) {
            const fieldDecorators = enhanceConfig.fields[typeFieldName];
            tslib.__decorate(fieldDecorators, typePrototype, typeFieldName, void 0);
        }
    }
}
const modelsInfo = {
    User: ["tenantId", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "followingIds", "followerIds", "experienceIds", "createdAt", "updatedAt"],
    NotificationSettings: ["id", "newArrivals", "bookingOrOrderUpdates", "promotions", "saleAlerts", "newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "userId", "createdAt", "updatedAt"],
    Tenant: ["id", "name", "slug", "avatar", "coverImage", "experienceImages", "createdAt", "updatedAt"],
    AggregateRating: ["id", "ratingValue", "countedPosts", "allPosts", "ratingCount", "experienceId", "createdAt", "updatedAt"],
    Post: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "experienceId", "postLink", "createdAt", "updatedAt"],
    Comment: ["id", "text", "postId", "authorId", "createdAt", "updatedAt"],
    Reply: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    Reaction: ["id", "type", "postId", "commentId", "replyId", "authorId", "createdAt", "updatedAt"],
    Request: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    Notification: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    Experience: ["id", "tenantId", "productLink", "stripeProductId", "title", "description", "category", "photo", "gallery", "location", "duration", "publishStatus", "likedByIds", "createdAt", "updatedAt"],
    ExperienceAvailability: ["id", "experienceId", "startDate", "endDate", "availabilityType", "weekendSpacesAvailable", "dailySpacesAvailable", "hourlySpacesAvailable", "halfHourlySpacesAvailable", "createdAt", "updatedAt"],
    Currency: ["id", "name", "symbol", "code", "createdAt", "updatedAt"],
    Price: ["id", "priceInLowestDenomination", "displayPrice", "currencyId", "details", "experienceId", "isBasePrice", "createdAt", "updatedAt"],
    TopicLists: ["id", "type", "title", "lists", "createdAt", "updatedAt"],
    BookingOrderLineItem: ["id", "priceId", "bookingId", "createdAt", "updatedAt"],
    BookingOrder: ["id", "status", "SelectedPaymentType", "stripePaymentReference", "buyerId", "tenantId", "createdAt", "updatedAt"],
    Location: ["id", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "experienceId", "tenantId", "createdAt", "updatedAt"]
};
function applyModelsEnhanceMap(modelsEnhanceMap) {
    for (const modelsEnhanceMapKey of Object.keys(modelsEnhanceMap)) {
        const modelName = modelsEnhanceMapKey;
        const modelConfig = modelsEnhanceMap[modelName];
        const modelClass = models[modelName];
        const modelTarget = modelClass.prototype;
        applyTypeClassEnhanceConfig(modelConfig, modelClass, modelTarget, modelsInfo[modelName]);
    }
}
exports.applyModelsEnhanceMap = applyModelsEnhanceMap;
const outputsInfo = {
    AggregateUser: ["_count", "_min", "_max"],
    UserGroupBy: ["tenantId", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "followingIds", "followerIds", "experienceIds", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateNotificationSettings: ["_count", "_min", "_max"],
    NotificationSettingsGroupBy: ["id", "newArrivals", "bookingOrOrderUpdates", "promotions", "saleAlerts", "newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "userId", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateTenant: ["_count", "_min", "_max"],
    TenantGroupBy: ["id", "name", "slug", "avatar", "coverImage", "experienceImages", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateAggregateRating: ["_count", "_avg", "_sum", "_min", "_max"],
    Aggregateundefined: ["id", "ratingValue", "countedPosts", "allPosts", "ratingCount", "experienceId", "createdAt", "updatedAt"],
    AggregatePost: ["_count", "_avg", "_sum", "_min", "_max"],
    PostGroupBy: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "experienceId", "postLink", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateComment: ["_count", "_min", "_max"],
    CommentGroupBy: ["id", "text", "postId", "authorId", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateReply: ["_count", "_min", "_max"],
    ReplyGroupBy: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateReaction: ["_count", "_min", "_max"],
    ReactionGroupBy: ["id", "type", "postId", "commentId", "replyId", "authorId", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateRequest: ["_count", "_min", "_max"],
    RequestGroupBy: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "userId", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateNotification: ["_count", "_min", "_max"],
    NotificationGroupBy: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateExperience: ["_count", "_avg", "_sum", "_min", "_max"],
    ExperienceGroupBy: ["id", "tenantId", "productLink", "stripeProductId", "title", "description", "category", "photo", "gallery", "location", "duration", "publishStatus", "likedByIds", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateExperienceAvailability: ["_count", "_avg", "_sum", "_min", "_max"],
    ExperienceAvailabilityGroupBy: ["id", "experienceId", "startDate", "endDate", "availabilityType", "weekendSpacesAvailable", "dailySpacesAvailable", "hourlySpacesAvailable", "halfHourlySpacesAvailable", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateCurrency: ["_count", "_min", "_max"],
    CurrencyGroupBy: ["id", "name", "symbol", "code", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregatePrice: ["_count", "_avg", "_sum", "_min", "_max"],
    PriceGroupBy: ["id", "priceInLowestDenomination", "displayPrice", "currencyId", "details", "experienceId", "isBasePrice", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateTopicLists: ["_count", "_avg", "_sum", "_min", "_max"],
    TopicListsGroupBy: ["id", "type", "title", "lists", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateBookingOrderLineItem: ["_count", "_min", "_max"],
    BookingOrderLineItemGroupBy: ["id", "priceId", "bookingId", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateBookingOrder: ["_count", "_min", "_max"],
    BookingOrderGroupBy: ["id", "status", "SelectedPaymentType", "stripePaymentReference", "buyerId", "tenantId", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateLocation: ["_count", "_avg", "_sum", "_min", "_max"],
    LocationGroupBy: ["id", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "experienceId", "tenantId", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
    AffectedRowsOutput: ["count"],
    UserCount: ["Notifications", "Activity", "Following", "Followers", "LikedExperiences", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings"],
    UserCountAggregate: ["tenantId", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "followingIds", "followerIds", "experienceIds", "createdAt", "updatedAt", "_all"],
    UserMinAggregate: ["tenantId", "uid", "uuid", "id", "username", "email", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "createdAt", "updatedAt"],
    UserMaxAggregate: ["tenantId", "uid", "uuid", "id", "username", "email", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "createdAt", "updatedAt"],
    NotificationSettingsCountAggregate: ["id", "newArrivals", "bookingOrOrderUpdates", "promotions", "saleAlerts", "newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "userId", "createdAt", "updatedAt", "_all"],
    NotificationSettingsMinAggregate: ["id", "newArrivals", "bookingOrOrderUpdates", "promotions", "saleAlerts", "newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "userId", "createdAt", "updatedAt"],
    NotificationSettingsMaxAggregate: ["id", "newArrivals", "bookingOrOrderUpdates", "promotions", "saleAlerts", "newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "userId", "createdAt", "updatedAt"],
    TenantCount: ["Users", "Experiences", "BookingOrders", "Locations"],
    TenantCountAggregate: ["id", "name", "slug", "avatar", "coverImage", "experienceImages", "createdAt", "updatedAt", "_all"],
    TenantMinAggregate: ["id", "name", "slug", "avatar", "coverImage", "createdAt", "updatedAt"],
    TenantMaxAggregate: ["id", "name", "slug", "avatar", "coverImage", "createdAt", "updatedAt"],
    PostCount: ["Comments", "Reactions"],
    PostCountAggregate: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "experienceId", "postLink", "createdAt", "updatedAt", "_all"],
    PostAvgAggregate: ["rating"],
    PostSumAggregate: ["rating"],
    PostMinAggregate: ["id", "type", "caption", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "experienceId", "postLink", "createdAt", "updatedAt"],
    PostMaxAggregate: ["id", "type", "caption", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "experienceId", "postLink", "createdAt", "updatedAt"],
    CommentCount: ["Replies", "Reactions"],
    CommentCountAggregate: ["id", "text", "postId", "authorId", "createdAt", "updatedAt", "_all"],
    CommentMinAggregate: ["id", "text", "postId", "authorId", "createdAt", "updatedAt"],
    CommentMaxAggregate: ["id", "text", "postId", "authorId", "createdAt", "updatedAt"],
    ReplyCount: ["Reactions"],
    ReplyCountAggregate: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt", "_all"],
    ReplyMinAggregate: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    ReplyMaxAggregate: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    ReactionCountAggregate: ["id", "type", "postId", "commentId", "replyId", "authorId", "createdAt", "updatedAt", "_all"],
    ReactionMinAggregate: ["id", "type", "postId", "commentId", "replyId", "authorId", "createdAt", "updatedAt"],
    ReactionMaxAggregate: ["id", "type", "postId", "commentId", "replyId", "authorId", "createdAt", "updatedAt"],
    RequestCountAggregate: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "userId", "createdAt", "updatedAt", "_all"],
    RequestMinAggregate: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    RequestMaxAggregate: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    NotificationCountAggregate: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt", "_all"],
    NotificationMinAggregate: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationMaxAggregate: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    ExperienceCount: ["Availability", "LikedBy", "Locations", "Price", "Posts"],
    ExperienceCountAggregate: ["id", "tenantId", "productLink", "stripeProductId", "title", "description", "category", "photo", "gallery", "location", "duration", "publishStatus", "likedByIds", "createdAt", "updatedAt", "_all"],
    ExperienceAvgAggregate: ["duration"],
    ExperienceSumAggregate: ["duration"],
    ExperienceMinAggregate: ["id", "tenantId", "productLink", "stripeProductId", "title", "description", "category", "photo", "location", "duration", "publishStatus", "createdAt", "updatedAt"],
    ExperienceMaxAggregate: ["id", "tenantId", "productLink", "stripeProductId", "title", "description", "category", "photo", "location", "duration", "publishStatus", "createdAt", "updatedAt"],
    ExperienceAvailabilityCountAggregate: ["id", "experienceId", "startDate", "endDate", "availabilityType", "weekendSpacesAvailable", "dailySpacesAvailable", "hourlySpacesAvailable", "halfHourlySpacesAvailable", "createdAt", "updatedAt", "_all"],
    ExperienceAvailabilityAvgAggregate: ["weekendSpacesAvailable", "dailySpacesAvailable", "hourlySpacesAvailable", "halfHourlySpacesAvailable"],
    ExperienceAvailabilitySumAggregate: ["weekendSpacesAvailable", "dailySpacesAvailable", "hourlySpacesAvailable", "halfHourlySpacesAvailable"],
    ExperienceAvailabilityMinAggregate: ["id", "experienceId", "startDate", "endDate", "availabilityType", "weekendSpacesAvailable", "dailySpacesAvailable", "hourlySpacesAvailable", "halfHourlySpacesAvailable", "createdAt", "updatedAt"],
    ExperienceAvailabilityMaxAggregate: ["id", "experienceId", "startDate", "endDate", "availabilityType", "weekendSpacesAvailable", "dailySpacesAvailable", "hourlySpacesAvailable", "halfHourlySpacesAvailable", "createdAt", "updatedAt"],
    CurrencyCount: ["prices"],
    CurrencyCountAggregate: ["id", "name", "symbol", "code", "createdAt", "updatedAt", "_all"],
    CurrencyMinAggregate: ["id", "name", "symbol", "code", "createdAt", "updatedAt"],
    CurrencyMaxAggregate: ["id", "name", "symbol", "code", "createdAt", "updatedAt"],
    PriceCount: ["BookingLineItems"],
    PriceCountAggregate: ["id", "priceInLowestDenomination", "displayPrice", "currencyId", "details", "experienceId", "isBasePrice", "createdAt", "updatedAt", "_all"],
    PriceAvgAggregate: ["priceInLowestDenomination"],
    PriceSumAggregate: ["priceInLowestDenomination"],
    PriceMinAggregate: ["id", "priceInLowestDenomination", "displayPrice", "currencyId", "details", "experienceId", "isBasePrice", "createdAt", "updatedAt"],
    PriceMaxAggregate: ["id", "priceInLowestDenomination", "displayPrice", "currencyId", "details", "experienceId", "isBasePrice", "createdAt", "updatedAt"],
    TopicListsCountAggregate: ["id", "type", "title", "lists", "createdAt", "updatedAt", "_all"],
    TopicListsAvgAggregate: ["lists"],
    TopicListsSumAggregate: ["lists"],
    TopicListsMinAggregate: ["id", "type", "title", "createdAt", "updatedAt"],
    TopicListsMaxAggregate: ["id", "type", "title", "createdAt", "updatedAt"],
    BookingOrderLineItemCountAggregate: ["id", "priceId", "bookingId", "createdAt", "updatedAt", "_all"],
    BookingOrderLineItemMinAggregate: ["id", "priceId", "bookingId", "createdAt", "updatedAt"],
    BookingOrderLineItemMaxAggregate: ["id", "priceId", "bookingId", "createdAt", "updatedAt"],
    BookingOrderCount: ["Items"],
    BookingOrderCountAggregate: ["id", "status", "SelectedPaymentType", "stripePaymentReference", "buyerId", "tenantId", "createdAt", "updatedAt", "_all"],
    BookingOrderMinAggregate: ["id", "status", "SelectedPaymentType", "stripePaymentReference", "buyerId", "tenantId", "createdAt", "updatedAt"],
    BookingOrderMaxAggregate: ["id", "status", "SelectedPaymentType", "stripePaymentReference", "buyerId", "tenantId", "createdAt", "updatedAt"],
    LocationCountAggregate: ["id", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "experienceId", "tenantId", "createdAt", "updatedAt", "_all"],
    LocationAvgAggregate: ["longitude", "latitude"],
    LocationSumAggregate: ["longitude", "latitude"],
    LocationMinAggregate: ["id", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "experienceId", "tenantId", "createdAt", "updatedAt"],
    LocationMaxAggregate: ["id", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "experienceId", "tenantId", "createdAt", "updatedAt"]
};
function applyOutputTypesEnhanceMap(outputTypesEnhanceMap) {
    for (const outputTypeEnhanceMapKey of Object.keys(outputTypesEnhanceMap)) {
        const outputTypeName = outputTypeEnhanceMapKey;
        const typeConfig = outputTypesEnhanceMap[outputTypeName];
        const typeClass = outputTypes[outputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, outputsInfo[outputTypeName]);
    }
}
exports.applyOutputTypesEnhanceMap = applyOutputTypesEnhanceMap;
const inputsInfo = {
    UserWhereInput: ["AND", "OR", "NOT", "Tenant", "tenantId", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "LikedExperiences", "experienceIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt"],
    UserOrderByWithRelationInput: ["Tenant", "tenantId", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "LikedExperiences", "experienceIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt"],
    UserWhereUniqueInput: ["tenantId", "uid", "uuid", "id", "username", "email"],
    UserOrderByWithAggregationInput: ["tenantId", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "followingIds", "followerIds", "experienceIds", "createdAt", "updatedAt", "_count", "_max", "_min"],
    UserScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "tenantId", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "followingIds", "followerIds", "experienceIds", "createdAt", "updatedAt"],
    NotificationSettingsWhereInput: ["AND", "OR", "NOT", "id", "newArrivals", "bookingOrOrderUpdates", "promotions", "saleAlerts", "newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "User", "userId", "createdAt", "updatedAt"],
    NotificationSettingsOrderByWithRelationInput: ["id", "newArrivals", "bookingOrOrderUpdates", "promotions", "saleAlerts", "newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "User", "userId", "createdAt", "updatedAt"],
    NotificationSettingsWhereUniqueInput: ["id", "userId"],
    NotificationSettingsOrderByWithAggregationInput: ["id", "newArrivals", "bookingOrOrderUpdates", "promotions", "saleAlerts", "newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "userId", "createdAt", "updatedAt", "_count", "_max", "_min"],
    NotificationSettingsScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "newArrivals", "bookingOrOrderUpdates", "promotions", "saleAlerts", "newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "userId", "createdAt", "updatedAt"],
    TenantWhereInput: ["AND", "OR", "NOT", "id", "name", "slug", "avatar", "coverImage", "experienceImages", "Users", "Experiences", "BookingOrders", "Locations", "createdAt", "updatedAt"],
    TenantOrderByWithRelationInput: ["id", "name", "slug", "avatar", "coverImage", "experienceImages", "Users", "Experiences", "BookingOrders", "Locations", "createdAt", "updatedAt"],
    TenantWhereUniqueInput: ["id", "slug"],
    TenantOrderByWithAggregationInput: ["id", "name", "slug", "avatar", "coverImage", "experienceImages", "createdAt", "updatedAt", "_count", "_max", "_min"],
    TenantScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "slug", "avatar", "coverImage", "experienceImages", "createdAt", "updatedAt"],
    AggregateRatingWhereInput: ["AND", "OR", "NOT", "id", "ratingValue", "countedPosts", "allPosts", "ratingCount", "Experience", "experienceId", "createdAt", "updatedAt"],
    AggregateRatingOrderByWithRelationInput: ["id", "ratingValue", "countedPosts", "allPosts", "ratingCount", "Experience", "experienceId", "createdAt", "updatedAt"],
    AggregateRatingWhereUniqueInput: ["id", "experienceId"],
    AggregateRatingOrderByWithAggregationInput: ["id", "ratingValue", "countedPosts", "allPosts", "ratingCount", "experienceId", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
    AggregateRatingScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "ratingValue", "countedPosts", "allPosts", "ratingCount", "experienceId", "createdAt", "updatedAt"],
    PostWhereInput: ["AND", "OR", "NOT", "id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "authorId", "Experience", "experienceId", "Comments", "Reactions", "postLink", "createdAt", "updatedAt"],
    PostOrderByWithRelationInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "authorId", "Experience", "experienceId", "Comments", "Reactions", "postLink", "createdAt", "updatedAt"],
    PostWhereUniqueInput: ["id"],
    PostOrderByWithAggregationInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "experienceId", "postLink", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
    PostScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "experienceId", "postLink", "createdAt", "updatedAt"],
    CommentWhereInput: ["AND", "OR", "NOT", "id", "text", "Post", "postId", "Author", "authorId", "Replies", "Reactions", "createdAt", "updatedAt"],
    CommentOrderByWithRelationInput: ["id", "text", "Post", "postId", "Author", "authorId", "Replies", "Reactions", "createdAt", "updatedAt"],
    CommentWhereUniqueInput: ["id"],
    CommentOrderByWithAggregationInput: ["id", "text", "postId", "authorId", "createdAt", "updatedAt", "_count", "_max", "_min"],
    CommentScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "text", "postId", "authorId", "createdAt", "updatedAt"],
    ReplyWhereInput: ["AND", "OR", "NOT", "id", "text", "Comment", "commentId", "Author", "authorId", "Reactions", "createdAt", "updatedAt"],
    ReplyOrderByWithRelationInput: ["id", "text", "Comment", "commentId", "Author", "authorId", "Reactions", "createdAt", "updatedAt"],
    ReplyWhereUniqueInput: ["id"],
    ReplyOrderByWithAggregationInput: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt", "_count", "_max", "_min"],
    ReplyScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    ReactionWhereInput: ["AND", "OR", "NOT", "id", "type", "Post", "postId", "Comment", "commentId", "Reply", "replyId", "Author", "authorId", "createdAt", "updatedAt"],
    ReactionOrderByWithRelationInput: ["id", "type", "Post", "postId", "Comment", "commentId", "Reply", "replyId", "Author", "authorId", "createdAt", "updatedAt"],
    ReactionWhereUniqueInput: ["id"],
    ReactionOrderByWithAggregationInput: ["id", "type", "postId", "commentId", "replyId", "authorId", "createdAt", "updatedAt", "_count", "_max", "_min"],
    ReactionScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "type", "postId", "commentId", "replyId", "authorId", "createdAt", "updatedAt"],
    RequestWhereInput: ["AND", "OR", "NOT", "id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "Reporter", "userId", "createdAt", "updatedAt"],
    RequestOrderByWithRelationInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "Reporter", "userId", "createdAt", "updatedAt"],
    RequestWhereUniqueInput: ["id"],
    RequestOrderByWithAggregationInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "userId", "createdAt", "updatedAt", "_count", "_max", "_min"],
    RequestScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    NotificationWhereInput: ["AND", "OR", "NOT", "id", "description", "User", "userId", "Actor", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationOrderByWithRelationInput: ["id", "description", "User", "userId", "Actor", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationWhereUniqueInput: ["id"],
    NotificationOrderByWithAggregationInput: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt", "_count", "_max", "_min"],
    NotificationScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    ExperienceWhereInput: ["AND", "OR", "NOT", "id", "Tenant", "tenantId", "productLink", "stripeProductId", "title", "description", "category", "Availability", "photo", "gallery", "location", "duration", "AggregatedRating", "publishStatus", "LikedBy", "likedByIds", "Locations", "Price", "Posts", "createdAt", "updatedAt"],
    ExperienceOrderByWithRelationInput: ["id", "Tenant", "tenantId", "productLink", "stripeProductId", "title", "description", "category", "Availability", "photo", "gallery", "location", "duration", "AggregatedRating", "publishStatus", "LikedBy", "likedByIds", "Locations", "Price", "Posts", "createdAt", "updatedAt"],
    ExperienceWhereUniqueInput: ["id"],
    ExperienceOrderByWithAggregationInput: ["id", "tenantId", "productLink", "stripeProductId", "title", "description", "category", "photo", "gallery", "location", "duration", "publishStatus", "likedByIds", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
    ExperienceScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "tenantId", "productLink", "stripeProductId", "title", "description", "category", "photo", "gallery", "location", "duration", "publishStatus", "likedByIds", "createdAt", "updatedAt"],
    ExperienceAvailabilityWhereInput: ["AND", "OR", "NOT", "id", "Experience", "experienceId", "startDate", "endDate", "availabilityType", "weekendSpacesAvailable", "dailySpacesAvailable", "hourlySpacesAvailable", "halfHourlySpacesAvailable", "createdAt", "updatedAt"],
    ExperienceAvailabilityOrderByWithRelationInput: ["id", "Experience", "experienceId", "startDate", "endDate", "availabilityType", "weekendSpacesAvailable", "dailySpacesAvailable", "hourlySpacesAvailable", "halfHourlySpacesAvailable", "createdAt", "updatedAt"],
    ExperienceAvailabilityWhereUniqueInput: ["id"],
    ExperienceAvailabilityOrderByWithAggregationInput: ["id", "experienceId", "startDate", "endDate", "availabilityType", "weekendSpacesAvailable", "dailySpacesAvailable", "hourlySpacesAvailable", "halfHourlySpacesAvailable", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
    ExperienceAvailabilityScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "experienceId", "startDate", "endDate", "availabilityType", "weekendSpacesAvailable", "dailySpacesAvailable", "hourlySpacesAvailable", "halfHourlySpacesAvailable", "createdAt", "updatedAt"],
    CurrencyWhereInput: ["AND", "OR", "NOT", "id", "name", "symbol", "code", "prices", "createdAt", "updatedAt"],
    CurrencyOrderByWithRelationInput: ["id", "name", "symbol", "code", "prices", "createdAt", "updatedAt"],
    CurrencyWhereUniqueInput: ["id"],
    CurrencyOrderByWithAggregationInput: ["id", "name", "symbol", "code", "createdAt", "updatedAt", "_count", "_max", "_min"],
    CurrencyScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "symbol", "code", "createdAt", "updatedAt"],
    PriceWhereInput: ["AND", "OR", "NOT", "id", "priceInLowestDenomination", "displayPrice", "currency", "currencyId", "details", "Experience", "experienceId", "BookingLineItems", "isBasePrice", "createdAt", "updatedAt"],
    PriceOrderByWithRelationInput: ["id", "priceInLowestDenomination", "displayPrice", "currency", "currencyId", "details", "Experience", "experienceId", "BookingLineItems", "isBasePrice", "createdAt", "updatedAt"],
    PriceWhereUniqueInput: ["id"],
    PriceOrderByWithAggregationInput: ["id", "priceInLowestDenomination", "displayPrice", "currencyId", "details", "experienceId", "isBasePrice", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
    PriceScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "priceInLowestDenomination", "displayPrice", "currencyId", "details", "experienceId", "isBasePrice", "createdAt", "updatedAt"],
    TopicListsWhereInput: ["AND", "OR", "NOT", "id", "type", "title", "lists", "createdAt", "updatedAt"],
    TopicListsOrderByWithRelationInput: ["id", "type", "title", "lists", "createdAt", "updatedAt"],
    TopicListsWhereUniqueInput: ["id"],
    TopicListsOrderByWithAggregationInput: ["id", "type", "title", "lists", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
    TopicListsScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "type", "title", "lists", "createdAt", "updatedAt"],
    BookingOrderLineItemWhereInput: ["AND", "OR", "NOT", "id", "LineItemPrice", "priceId", "Booking", "bookingId", "createdAt", "updatedAt"],
    BookingOrderLineItemOrderByWithRelationInput: ["id", "LineItemPrice", "priceId", "Booking", "bookingId", "createdAt", "updatedAt"],
    BookingOrderLineItemWhereUniqueInput: ["id"],
    BookingOrderLineItemOrderByWithAggregationInput: ["id", "priceId", "bookingId", "createdAt", "updatedAt", "_count", "_max", "_min"],
    BookingOrderLineItemScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "priceId", "bookingId", "createdAt", "updatedAt"],
    BookingOrderWhereInput: ["AND", "OR", "NOT", "id", "status", "SelectedPaymentType", "stripePaymentReference", "Buyer", "buyerId", "Tenant", "tenantId", "Items", "createdAt", "updatedAt"],
    BookingOrderOrderByWithRelationInput: ["id", "status", "SelectedPaymentType", "stripePaymentReference", "Buyer", "buyerId", "Tenant", "tenantId", "Items", "createdAt", "updatedAt"],
    BookingOrderWhereUniqueInput: ["id"],
    BookingOrderOrderByWithAggregationInput: ["id", "status", "SelectedPaymentType", "stripePaymentReference", "buyerId", "tenantId", "createdAt", "updatedAt", "_count", "_max", "_min"],
    BookingOrderScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "status", "SelectedPaymentType", "stripePaymentReference", "buyerId", "tenantId", "createdAt", "updatedAt"],
    LocationWhereInput: ["AND", "OR", "NOT", "id", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "Experience", "experienceId", "Tenant", "tenantId", "createdAt", "updatedAt"],
    LocationOrderByWithRelationInput: ["id", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "Experience", "experienceId", "Tenant", "tenantId", "createdAt", "updatedAt"],
    LocationWhereUniqueInput: ["id"],
    LocationOrderByWithAggregationInput: ["id", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "experienceId", "tenantId", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
    LocationScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "experienceId", "tenantId", "createdAt", "updatedAt"],
    UserCreateInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "LikedExperiences", "experienceIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt"],
    UserUpdateInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "LikedExperiences", "experienceIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt"],
    UserCreateManyInput: ["tenantId", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "followingIds", "followerIds", "experienceIds", "createdAt", "updatedAt"],
    UserUpdateManyMutationInput: ["uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "followingIds", "followerIds", "experienceIds", "createdAt", "updatedAt"],
    NotificationSettingsCreateInput: ["id", "newArrivals", "bookingOrOrderUpdates", "promotions", "saleAlerts", "newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "User", "createdAt", "updatedAt"],
    NotificationSettingsUpdateInput: ["newArrivals", "bookingOrOrderUpdates", "promotions", "saleAlerts", "newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "User", "createdAt", "updatedAt"],
    NotificationSettingsCreateManyInput: ["id", "newArrivals", "bookingOrOrderUpdates", "promotions", "saleAlerts", "newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "userId", "createdAt", "updatedAt"],
    NotificationSettingsUpdateManyMutationInput: ["newArrivals", "bookingOrOrderUpdates", "promotions", "saleAlerts", "newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "createdAt", "updatedAt"],
    TenantCreateInput: ["id", "name", "slug", "avatar", "coverImage", "experienceImages", "Users", "Experiences", "BookingOrders", "Locations", "createdAt", "updatedAt"],
    TenantUpdateInput: ["name", "slug", "avatar", "coverImage", "experienceImages", "Users", "Experiences", "BookingOrders", "Locations", "createdAt", "updatedAt"],
    TenantCreateManyInput: ["id", "name", "slug", "avatar", "coverImage", "experienceImages", "createdAt", "updatedAt"],
    TenantUpdateManyMutationInput: ["name", "slug", "avatar", "coverImage", "experienceImages", "createdAt", "updatedAt"],
    AggregateRatingCreateInput: ["id", "ratingValue", "countedPosts", "allPosts", "ratingCount", "Experience", "createdAt", "updatedAt"],
    AggregateRatingUpdateInput: ["ratingValue", "countedPosts", "allPosts", "ratingCount", "Experience", "createdAt", "updatedAt"],
    AggregateRatingCreateManyInput: ["id", "ratingValue", "countedPosts", "allPosts", "ratingCount", "experienceId", "createdAt", "updatedAt"],
    AggregateRatingUpdateManyMutationInput: ["ratingValue", "countedPosts", "allPosts", "ratingCount", "createdAt", "updatedAt"],
    PostCreateInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "Experience", "Comments", "Reactions", "postLink", "createdAt", "updatedAt"],
    PostUpdateInput: ["type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "Experience", "Comments", "Reactions", "postLink", "createdAt", "updatedAt"],
    PostCreateManyInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "experienceId", "postLink", "createdAt", "updatedAt"],
    PostUpdateManyMutationInput: ["type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "postLink", "createdAt", "updatedAt"],
    CommentCreateInput: ["id", "text", "Post", "Author", "Replies", "Reactions", "createdAt", "updatedAt"],
    CommentUpdateInput: ["text", "Post", "Author", "Replies", "Reactions", "createdAt", "updatedAt"],
    CommentCreateManyInput: ["id", "text", "postId", "authorId", "createdAt", "updatedAt"],
    CommentUpdateManyMutationInput: ["text", "createdAt", "updatedAt"],
    ReplyCreateInput: ["id", "text", "Comment", "Author", "Reactions", "createdAt", "updatedAt"],
    ReplyUpdateInput: ["text", "Comment", "Author", "Reactions", "createdAt", "updatedAt"],
    ReplyCreateManyInput: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    ReplyUpdateManyMutationInput: ["text", "createdAt", "updatedAt"],
    ReactionCreateInput: ["id", "type", "Post", "Comment", "Reply", "Author", "createdAt", "updatedAt"],
    ReactionUpdateInput: ["type", "Post", "Comment", "Reply", "Author", "createdAt", "updatedAt"],
    ReactionCreateManyInput: ["id", "type", "postId", "commentId", "replyId", "authorId", "createdAt", "updatedAt"],
    ReactionUpdateManyMutationInput: ["type", "createdAt", "updatedAt"],
    RequestCreateInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "Reporter", "createdAt", "updatedAt"],
    RequestUpdateInput: ["reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "Reporter", "createdAt", "updatedAt"],
    RequestCreateManyInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    RequestUpdateManyMutationInput: ["reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "createdAt", "updatedAt"],
    NotificationCreateInput: ["id", "description", "User", "Actor", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationUpdateInput: ["description", "User", "Actor", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationCreateManyInput: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationUpdateManyMutationInput: ["description", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    ExperienceCreateInput: ["id", "Tenant", "productLink", "stripeProductId", "title", "description", "category", "Availability", "photo", "gallery", "location", "duration", "AggregatedRating", "publishStatus", "LikedBy", "likedByIds", "Locations", "Price", "Posts", "createdAt", "updatedAt"],
    ExperienceUpdateInput: ["Tenant", "productLink", "stripeProductId", "title", "description", "category", "Availability", "photo", "gallery", "location", "duration", "AggregatedRating", "publishStatus", "LikedBy", "likedByIds", "Locations", "Price", "Posts", "createdAt", "updatedAt"],
    ExperienceCreateManyInput: ["id", "tenantId", "productLink", "stripeProductId", "title", "description", "category", "photo", "gallery", "location", "duration", "publishStatus", "likedByIds", "createdAt", "updatedAt"],
    ExperienceUpdateManyMutationInput: ["productLink", "stripeProductId", "title", "description", "category", "photo", "gallery", "location", "duration", "publishStatus", "likedByIds", "createdAt", "updatedAt"],
    ExperienceAvailabilityCreateInput: ["id", "Experience", "startDate", "endDate", "availabilityType", "weekendSpacesAvailable", "dailySpacesAvailable", "hourlySpacesAvailable", "halfHourlySpacesAvailable", "createdAt", "updatedAt"],
    ExperienceAvailabilityUpdateInput: ["Experience", "startDate", "endDate", "availabilityType", "weekendSpacesAvailable", "dailySpacesAvailable", "hourlySpacesAvailable", "halfHourlySpacesAvailable", "createdAt", "updatedAt"],
    ExperienceAvailabilityCreateManyInput: ["id", "experienceId", "startDate", "endDate", "availabilityType", "weekendSpacesAvailable", "dailySpacesAvailable", "hourlySpacesAvailable", "halfHourlySpacesAvailable", "createdAt", "updatedAt"],
    ExperienceAvailabilityUpdateManyMutationInput: ["startDate", "endDate", "availabilityType", "weekendSpacesAvailable", "dailySpacesAvailable", "hourlySpacesAvailable", "halfHourlySpacesAvailable", "createdAt", "updatedAt"],
    CurrencyCreateInput: ["id", "name", "symbol", "code", "prices", "createdAt", "updatedAt"],
    CurrencyUpdateInput: ["name", "symbol", "code", "prices", "createdAt", "updatedAt"],
    CurrencyCreateManyInput: ["id", "name", "symbol", "code", "createdAt", "updatedAt"],
    CurrencyUpdateManyMutationInput: ["name", "symbol", "code", "createdAt", "updatedAt"],
    PriceCreateInput: ["id", "priceInLowestDenomination", "displayPrice", "currency", "details", "Experience", "BookingLineItems", "isBasePrice", "createdAt", "updatedAt"],
    PriceUpdateInput: ["priceInLowestDenomination", "displayPrice", "currency", "details", "Experience", "BookingLineItems", "isBasePrice", "createdAt", "updatedAt"],
    PriceCreateManyInput: ["id", "priceInLowestDenomination", "displayPrice", "currencyId", "details", "experienceId", "isBasePrice", "createdAt", "updatedAt"],
    PriceUpdateManyMutationInput: ["priceInLowestDenomination", "displayPrice", "details", "isBasePrice", "createdAt", "updatedAt"],
    TopicListsCreateInput: ["id", "type", "title", "lists", "createdAt", "updatedAt"],
    TopicListsUpdateInput: ["type", "title", "lists", "createdAt", "updatedAt"],
    TopicListsCreateManyInput: ["id", "type", "title", "lists", "createdAt", "updatedAt"],
    TopicListsUpdateManyMutationInput: ["type", "title", "lists", "createdAt", "updatedAt"],
    BookingOrderLineItemCreateInput: ["id", "LineItemPrice", "Booking", "createdAt", "updatedAt"],
    BookingOrderLineItemUpdateInput: ["LineItemPrice", "Booking", "createdAt", "updatedAt"],
    BookingOrderLineItemCreateManyInput: ["id", "priceId", "bookingId", "createdAt", "updatedAt"],
    BookingOrderLineItemUpdateManyMutationInput: ["createdAt", "updatedAt"],
    BookingOrderCreateInput: ["id", "status", "SelectedPaymentType", "stripePaymentReference", "Buyer", "Tenant", "Items", "createdAt", "updatedAt"],
    BookingOrderUpdateInput: ["status", "SelectedPaymentType", "stripePaymentReference", "Buyer", "Tenant", "Items", "createdAt", "updatedAt"],
    BookingOrderCreateManyInput: ["id", "status", "SelectedPaymentType", "stripePaymentReference", "buyerId", "tenantId", "createdAt", "updatedAt"],
    BookingOrderUpdateManyMutationInput: ["status", "SelectedPaymentType", "stripePaymentReference", "createdAt", "updatedAt"],
    LocationCreateInput: ["id", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "Experience", "Tenant", "createdAt", "updatedAt"],
    LocationUpdateInput: ["longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "Experience", "Tenant", "createdAt", "updatedAt"],
    LocationCreateManyInput: ["id", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "experienceId", "tenantId", "createdAt", "updatedAt"],
    LocationUpdateManyMutationInput: ["longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "createdAt", "updatedAt"],
    TenantRelationFilter: ["is", "isNot"],
    StringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "isSet"],
    StringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not"],
    EnumROLENullableListFilter: ["equals", "has", "hasEvery", "hasSome", "isEmpty"],
    DateTimeNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "isSet"],
    BoolNullableFilter: ["equals", "not", "isSet"],
    NotificationSettingsRelationFilter: ["is", "isNot"],
    NotificationListRelationFilter: ["every", "some", "none"],
    UserListRelationFilter: ["every", "some", "none"],
    StringNullableListFilter: ["equals", "has", "hasEvery", "hasSome", "isEmpty"],
    ExperienceListRelationFilter: ["every", "some", "none"],
    RequestListRelationFilter: ["every", "some", "none"],
    PostListRelationFilter: ["every", "some", "none"],
    CommentListRelationFilter: ["every", "some", "none"],
    ReplyListRelationFilter: ["every", "some", "none"],
    ReactionListRelationFilter: ["every", "some", "none"],
    BookingOrderListRelationFilter: ["every", "some", "none"],
    DateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NotificationOrderByRelationAggregateInput: ["_count"],
    UserOrderByRelationAggregateInput: ["_count"],
    ExperienceOrderByRelationAggregateInput: ["_count"],
    RequestOrderByRelationAggregateInput: ["_count"],
    PostOrderByRelationAggregateInput: ["_count"],
    CommentOrderByRelationAggregateInput: ["_count"],
    ReplyOrderByRelationAggregateInput: ["_count"],
    ReactionOrderByRelationAggregateInput: ["_count"],
    BookingOrderOrderByRelationAggregateInput: ["_count"],
    UserCountOrderByAggregateInput: ["tenantId", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "followingIds", "followerIds", "experienceIds", "createdAt", "updatedAt"],
    UserMaxOrderByAggregateInput: ["tenantId", "uid", "uuid", "id", "username", "email", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "createdAt", "updatedAt"],
    UserMinOrderByAggregateInput: ["tenantId", "uid", "uuid", "id", "username", "email", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "createdAt", "updatedAt"],
    StringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "_count", "_min", "_max", "isSet"],
    StringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "_count", "_min", "_max"],
    DateTimeNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max", "isSet"],
    BoolNullableWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max", "isSet"],
    DateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    BoolFilter: ["equals", "not"],
    UserRelationFilter: ["is", "isNot"],
    NotificationSettingsCountOrderByAggregateInput: ["id", "newArrivals", "bookingOrOrderUpdates", "promotions", "saleAlerts", "newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "userId", "createdAt", "updatedAt"],
    NotificationSettingsMaxOrderByAggregateInput: ["id", "newArrivals", "bookingOrOrderUpdates", "promotions", "saleAlerts", "newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "userId", "createdAt", "updatedAt"],
    NotificationSettingsMinOrderByAggregateInput: ["id", "newArrivals", "bookingOrOrderUpdates", "promotions", "saleAlerts", "newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "userId", "createdAt", "updatedAt"],
    BoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
    LocationListRelationFilter: ["every", "some", "none"],
    LocationOrderByRelationAggregateInput: ["_count"],
    TenantCountOrderByAggregateInput: ["id", "name", "slug", "avatar", "coverImage", "experienceImages", "createdAt", "updatedAt"],
    TenantMaxOrderByAggregateInput: ["id", "name", "slug", "avatar", "coverImage", "createdAt", "updatedAt"],
    TenantMinOrderByAggregateInput: ["id", "name", "slug", "avatar", "coverImage", "createdAt", "updatedAt"],
    FloatFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    IntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "isSet"],
    ExperienceRelationFilter: ["is", "isNot"],
    AggregateRatingCountOrderByAggregateInput: ["id", "ratingValue", "countedPosts", "allPosts", "ratingCount", "experienceId", "createdAt", "updatedAt"],
    AggregateRatingAvgOrderByAggregateInput: ["ratingValue", "countedPosts", "allPosts", "ratingCount"],
    AggregateRatingMaxOrderByAggregateInput: ["id", "ratingValue", "countedPosts", "allPosts", "ratingCount", "experienceId", "createdAt", "updatedAt"],
    AggregateRatingMinOrderByAggregateInput: ["id", "ratingValue", "countedPosts", "allPosts", "ratingCount", "experienceId", "createdAt", "updatedAt"],
    AggregateRatingSumOrderByAggregateInput: ["ratingValue", "countedPosts", "allPosts", "ratingCount"],
    FloatWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    IntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max", "isSet"],
    EnumMEDIA_TYPEFilter: ["equals", "in", "notIn", "not"],
    PostCountOrderByAggregateInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "experienceId", "postLink", "createdAt", "updatedAt"],
    PostAvgOrderByAggregateInput: ["rating"],
    PostMaxOrderByAggregateInput: ["id", "type", "caption", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "experienceId", "postLink", "createdAt", "updatedAt"],
    PostMinOrderByAggregateInput: ["id", "type", "caption", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "experienceId", "postLink", "createdAt", "updatedAt"],
    PostSumOrderByAggregateInput: ["rating"],
    EnumMEDIA_TYPEWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    PostRelationFilter: ["is", "isNot"],
    CommentCountOrderByAggregateInput: ["id", "text", "postId", "authorId", "createdAt", "updatedAt"],
    CommentMaxOrderByAggregateInput: ["id", "text", "postId", "authorId", "createdAt", "updatedAt"],
    CommentMinOrderByAggregateInput: ["id", "text", "postId", "authorId", "createdAt", "updatedAt"],
    CommentRelationFilter: ["is", "isNot"],
    ReplyCountOrderByAggregateInput: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    ReplyMaxOrderByAggregateInput: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    ReplyMinOrderByAggregateInput: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    EnumREACTION_TYPEFilter: ["equals", "in", "notIn", "not"],
    ReplyRelationFilter: ["is", "isNot"],
    ReactionCountOrderByAggregateInput: ["id", "type", "postId", "commentId", "replyId", "authorId", "createdAt", "updatedAt"],
    ReactionMaxOrderByAggregateInput: ["id", "type", "postId", "commentId", "replyId", "authorId", "createdAt", "updatedAt"],
    ReactionMinOrderByAggregateInput: ["id", "type", "postId", "commentId", "replyId", "authorId", "createdAt", "updatedAt"],
    EnumREACTION_TYPEWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    EnumREQUEST_TYPEFilter: ["equals", "in", "notIn", "not"],
    EnumREQUEST_STATUSFilter: ["equals", "in", "notIn", "not"],
    RequestCountOrderByAggregateInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    RequestMaxOrderByAggregateInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    RequestMinOrderByAggregateInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    EnumREQUEST_TYPEWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    EnumREQUEST_STATUSWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NotificationCountOrderByAggregateInput: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationMaxOrderByAggregateInput: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationMinOrderByAggregateInput: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    EnumEXPERIENCE_CATEGORYFilter: ["equals", "in", "notIn", "not"],
    ExperienceAvailabilityListRelationFilter: ["every", "some", "none"],
    IntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    AggregateRatingRelationFilter: ["is", "isNot"],
    EnumPUBLISH_STATUSFilter: ["equals", "in", "notIn", "not"],
    PriceListRelationFilter: ["every", "some", "none"],
    ExperienceAvailabilityOrderByRelationAggregateInput: ["_count"],
    PriceOrderByRelationAggregateInput: ["_count"],
    ExperienceCountOrderByAggregateInput: ["id", "tenantId", "productLink", "stripeProductId", "title", "description", "category", "photo", "gallery", "location", "duration", "publishStatus", "likedByIds", "createdAt", "updatedAt"],
    ExperienceAvgOrderByAggregateInput: ["duration"],
    ExperienceMaxOrderByAggregateInput: ["id", "tenantId", "productLink", "stripeProductId", "title", "description", "category", "photo", "location", "duration", "publishStatus", "createdAt", "updatedAt"],
    ExperienceMinOrderByAggregateInput: ["id", "tenantId", "productLink", "stripeProductId", "title", "description", "category", "photo", "location", "duration", "publishStatus", "createdAt", "updatedAt"],
    ExperienceSumOrderByAggregateInput: ["duration"],
    EnumEXPERIENCE_CATEGORYWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    IntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    EnumPUBLISH_STATUSWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    EnumAVAILABILITY_TYPEFilter: ["equals", "in", "notIn", "not"],
    ExperienceAvailabilityCountOrderByAggregateInput: ["id", "experienceId", "startDate", "endDate", "availabilityType", "weekendSpacesAvailable", "dailySpacesAvailable", "hourlySpacesAvailable", "halfHourlySpacesAvailable", "createdAt", "updatedAt"],
    ExperienceAvailabilityAvgOrderByAggregateInput: ["weekendSpacesAvailable", "dailySpacesAvailable", "hourlySpacesAvailable", "halfHourlySpacesAvailable"],
    ExperienceAvailabilityMaxOrderByAggregateInput: ["id", "experienceId", "startDate", "endDate", "availabilityType", "weekendSpacesAvailable", "dailySpacesAvailable", "hourlySpacesAvailable", "halfHourlySpacesAvailable", "createdAt", "updatedAt"],
    ExperienceAvailabilityMinOrderByAggregateInput: ["id", "experienceId", "startDate", "endDate", "availabilityType", "weekendSpacesAvailable", "dailySpacesAvailable", "hourlySpacesAvailable", "halfHourlySpacesAvailable", "createdAt", "updatedAt"],
    ExperienceAvailabilitySumOrderByAggregateInput: ["weekendSpacesAvailable", "dailySpacesAvailable", "hourlySpacesAvailable", "halfHourlySpacesAvailable"],
    EnumAVAILABILITY_TYPEWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    CurrencyCountOrderByAggregateInput: ["id", "name", "symbol", "code", "createdAt", "updatedAt"],
    CurrencyMaxOrderByAggregateInput: ["id", "name", "symbol", "code", "createdAt", "updatedAt"],
    CurrencyMinOrderByAggregateInput: ["id", "name", "symbol", "code", "createdAt", "updatedAt"],
    CurrencyRelationFilter: ["is", "isNot"],
    BookingOrderLineItemListRelationFilter: ["every", "some", "none"],
    BookingOrderLineItemOrderByRelationAggregateInput: ["_count"],
    PriceCountOrderByAggregateInput: ["id", "priceInLowestDenomination", "displayPrice", "currencyId", "details", "experienceId", "isBasePrice", "createdAt", "updatedAt"],
    PriceAvgOrderByAggregateInput: ["priceInLowestDenomination"],
    PriceMaxOrderByAggregateInput: ["id", "priceInLowestDenomination", "displayPrice", "currencyId", "details", "experienceId", "isBasePrice", "createdAt", "updatedAt"],
    PriceMinOrderByAggregateInput: ["id", "priceInLowestDenomination", "displayPrice", "currencyId", "details", "experienceId", "isBasePrice", "createdAt", "updatedAt"],
    PriceSumOrderByAggregateInput: ["priceInLowestDenomination"],
    EnumLIST_TYPEFilter: ["equals", "in", "notIn", "not"],
    IntNullableListFilter: ["equals", "has", "hasEvery", "hasSome", "isEmpty"],
    TopicListsCountOrderByAggregateInput: ["id", "type", "title", "lists", "createdAt", "updatedAt"],
    TopicListsAvgOrderByAggregateInput: ["lists"],
    TopicListsMaxOrderByAggregateInput: ["id", "type", "title", "createdAt", "updatedAt"],
    TopicListsMinOrderByAggregateInput: ["id", "type", "title", "createdAt", "updatedAt"],
    TopicListsSumOrderByAggregateInput: ["lists"],
    EnumLIST_TYPEWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    PriceRelationFilter: ["is", "isNot"],
    BookingOrderRelationFilter: ["is", "isNot"],
    BookingOrderLineItemCountOrderByAggregateInput: ["id", "priceId", "bookingId", "createdAt", "updatedAt"],
    BookingOrderLineItemMaxOrderByAggregateInput: ["id", "priceId", "bookingId", "createdAt", "updatedAt"],
    BookingOrderLineItemMinOrderByAggregateInput: ["id", "priceId", "bookingId", "createdAt", "updatedAt"],
    EnumBOOKING_ORDER_STATUSFilter: ["equals", "in", "notIn", "not"],
    BookingOrderCountOrderByAggregateInput: ["id", "status", "SelectedPaymentType", "stripePaymentReference", "buyerId", "tenantId", "createdAt", "updatedAt"],
    BookingOrderMaxOrderByAggregateInput: ["id", "status", "SelectedPaymentType", "stripePaymentReference", "buyerId", "tenantId", "createdAt", "updatedAt"],
    BookingOrderMinOrderByAggregateInput: ["id", "status", "SelectedPaymentType", "stripePaymentReference", "buyerId", "tenantId", "createdAt", "updatedAt"],
    EnumBOOKING_ORDER_STATUSWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    EnumADDRESS_TYPEFilter: ["equals", "in", "notIn", "not"],
    LocationCountOrderByAggregateInput: ["id", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "experienceId", "tenantId", "createdAt", "updatedAt"],
    LocationAvgOrderByAggregateInput: ["longitude", "latitude"],
    LocationMaxOrderByAggregateInput: ["id", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "experienceId", "tenantId", "createdAt", "updatedAt"],
    LocationMinOrderByAggregateInput: ["id", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "experienceId", "tenantId", "createdAt", "updatedAt"],
    LocationSumOrderByAggregateInput: ["longitude", "latitude"],
    EnumADDRESS_TYPEWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    TenantCreateNestedOneWithoutUsersInput: ["create", "connectOrCreate", "connect"],
    UserCreaterolesInput: ["set"],
    NotificationSettingsCreateNestedOneWithoutUserInput: ["create", "connectOrCreate", "connect"],
    NotificationCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
    NotificationCreateNestedManyWithoutActorInput: ["create", "connectOrCreate", "createMany", "connect"],
    UserCreateNestedManyWithoutFollowersInput: ["create", "connectOrCreate", "connect"],
    UserCreatefollowingIdsInput: ["set"],
    UserCreateNestedManyWithoutFollowingInput: ["create", "connectOrCreate", "connect"],
    UserCreatefollowerIdsInput: ["set"],
    ExperienceCreateNestedManyWithoutLikedByInput: ["create", "connectOrCreate", "connect"],
    UserCreateexperienceIdsInput: ["set"],
    RequestCreateNestedManyWithoutReporterInput: ["create", "connectOrCreate", "createMany", "connect"],
    PostCreateNestedManyWithoutAuthorInput: ["create", "connectOrCreate", "createMany", "connect"],
    CommentCreateNestedManyWithoutAuthorInput: ["create", "connectOrCreate", "createMany", "connect"],
    ReplyCreateNestedManyWithoutAuthorInput: ["create", "connectOrCreate", "createMany", "connect"],
    ReactionCreateNestedManyWithoutAuthorInput: ["create", "connectOrCreate", "createMany", "connect"],
    BookingOrderCreateNestedManyWithoutBuyerInput: ["create", "connectOrCreate", "createMany", "connect"],
    TenantUpdateOneWithoutUsersInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    StringFieldUpdateOperationsInput: ["set"],
    UserUpdaterolesInput: ["set", "push"],
    NullableStringFieldUpdateOperationsInput: ["set", "unset"],
    NullableDateTimeFieldUpdateOperationsInput: ["set", "unset"],
    NullableBoolFieldUpdateOperationsInput: ["set", "unset"],
    NotificationSettingsUpdateOneWithoutUserInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    NotificationUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    NotificationUpdateManyWithoutActorInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    UserUpdateManyWithoutFollowersInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    UserUpdatefollowingIdsInput: ["set", "push"],
    UserUpdateManyWithoutFollowingInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    UserUpdatefollowerIdsInput: ["set", "push"],
    ExperienceUpdateManyWithoutLikedByInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    UserUpdateexperienceIdsInput: ["set", "push"],
    RequestUpdateManyWithoutReporterInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    PostUpdateManyWithoutAuthorInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    CommentUpdateManyWithoutAuthorInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ReplyUpdateManyWithoutAuthorInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ReactionUpdateManyWithoutAuthorInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    BookingOrderUpdateManyWithoutBuyerInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    DateTimeFieldUpdateOperationsInput: ["set"],
    UserCreateNestedOneWithoutNotificationSettingsInput: ["create", "connectOrCreate", "connect"],
    BoolFieldUpdateOperationsInput: ["set"],
    UserUpdateOneWithoutNotificationSettingsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    TenantCreateexperienceImagesInput: ["set"],
    UserCreateNestedManyWithoutTenantInput: ["create", "connectOrCreate", "createMany", "connect"],
    ExperienceCreateNestedManyWithoutTenantInput: ["create", "connectOrCreate", "createMany", "connect"],
    BookingOrderCreateNestedManyWithoutTenantInput: ["create", "connectOrCreate", "createMany", "connect"],
    LocationCreateNestedManyWithoutTenantInput: ["create", "connectOrCreate", "createMany", "connect"],
    TenantUpdateexperienceImagesInput: ["set", "push"],
    UserUpdateManyWithoutTenantInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ExperienceUpdateManyWithoutTenantInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    BookingOrderUpdateManyWithoutTenantInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    LocationUpdateManyWithoutTenantInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ExperienceCreateNestedOneWithoutAggregatedRatingInput: ["create", "connectOrCreate", "connect"],
    FloatFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
    NullableIntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide", "unset"],
    ExperienceUpdateOneWithoutAggregatedRatingInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    PostCreatemediaUrlInput: ["set"],
    UserCreateNestedOneWithoutPostsInput: ["create", "connectOrCreate", "connect"],
    ExperienceCreateNestedOneWithoutPostsInput: ["create", "connectOrCreate", "connect"],
    CommentCreateNestedManyWithoutPostInput: ["create", "connectOrCreate", "createMany", "connect"],
    ReactionCreateNestedManyWithoutPostInput: ["create", "connectOrCreate", "createMany", "connect"],
    EnumMEDIA_TYPEFieldUpdateOperationsInput: ["set"],
    PostUpdatemediaUrlInput: ["set", "push"],
    UserUpdateOneRequiredWithoutPostsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    ExperienceUpdateOneWithoutPostsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    CommentUpdateManyWithoutPostInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ReactionUpdateManyWithoutPostInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    PostCreateNestedOneWithoutCommentsInput: ["create", "connectOrCreate", "connect"],
    UserCreateNestedOneWithoutCommentsInput: ["create", "connectOrCreate", "connect"],
    ReplyCreateNestedManyWithoutCommentInput: ["create", "connectOrCreate", "createMany", "connect"],
    ReactionCreateNestedManyWithoutCommentInput: ["create", "connectOrCreate", "createMany", "connect"],
    PostUpdateOneRequiredWithoutCommentsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    UserUpdateOneRequiredWithoutCommentsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    ReplyUpdateManyWithoutCommentInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ReactionUpdateManyWithoutCommentInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    CommentCreateNestedOneWithoutRepliesInput: ["create", "connectOrCreate", "connect"],
    UserCreateNestedOneWithoutRepliesInput: ["create", "connectOrCreate", "connect"],
    ReactionCreateNestedManyWithoutReplyInput: ["create", "connectOrCreate", "createMany", "connect"],
    CommentUpdateOneRequiredWithoutRepliesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    UserUpdateOneRequiredWithoutRepliesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    ReactionUpdateManyWithoutReplyInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    PostCreateNestedOneWithoutReactionsInput: ["create", "connectOrCreate", "connect"],
    CommentCreateNestedOneWithoutReactionsInput: ["create", "connectOrCreate", "connect"],
    ReplyCreateNestedOneWithoutReactionsInput: ["create", "connectOrCreate", "connect"],
    UserCreateNestedOneWithoutReactionsInput: ["create", "connectOrCreate", "connect"],
    EnumREACTION_TYPEFieldUpdateOperationsInput: ["set"],
    PostUpdateOneWithoutReactionsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    CommentUpdateOneWithoutReactionsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    ReplyUpdateOneWithoutReactionsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    UserUpdateOneRequiredWithoutReactionsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    RequestCreatesocialLinksInput: ["set"],
    UserCreateNestedOneWithoutRequestsInput: ["create", "connectOrCreate", "connect"],
    EnumREQUEST_TYPEFieldUpdateOperationsInput: ["set"],
    RequestUpdatesocialLinksInput: ["set", "push"],
    EnumREQUEST_STATUSFieldUpdateOperationsInput: ["set"],
    UserUpdateOneWithoutRequestsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    UserCreateNestedOneWithoutNotificationsInput: ["create", "connectOrCreate", "connect"],
    UserCreateNestedOneWithoutActivityInput: ["create", "connectOrCreate", "connect"],
    UserUpdateOneWithoutNotificationsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    UserUpdateOneWithoutActivityInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    TenantCreateNestedOneWithoutExperiencesInput: ["create", "connectOrCreate", "connect"],
    ExperienceAvailabilityCreateNestedManyWithoutExperienceInput: ["create", "connectOrCreate", "createMany", "connect"],
    ExperienceCreategalleryInput: ["set"],
    AggregateRatingCreateNestedOneWithoutExperienceInput: ["create", "connectOrCreate", "connect"],
    UserCreateNestedManyWithoutLikedExperiencesInput: ["create", "connectOrCreate", "connect"],
    ExperienceCreatelikedByIdsInput: ["set"],
    LocationCreateNestedManyWithoutExperienceInput: ["create", "connectOrCreate", "createMany", "connect"],
    PriceCreateNestedManyWithoutExperienceInput: ["create", "connectOrCreate", "createMany", "connect"],
    PostCreateNestedManyWithoutExperienceInput: ["create", "connectOrCreate", "createMany", "connect"],
    TenantUpdateOneRequiredWithoutExperiencesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    EnumEXPERIENCE_CATEGORYFieldUpdateOperationsInput: ["set"],
    ExperienceAvailabilityUpdateManyWithoutExperienceInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ExperienceUpdategalleryInput: ["set", "push"],
    IntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
    AggregateRatingUpdateOneWithoutExperienceInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    EnumPUBLISH_STATUSFieldUpdateOperationsInput: ["set"],
    UserUpdateManyWithoutLikedExperiencesInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ExperienceUpdatelikedByIdsInput: ["set", "push"],
    LocationUpdateManyWithoutExperienceInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    PriceUpdateManyWithoutExperienceInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    PostUpdateManyWithoutExperienceInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ExperienceCreateNestedOneWithoutAvailabilityInput: ["create", "connectOrCreate", "connect"],
    ExperienceUpdateOneRequiredWithoutAvailabilityInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    EnumAVAILABILITY_TYPEFieldUpdateOperationsInput: ["set"],
    PriceCreateNestedManyWithoutCurrencyInput: ["create", "connectOrCreate", "createMany", "connect"],
    PriceUpdateManyWithoutCurrencyInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    CurrencyCreateNestedOneWithoutPricesInput: ["create", "connectOrCreate", "connect"],
    ExperienceCreateNestedOneWithoutPriceInput: ["create", "connectOrCreate", "connect"],
    BookingOrderLineItemCreateNestedManyWithoutLineItemPriceInput: ["create", "connectOrCreate", "createMany", "connect"],
    CurrencyUpdateOneRequiredWithoutPricesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    ExperienceUpdateOneRequiredWithoutPriceInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    BookingOrderLineItemUpdateManyWithoutLineItemPriceInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    TopicListsCreatelistsInput: ["set"],
    EnumLIST_TYPEFieldUpdateOperationsInput: ["set"],
    TopicListsUpdatelistsInput: ["set", "push"],
    PriceCreateNestedOneWithoutBookingLineItemsInput: ["create", "connectOrCreate", "connect"],
    BookingOrderCreateNestedOneWithoutItemsInput: ["create", "connectOrCreate", "connect"],
    PriceUpdateOneRequiredWithoutBookingLineItemsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    BookingOrderUpdateOneRequiredWithoutItemsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    UserCreateNestedOneWithoutBookingsInput: ["create", "connectOrCreate", "connect"],
    TenantCreateNestedOneWithoutBookingOrdersInput: ["create", "connectOrCreate", "connect"],
    BookingOrderLineItemCreateNestedManyWithoutBookingInput: ["create", "connectOrCreate", "createMany", "connect"],
    EnumBOOKING_ORDER_STATUSFieldUpdateOperationsInput: ["set"],
    UserUpdateOneRequiredWithoutBookingsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    TenantUpdateOneRequiredWithoutBookingOrdersInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    BookingOrderLineItemUpdateManyWithoutBookingInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ExperienceCreateNestedOneWithoutLocationsInput: ["create", "connectOrCreate", "connect"],
    TenantCreateNestedOneWithoutLocationsInput: ["create", "connectOrCreate", "connect"],
    EnumADDRESS_TYPEFieldUpdateOperationsInput: ["set"],
    ExperienceUpdateOneWithoutLocationsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    TenantUpdateOneWithoutLocationsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    NestedStringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "isSet"],
    NestedStringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    NestedDateTimeNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "isSet"],
    NestedBoolNullableFilter: ["equals", "not", "isSet"],
    NestedDateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedStringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max", "isSet"],
    NestedIntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "isSet"],
    NestedStringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    NestedIntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedDateTimeNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max", "isSet"],
    NestedBoolNullableWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max", "isSet"],
    NestedDateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    NestedBoolFilter: ["equals", "not"],
    NestedBoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
    NestedFloatFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedFloatWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    NestedIntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max", "isSet"],
    NestedFloatNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "isSet"],
    NestedEnumMEDIA_TYPEFilter: ["equals", "in", "notIn", "not"],
    NestedEnumMEDIA_TYPEWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumREACTION_TYPEFilter: ["equals", "in", "notIn", "not"],
    NestedEnumREACTION_TYPEWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumREQUEST_TYPEFilter: ["equals", "in", "notIn", "not"],
    NestedEnumREQUEST_STATUSFilter: ["equals", "in", "notIn", "not"],
    NestedEnumREQUEST_TYPEWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumREQUEST_STATUSWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumEXPERIENCE_CATEGORYFilter: ["equals", "in", "notIn", "not"],
    NestedEnumPUBLISH_STATUSFilter: ["equals", "in", "notIn", "not"],
    NestedEnumEXPERIENCE_CATEGORYWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedIntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    NestedEnumPUBLISH_STATUSWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumAVAILABILITY_TYPEFilter: ["equals", "in", "notIn", "not"],
    NestedEnumAVAILABILITY_TYPEWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumLIST_TYPEFilter: ["equals", "in", "notIn", "not"],
    NestedEnumLIST_TYPEWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumBOOKING_ORDER_STATUSFilter: ["equals", "in", "notIn", "not"],
    NestedEnumBOOKING_ORDER_STATUSWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumADDRESS_TYPEFilter: ["equals", "in", "notIn", "not"],
    NestedEnumADDRESS_TYPEWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    TenantCreateWithoutUsersInput: ["id", "name", "slug", "avatar", "coverImage", "experienceImages", "Experiences", "BookingOrders", "Locations", "createdAt", "updatedAt"],
    TenantCreateOrConnectWithoutUsersInput: ["where", "create"],
    NotificationSettingsCreateWithoutUserInput: ["id", "newArrivals", "bookingOrOrderUpdates", "promotions", "saleAlerts", "newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "createdAt", "updatedAt"],
    NotificationSettingsCreateOrConnectWithoutUserInput: ["where", "create"],
    NotificationCreateWithoutUserInput: ["id", "description", "Actor", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationCreateOrConnectWithoutUserInput: ["where", "create"],
    NotificationCreateManyUserInputEnvelope: ["data"],
    NotificationCreateWithoutActorInput: ["id", "description", "User", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationCreateOrConnectWithoutActorInput: ["where", "create"],
    NotificationCreateManyActorInputEnvelope: ["data"],
    UserCreateWithoutFollowersInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "followerIds", "LikedExperiences", "experienceIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutFollowersInput: ["where", "create"],
    UserCreateWithoutFollowingInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "followingIds", "Followers", "followerIds", "LikedExperiences", "experienceIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutFollowingInput: ["where", "create"],
    ExperienceCreateWithoutLikedByInput: ["id", "Tenant", "productLink", "stripeProductId", "title", "description", "category", "Availability", "photo", "gallery", "location", "duration", "AggregatedRating", "publishStatus", "likedByIds", "Locations", "Price", "Posts", "createdAt", "updatedAt"],
    ExperienceCreateOrConnectWithoutLikedByInput: ["where", "create"],
    RequestCreateWithoutReporterInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "createdAt", "updatedAt"],
    RequestCreateOrConnectWithoutReporterInput: ["where", "create"],
    RequestCreateManyReporterInputEnvelope: ["data"],
    PostCreateWithoutAuthorInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Experience", "Comments", "Reactions", "postLink", "createdAt", "updatedAt"],
    PostCreateOrConnectWithoutAuthorInput: ["where", "create"],
    PostCreateManyAuthorInputEnvelope: ["data"],
    CommentCreateWithoutAuthorInput: ["id", "text", "Post", "Replies", "Reactions", "createdAt", "updatedAt"],
    CommentCreateOrConnectWithoutAuthorInput: ["where", "create"],
    CommentCreateManyAuthorInputEnvelope: ["data"],
    ReplyCreateWithoutAuthorInput: ["id", "text", "Comment", "Reactions", "createdAt", "updatedAt"],
    ReplyCreateOrConnectWithoutAuthorInput: ["where", "create"],
    ReplyCreateManyAuthorInputEnvelope: ["data"],
    ReactionCreateWithoutAuthorInput: ["id", "type", "Post", "Comment", "Reply", "createdAt", "updatedAt"],
    ReactionCreateOrConnectWithoutAuthorInput: ["where", "create"],
    ReactionCreateManyAuthorInputEnvelope: ["data"],
    BookingOrderCreateWithoutBuyerInput: ["id", "status", "SelectedPaymentType", "stripePaymentReference", "Tenant", "Items", "createdAt", "updatedAt"],
    BookingOrderCreateOrConnectWithoutBuyerInput: ["where", "create"],
    BookingOrderCreateManyBuyerInputEnvelope: ["data"],
    TenantUpsertWithoutUsersInput: ["update", "create"],
    TenantUpdateWithoutUsersInput: ["name", "slug", "avatar", "coverImage", "experienceImages", "Experiences", "BookingOrders", "Locations", "createdAt", "updatedAt"],
    NotificationSettingsUpsertWithoutUserInput: ["update", "create"],
    NotificationSettingsUpdateWithoutUserInput: ["newArrivals", "bookingOrOrderUpdates", "promotions", "saleAlerts", "newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "createdAt", "updatedAt"],
    NotificationUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
    NotificationUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
    NotificationUpdateManyWithWhereWithoutUserInput: ["where", "data"],
    NotificationScalarWhereInput: ["AND", "OR", "NOT", "id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationUpsertWithWhereUniqueWithoutActorInput: ["where", "update", "create"],
    NotificationUpdateWithWhereUniqueWithoutActorInput: ["where", "data"],
    NotificationUpdateManyWithWhereWithoutActorInput: ["where", "data"],
    UserUpsertWithWhereUniqueWithoutFollowersInput: ["where", "update", "create"],
    UserUpdateWithWhereUniqueWithoutFollowersInput: ["where", "data"],
    UserUpdateManyWithWhereWithoutFollowersInput: ["where", "data"],
    UserScalarWhereInput: ["AND", "OR", "NOT", "tenantId", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "followingIds", "followerIds", "experienceIds", "createdAt", "updatedAt"],
    UserUpsertWithWhereUniqueWithoutFollowingInput: ["where", "update", "create"],
    UserUpdateWithWhereUniqueWithoutFollowingInput: ["where", "data"],
    UserUpdateManyWithWhereWithoutFollowingInput: ["where", "data"],
    ExperienceUpsertWithWhereUniqueWithoutLikedByInput: ["where", "update", "create"],
    ExperienceUpdateWithWhereUniqueWithoutLikedByInput: ["where", "data"],
    ExperienceUpdateManyWithWhereWithoutLikedByInput: ["where", "data"],
    ExperienceScalarWhereInput: ["AND", "OR", "NOT", "id", "tenantId", "productLink", "stripeProductId", "title", "description", "category", "photo", "gallery", "location", "duration", "publishStatus", "likedByIds", "createdAt", "updatedAt"],
    RequestUpsertWithWhereUniqueWithoutReporterInput: ["where", "update", "create"],
    RequestUpdateWithWhereUniqueWithoutReporterInput: ["where", "data"],
    RequestUpdateManyWithWhereWithoutReporterInput: ["where", "data"],
    RequestScalarWhereInput: ["AND", "OR", "NOT", "id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    PostUpsertWithWhereUniqueWithoutAuthorInput: ["where", "update", "create"],
    PostUpdateWithWhereUniqueWithoutAuthorInput: ["where", "data"],
    PostUpdateManyWithWhereWithoutAuthorInput: ["where", "data"],
    PostScalarWhereInput: ["AND", "OR", "NOT", "id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "experienceId", "postLink", "createdAt", "updatedAt"],
    CommentUpsertWithWhereUniqueWithoutAuthorInput: ["where", "update", "create"],
    CommentUpdateWithWhereUniqueWithoutAuthorInput: ["where", "data"],
    CommentUpdateManyWithWhereWithoutAuthorInput: ["where", "data"],
    CommentScalarWhereInput: ["AND", "OR", "NOT", "id", "text", "postId", "authorId", "createdAt", "updatedAt"],
    ReplyUpsertWithWhereUniqueWithoutAuthorInput: ["where", "update", "create"],
    ReplyUpdateWithWhereUniqueWithoutAuthorInput: ["where", "data"],
    ReplyUpdateManyWithWhereWithoutAuthorInput: ["where", "data"],
    ReplyScalarWhereInput: ["AND", "OR", "NOT", "id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    ReactionUpsertWithWhereUniqueWithoutAuthorInput: ["where", "update", "create"],
    ReactionUpdateWithWhereUniqueWithoutAuthorInput: ["where", "data"],
    ReactionUpdateManyWithWhereWithoutAuthorInput: ["where", "data"],
    ReactionScalarWhereInput: ["AND", "OR", "NOT", "id", "type", "postId", "commentId", "replyId", "authorId", "createdAt", "updatedAt"],
    BookingOrderUpsertWithWhereUniqueWithoutBuyerInput: ["where", "update", "create"],
    BookingOrderUpdateWithWhereUniqueWithoutBuyerInput: ["where", "data"],
    BookingOrderUpdateManyWithWhereWithoutBuyerInput: ["where", "data"],
    BookingOrderScalarWhereInput: ["AND", "OR", "NOT", "id", "status", "SelectedPaymentType", "stripePaymentReference", "buyerId", "tenantId", "createdAt", "updatedAt"],
    UserCreateWithoutNotificationSettingsInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "LikedExperiences", "experienceIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutNotificationSettingsInput: ["where", "create"],
    UserUpsertWithoutNotificationSettingsInput: ["update", "create"],
    UserUpdateWithoutNotificationSettingsInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "LikedExperiences", "experienceIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt"],
    UserCreateWithoutTenantInput: ["uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "LikedExperiences", "experienceIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutTenantInput: ["where", "create"],
    UserCreateManyTenantInputEnvelope: ["data"],
    ExperienceCreateWithoutTenantInput: ["id", "productLink", "stripeProductId", "title", "description", "category", "Availability", "photo", "gallery", "location", "duration", "AggregatedRating", "publishStatus", "LikedBy", "likedByIds", "Locations", "Price", "Posts", "createdAt", "updatedAt"],
    ExperienceCreateOrConnectWithoutTenantInput: ["where", "create"],
    ExperienceCreateManyTenantInputEnvelope: ["data"],
    BookingOrderCreateWithoutTenantInput: ["id", "status", "SelectedPaymentType", "stripePaymentReference", "Buyer", "Items", "createdAt", "updatedAt"],
    BookingOrderCreateOrConnectWithoutTenantInput: ["where", "create"],
    BookingOrderCreateManyTenantInputEnvelope: ["data"],
    LocationCreateWithoutTenantInput: ["id", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "Experience", "createdAt", "updatedAt"],
    LocationCreateOrConnectWithoutTenantInput: ["where", "create"],
    LocationCreateManyTenantInputEnvelope: ["data"],
    UserUpsertWithWhereUniqueWithoutTenantInput: ["where", "update", "create"],
    UserUpdateWithWhereUniqueWithoutTenantInput: ["where", "data"],
    UserUpdateManyWithWhereWithoutTenantInput: ["where", "data"],
    ExperienceUpsertWithWhereUniqueWithoutTenantInput: ["where", "update", "create"],
    ExperienceUpdateWithWhereUniqueWithoutTenantInput: ["where", "data"],
    ExperienceUpdateManyWithWhereWithoutTenantInput: ["where", "data"],
    BookingOrderUpsertWithWhereUniqueWithoutTenantInput: ["where", "update", "create"],
    BookingOrderUpdateWithWhereUniqueWithoutTenantInput: ["where", "data"],
    BookingOrderUpdateManyWithWhereWithoutTenantInput: ["where", "data"],
    LocationUpsertWithWhereUniqueWithoutTenantInput: ["where", "update", "create"],
    LocationUpdateWithWhereUniqueWithoutTenantInput: ["where", "data"],
    LocationUpdateManyWithWhereWithoutTenantInput: ["where", "data"],
    LocationScalarWhereInput: ["AND", "OR", "NOT", "id", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "experienceId", "tenantId", "createdAt", "updatedAt"],
    ExperienceCreateWithoutAggregatedRatingInput: ["id", "Tenant", "productLink", "stripeProductId", "title", "description", "category", "Availability", "photo", "gallery", "location", "duration", "publishStatus", "LikedBy", "likedByIds", "Locations", "Price", "Posts", "createdAt", "updatedAt"],
    ExperienceCreateOrConnectWithoutAggregatedRatingInput: ["where", "create"],
    ExperienceUpsertWithoutAggregatedRatingInput: ["update", "create"],
    ExperienceUpdateWithoutAggregatedRatingInput: ["Tenant", "productLink", "stripeProductId", "title", "description", "category", "Availability", "photo", "gallery", "location", "duration", "publishStatus", "LikedBy", "likedByIds", "Locations", "Price", "Posts", "createdAt", "updatedAt"],
    UserCreateWithoutPostsInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "LikedExperiences", "experienceIds", "Requests", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutPostsInput: ["where", "create"],
    ExperienceCreateWithoutPostsInput: ["id", "Tenant", "productLink", "stripeProductId", "title", "description", "category", "Availability", "photo", "gallery", "location", "duration", "AggregatedRating", "publishStatus", "LikedBy", "likedByIds", "Locations", "Price", "createdAt", "updatedAt"],
    ExperienceCreateOrConnectWithoutPostsInput: ["where", "create"],
    CommentCreateWithoutPostInput: ["id", "text", "Author", "Replies", "Reactions", "createdAt", "updatedAt"],
    CommentCreateOrConnectWithoutPostInput: ["where", "create"],
    CommentCreateManyPostInputEnvelope: ["data"],
    ReactionCreateWithoutPostInput: ["id", "type", "Comment", "Reply", "Author", "createdAt", "updatedAt"],
    ReactionCreateOrConnectWithoutPostInput: ["where", "create"],
    ReactionCreateManyPostInputEnvelope: ["data"],
    UserUpsertWithoutPostsInput: ["update", "create"],
    UserUpdateWithoutPostsInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "LikedExperiences", "experienceIds", "Requests", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt"],
    ExperienceUpsertWithoutPostsInput: ["update", "create"],
    ExperienceUpdateWithoutPostsInput: ["Tenant", "productLink", "stripeProductId", "title", "description", "category", "Availability", "photo", "gallery", "location", "duration", "AggregatedRating", "publishStatus", "LikedBy", "likedByIds", "Locations", "Price", "createdAt", "updatedAt"],
    CommentUpsertWithWhereUniqueWithoutPostInput: ["where", "update", "create"],
    CommentUpdateWithWhereUniqueWithoutPostInput: ["where", "data"],
    CommentUpdateManyWithWhereWithoutPostInput: ["where", "data"],
    ReactionUpsertWithWhereUniqueWithoutPostInput: ["where", "update", "create"],
    ReactionUpdateWithWhereUniqueWithoutPostInput: ["where", "data"],
    ReactionUpdateManyWithWhereWithoutPostInput: ["where", "data"],
    PostCreateWithoutCommentsInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "Experience", "Reactions", "postLink", "createdAt", "updatedAt"],
    PostCreateOrConnectWithoutCommentsInput: ["where", "create"],
    UserCreateWithoutCommentsInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "LikedExperiences", "experienceIds", "Requests", "Posts", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutCommentsInput: ["where", "create"],
    ReplyCreateWithoutCommentInput: ["id", "text", "Author", "Reactions", "createdAt", "updatedAt"],
    ReplyCreateOrConnectWithoutCommentInput: ["where", "create"],
    ReplyCreateManyCommentInputEnvelope: ["data"],
    ReactionCreateWithoutCommentInput: ["id", "type", "Post", "Reply", "Author", "createdAt", "updatedAt"],
    ReactionCreateOrConnectWithoutCommentInput: ["where", "create"],
    ReactionCreateManyCommentInputEnvelope: ["data"],
    PostUpsertWithoutCommentsInput: ["update", "create"],
    PostUpdateWithoutCommentsInput: ["type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "Experience", "Reactions", "postLink", "createdAt", "updatedAt"],
    UserUpsertWithoutCommentsInput: ["update", "create"],
    UserUpdateWithoutCommentsInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "LikedExperiences", "experienceIds", "Requests", "Posts", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt"],
    ReplyUpsertWithWhereUniqueWithoutCommentInput: ["where", "update", "create"],
    ReplyUpdateWithWhereUniqueWithoutCommentInput: ["where", "data"],
    ReplyUpdateManyWithWhereWithoutCommentInput: ["where", "data"],
    ReactionUpsertWithWhereUniqueWithoutCommentInput: ["where", "update", "create"],
    ReactionUpdateWithWhereUniqueWithoutCommentInput: ["where", "data"],
    ReactionUpdateManyWithWhereWithoutCommentInput: ["where", "data"],
    CommentCreateWithoutRepliesInput: ["id", "text", "Post", "Author", "Reactions", "createdAt", "updatedAt"],
    CommentCreateOrConnectWithoutRepliesInput: ["where", "create"],
    UserCreateWithoutRepliesInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "LikedExperiences", "experienceIds", "Requests", "Posts", "Comments", "Reactions", "Bookings", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutRepliesInput: ["where", "create"],
    ReactionCreateWithoutReplyInput: ["id", "type", "Post", "Comment", "Author", "createdAt", "updatedAt"],
    ReactionCreateOrConnectWithoutReplyInput: ["where", "create"],
    ReactionCreateManyReplyInputEnvelope: ["data"],
    CommentUpsertWithoutRepliesInput: ["update", "create"],
    CommentUpdateWithoutRepliesInput: ["text", "Post", "Author", "Reactions", "createdAt", "updatedAt"],
    UserUpsertWithoutRepliesInput: ["update", "create"],
    UserUpdateWithoutRepliesInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "LikedExperiences", "experienceIds", "Requests", "Posts", "Comments", "Reactions", "Bookings", "createdAt", "updatedAt"],
    ReactionUpsertWithWhereUniqueWithoutReplyInput: ["where", "update", "create"],
    ReactionUpdateWithWhereUniqueWithoutReplyInput: ["where", "data"],
    ReactionUpdateManyWithWhereWithoutReplyInput: ["where", "data"],
    PostCreateWithoutReactionsInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "Experience", "Comments", "postLink", "createdAt", "updatedAt"],
    PostCreateOrConnectWithoutReactionsInput: ["where", "create"],
    CommentCreateWithoutReactionsInput: ["id", "text", "Post", "Author", "Replies", "createdAt", "updatedAt"],
    CommentCreateOrConnectWithoutReactionsInput: ["where", "create"],
    ReplyCreateWithoutReactionsInput: ["id", "text", "Comment", "Author", "createdAt", "updatedAt"],
    ReplyCreateOrConnectWithoutReactionsInput: ["where", "create"],
    UserCreateWithoutReactionsInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "LikedExperiences", "experienceIds", "Requests", "Posts", "Comments", "Replies", "Bookings", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutReactionsInput: ["where", "create"],
    PostUpsertWithoutReactionsInput: ["update", "create"],
    PostUpdateWithoutReactionsInput: ["type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "Experience", "Comments", "postLink", "createdAt", "updatedAt"],
    CommentUpsertWithoutReactionsInput: ["update", "create"],
    CommentUpdateWithoutReactionsInput: ["text", "Post", "Author", "Replies", "createdAt", "updatedAt"],
    ReplyUpsertWithoutReactionsInput: ["update", "create"],
    ReplyUpdateWithoutReactionsInput: ["text", "Comment", "Author", "createdAt", "updatedAt"],
    UserUpsertWithoutReactionsInput: ["update", "create"],
    UserUpdateWithoutReactionsInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "LikedExperiences", "experienceIds", "Requests", "Posts", "Comments", "Replies", "Bookings", "createdAt", "updatedAt"],
    UserCreateWithoutRequestsInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "LikedExperiences", "experienceIds", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutRequestsInput: ["where", "create"],
    UserUpsertWithoutRequestsInput: ["update", "create"],
    UserUpdateWithoutRequestsInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "LikedExperiences", "experienceIds", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt"],
    UserCreateWithoutNotificationsInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Activity", "Following", "followingIds", "Followers", "followerIds", "LikedExperiences", "experienceIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutNotificationsInput: ["where", "create"],
    UserCreateWithoutActivityInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Following", "followingIds", "Followers", "followerIds", "LikedExperiences", "experienceIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutActivityInput: ["where", "create"],
    UserUpsertWithoutNotificationsInput: ["update", "create"],
    UserUpdateWithoutNotificationsInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Activity", "Following", "followingIds", "Followers", "followerIds", "LikedExperiences", "experienceIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt"],
    UserUpsertWithoutActivityInput: ["update", "create"],
    UserUpdateWithoutActivityInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Following", "followingIds", "Followers", "followerIds", "LikedExperiences", "experienceIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt"],
    TenantCreateWithoutExperiencesInput: ["id", "name", "slug", "avatar", "coverImage", "experienceImages", "Users", "BookingOrders", "Locations", "createdAt", "updatedAt"],
    TenantCreateOrConnectWithoutExperiencesInput: ["where", "create"],
    ExperienceAvailabilityCreateWithoutExperienceInput: ["id", "startDate", "endDate", "availabilityType", "weekendSpacesAvailable", "dailySpacesAvailable", "hourlySpacesAvailable", "halfHourlySpacesAvailable", "createdAt", "updatedAt"],
    ExperienceAvailabilityCreateOrConnectWithoutExperienceInput: ["where", "create"],
    ExperienceAvailabilityCreateManyExperienceInputEnvelope: ["data"],
    AggregateRatingCreateWithoutExperienceInput: ["id", "ratingValue", "countedPosts", "allPosts", "ratingCount", "createdAt", "updatedAt"],
    AggregateRatingCreateOrConnectWithoutExperienceInput: ["where", "create"],
    UserCreateWithoutLikedExperiencesInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "experienceIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutLikedExperiencesInput: ["where", "create"],
    LocationCreateWithoutExperienceInput: ["id", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "Tenant", "createdAt", "updatedAt"],
    LocationCreateOrConnectWithoutExperienceInput: ["where", "create"],
    LocationCreateManyExperienceInputEnvelope: ["data"],
    PriceCreateWithoutExperienceInput: ["id", "priceInLowestDenomination", "displayPrice", "currency", "details", "BookingLineItems", "isBasePrice", "createdAt", "updatedAt"],
    PriceCreateOrConnectWithoutExperienceInput: ["where", "create"],
    PriceCreateManyExperienceInputEnvelope: ["data"],
    PostCreateWithoutExperienceInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "Comments", "Reactions", "postLink", "createdAt", "updatedAt"],
    PostCreateOrConnectWithoutExperienceInput: ["where", "create"],
    PostCreateManyExperienceInputEnvelope: ["data"],
    TenantUpsertWithoutExperiencesInput: ["update", "create"],
    TenantUpdateWithoutExperiencesInput: ["name", "slug", "avatar", "coverImage", "experienceImages", "Users", "BookingOrders", "Locations", "createdAt", "updatedAt"],
    ExperienceAvailabilityUpsertWithWhereUniqueWithoutExperienceInput: ["where", "update", "create"],
    ExperienceAvailabilityUpdateWithWhereUniqueWithoutExperienceInput: ["where", "data"],
    ExperienceAvailabilityUpdateManyWithWhereWithoutExperienceInput: ["where", "data"],
    ExperienceAvailabilityScalarWhereInput: ["AND", "OR", "NOT", "id", "experienceId", "startDate", "endDate", "availabilityType", "weekendSpacesAvailable", "dailySpacesAvailable", "hourlySpacesAvailable", "halfHourlySpacesAvailable", "createdAt", "updatedAt"],
    AggregateRatingUpsertWithoutExperienceInput: ["update", "create"],
    AggregateRatingUpdateWithoutExperienceInput: ["ratingValue", "countedPosts", "allPosts", "ratingCount", "createdAt", "updatedAt"],
    UserUpsertWithWhereUniqueWithoutLikedExperiencesInput: ["where", "update", "create"],
    UserUpdateWithWhereUniqueWithoutLikedExperiencesInput: ["where", "data"],
    UserUpdateManyWithWhereWithoutLikedExperiencesInput: ["where", "data"],
    LocationUpsertWithWhereUniqueWithoutExperienceInput: ["where", "update", "create"],
    LocationUpdateWithWhereUniqueWithoutExperienceInput: ["where", "data"],
    LocationUpdateManyWithWhereWithoutExperienceInput: ["where", "data"],
    PriceUpsertWithWhereUniqueWithoutExperienceInput: ["where", "update", "create"],
    PriceUpdateWithWhereUniqueWithoutExperienceInput: ["where", "data"],
    PriceUpdateManyWithWhereWithoutExperienceInput: ["where", "data"],
    PriceScalarWhereInput: ["AND", "OR", "NOT", "id", "priceInLowestDenomination", "displayPrice", "currencyId", "details", "experienceId", "isBasePrice", "createdAt", "updatedAt"],
    PostUpsertWithWhereUniqueWithoutExperienceInput: ["where", "update", "create"],
    PostUpdateWithWhereUniqueWithoutExperienceInput: ["where", "data"],
    PostUpdateManyWithWhereWithoutExperienceInput: ["where", "data"],
    ExperienceCreateWithoutAvailabilityInput: ["id", "Tenant", "productLink", "stripeProductId", "title", "description", "category", "photo", "gallery", "location", "duration", "AggregatedRating", "publishStatus", "LikedBy", "likedByIds", "Locations", "Price", "Posts", "createdAt", "updatedAt"],
    ExperienceCreateOrConnectWithoutAvailabilityInput: ["where", "create"],
    ExperienceUpsertWithoutAvailabilityInput: ["update", "create"],
    ExperienceUpdateWithoutAvailabilityInput: ["Tenant", "productLink", "stripeProductId", "title", "description", "category", "photo", "gallery", "location", "duration", "AggregatedRating", "publishStatus", "LikedBy", "likedByIds", "Locations", "Price", "Posts", "createdAt", "updatedAt"],
    PriceCreateWithoutCurrencyInput: ["id", "priceInLowestDenomination", "displayPrice", "details", "Experience", "BookingLineItems", "isBasePrice", "createdAt", "updatedAt"],
    PriceCreateOrConnectWithoutCurrencyInput: ["where", "create"],
    PriceCreateManyCurrencyInputEnvelope: ["data"],
    PriceUpsertWithWhereUniqueWithoutCurrencyInput: ["where", "update", "create"],
    PriceUpdateWithWhereUniqueWithoutCurrencyInput: ["where", "data"],
    PriceUpdateManyWithWhereWithoutCurrencyInput: ["where", "data"],
    CurrencyCreateWithoutPricesInput: ["id", "name", "symbol", "code", "createdAt", "updatedAt"],
    CurrencyCreateOrConnectWithoutPricesInput: ["where", "create"],
    ExperienceCreateWithoutPriceInput: ["id", "Tenant", "productLink", "stripeProductId", "title", "description", "category", "Availability", "photo", "gallery", "location", "duration", "AggregatedRating", "publishStatus", "LikedBy", "likedByIds", "Locations", "Posts", "createdAt", "updatedAt"],
    ExperienceCreateOrConnectWithoutPriceInput: ["where", "create"],
    BookingOrderLineItemCreateWithoutLineItemPriceInput: ["id", "Booking", "createdAt", "updatedAt"],
    BookingOrderLineItemCreateOrConnectWithoutLineItemPriceInput: ["where", "create"],
    BookingOrderLineItemCreateManyLineItemPriceInputEnvelope: ["data"],
    CurrencyUpsertWithoutPricesInput: ["update", "create"],
    CurrencyUpdateWithoutPricesInput: ["name", "symbol", "code", "createdAt", "updatedAt"],
    ExperienceUpsertWithoutPriceInput: ["update", "create"],
    ExperienceUpdateWithoutPriceInput: ["Tenant", "productLink", "stripeProductId", "title", "description", "category", "Availability", "photo", "gallery", "location", "duration", "AggregatedRating", "publishStatus", "LikedBy", "likedByIds", "Locations", "Posts", "createdAt", "updatedAt"],
    BookingOrderLineItemUpsertWithWhereUniqueWithoutLineItemPriceInput: ["where", "update", "create"],
    BookingOrderLineItemUpdateWithWhereUniqueWithoutLineItemPriceInput: ["where", "data"],
    BookingOrderLineItemUpdateManyWithWhereWithoutLineItemPriceInput: ["where", "data"],
    BookingOrderLineItemScalarWhereInput: ["AND", "OR", "NOT", "id", "priceId", "bookingId", "createdAt", "updatedAt"],
    PriceCreateWithoutBookingLineItemsInput: ["id", "priceInLowestDenomination", "displayPrice", "currency", "details", "Experience", "isBasePrice", "createdAt", "updatedAt"],
    PriceCreateOrConnectWithoutBookingLineItemsInput: ["where", "create"],
    BookingOrderCreateWithoutItemsInput: ["id", "status", "SelectedPaymentType", "stripePaymentReference", "Buyer", "Tenant", "createdAt", "updatedAt"],
    BookingOrderCreateOrConnectWithoutItemsInput: ["where", "create"],
    PriceUpsertWithoutBookingLineItemsInput: ["update", "create"],
    PriceUpdateWithoutBookingLineItemsInput: ["priceInLowestDenomination", "displayPrice", "currency", "details", "Experience", "isBasePrice", "createdAt", "updatedAt"],
    BookingOrderUpsertWithoutItemsInput: ["update", "create"],
    BookingOrderUpdateWithoutItemsInput: ["status", "SelectedPaymentType", "stripePaymentReference", "Buyer", "Tenant", "createdAt", "updatedAt"],
    UserCreateWithoutBookingsInput: ["Tenant", "uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "LikedExperiences", "experienceIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutBookingsInput: ["where", "create"],
    TenantCreateWithoutBookingOrdersInput: ["id", "name", "slug", "avatar", "coverImage", "experienceImages", "Users", "Experiences", "Locations", "createdAt", "updatedAt"],
    TenantCreateOrConnectWithoutBookingOrdersInput: ["where", "create"],
    BookingOrderLineItemCreateWithoutBookingInput: ["id", "LineItemPrice", "createdAt", "updatedAt"],
    BookingOrderLineItemCreateOrConnectWithoutBookingInput: ["where", "create"],
    BookingOrderLineItemCreateManyBookingInputEnvelope: ["data"],
    UserUpsertWithoutBookingsInput: ["update", "create"],
    UserUpdateWithoutBookingsInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "LikedExperiences", "experienceIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    TenantUpsertWithoutBookingOrdersInput: ["update", "create"],
    TenantUpdateWithoutBookingOrdersInput: ["name", "slug", "avatar", "coverImage", "experienceImages", "Users", "Experiences", "Locations", "createdAt", "updatedAt"],
    BookingOrderLineItemUpsertWithWhereUniqueWithoutBookingInput: ["where", "update", "create"],
    BookingOrderLineItemUpdateWithWhereUniqueWithoutBookingInput: ["where", "data"],
    BookingOrderLineItemUpdateManyWithWhereWithoutBookingInput: ["where", "data"],
    ExperienceCreateWithoutLocationsInput: ["id", "Tenant", "productLink", "stripeProductId", "title", "description", "category", "Availability", "photo", "gallery", "location", "duration", "AggregatedRating", "publishStatus", "LikedBy", "likedByIds", "Price", "Posts", "createdAt", "updatedAt"],
    ExperienceCreateOrConnectWithoutLocationsInput: ["where", "create"],
    TenantCreateWithoutLocationsInput: ["id", "name", "slug", "avatar", "coverImage", "experienceImages", "Users", "Experiences", "BookingOrders", "createdAt", "updatedAt"],
    TenantCreateOrConnectWithoutLocationsInput: ["where", "create"],
    ExperienceUpsertWithoutLocationsInput: ["update", "create"],
    ExperienceUpdateWithoutLocationsInput: ["Tenant", "productLink", "stripeProductId", "title", "description", "category", "Availability", "photo", "gallery", "location", "duration", "AggregatedRating", "publishStatus", "LikedBy", "likedByIds", "Price", "Posts", "createdAt", "updatedAt"],
    TenantUpsertWithoutLocationsInput: ["update", "create"],
    TenantUpdateWithoutLocationsInput: ["name", "slug", "avatar", "coverImage", "experienceImages", "Users", "Experiences", "BookingOrders", "createdAt", "updatedAt"],
    NotificationCreateManyUserInput: ["id", "description", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationCreateManyActorInput: ["id", "description", "userId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    RequestCreateManyReporterInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "createdAt", "updatedAt"],
    PostCreateManyAuthorInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "experienceId", "postLink", "createdAt", "updatedAt"],
    CommentCreateManyAuthorInput: ["id", "text", "postId", "createdAt", "updatedAt"],
    ReplyCreateManyAuthorInput: ["id", "text", "commentId", "createdAt", "updatedAt"],
    ReactionCreateManyAuthorInput: ["id", "type", "postId", "commentId", "replyId", "createdAt", "updatedAt"],
    BookingOrderCreateManyBuyerInput: ["id", "status", "SelectedPaymentType", "stripePaymentReference", "tenantId", "createdAt", "updatedAt"],
    NotificationUpdateWithoutUserInput: ["description", "Actor", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationUpdateWithoutActorInput: ["description", "User", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    UserUpdateWithoutFollowersInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "followerIds", "LikedExperiences", "experienceIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt"],
    UserUpdateWithoutFollowingInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "followingIds", "Followers", "followerIds", "LikedExperiences", "experienceIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt"],
    ExperienceUpdateWithoutLikedByInput: ["Tenant", "productLink", "stripeProductId", "title", "description", "category", "Availability", "photo", "gallery", "location", "duration", "AggregatedRating", "publishStatus", "likedByIds", "Locations", "Price", "Posts", "createdAt", "updatedAt"],
    RequestUpdateWithoutReporterInput: ["reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "createdAt", "updatedAt"],
    PostUpdateWithoutAuthorInput: ["type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Experience", "Comments", "Reactions", "postLink", "createdAt", "updatedAt"],
    CommentUpdateWithoutAuthorInput: ["text", "Post", "Replies", "Reactions", "createdAt", "updatedAt"],
    ReplyUpdateWithoutAuthorInput: ["text", "Comment", "Reactions", "createdAt", "updatedAt"],
    ReactionUpdateWithoutAuthorInput: ["type", "Post", "Comment", "Reply", "createdAt", "updatedAt"],
    BookingOrderUpdateWithoutBuyerInput: ["status", "SelectedPaymentType", "stripePaymentReference", "Tenant", "Items", "createdAt", "updatedAt"],
    UserCreateManyTenantInput: ["uid", "uuid", "id", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "followingIds", "followerIds", "experienceIds", "createdAt", "updatedAt"],
    ExperienceCreateManyTenantInput: ["id", "productLink", "stripeProductId", "title", "description", "category", "photo", "gallery", "location", "duration", "publishStatus", "likedByIds", "createdAt", "updatedAt"],
    BookingOrderCreateManyTenantInput: ["id", "status", "SelectedPaymentType", "stripePaymentReference", "buyerId", "createdAt", "updatedAt"],
    LocationCreateManyTenantInput: ["id", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "experienceId", "createdAt", "updatedAt"],
    UserUpdateWithoutTenantInput: ["uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "LikedExperiences", "experienceIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt"],
    ExperienceUpdateWithoutTenantInput: ["productLink", "stripeProductId", "title", "description", "category", "Availability", "photo", "gallery", "location", "duration", "AggregatedRating", "publishStatus", "LikedBy", "likedByIds", "Locations", "Price", "Posts", "createdAt", "updatedAt"],
    BookingOrderUpdateWithoutTenantInput: ["status", "SelectedPaymentType", "stripePaymentReference", "Buyer", "Items", "createdAt", "updatedAt"],
    LocationUpdateWithoutTenantInput: ["longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "Experience", "createdAt", "updatedAt"],
    CommentCreateManyPostInput: ["id", "text", "authorId", "createdAt", "updatedAt"],
    ReactionCreateManyPostInput: ["id", "type", "commentId", "replyId", "authorId", "createdAt", "updatedAt"],
    CommentUpdateWithoutPostInput: ["text", "Author", "Replies", "Reactions", "createdAt", "updatedAt"],
    ReactionUpdateWithoutPostInput: ["type", "Comment", "Reply", "Author", "createdAt", "updatedAt"],
    ReplyCreateManyCommentInput: ["id", "text", "authorId", "createdAt", "updatedAt"],
    ReactionCreateManyCommentInput: ["id", "type", "postId", "replyId", "authorId", "createdAt", "updatedAt"],
    ReplyUpdateWithoutCommentInput: ["text", "Author", "Reactions", "createdAt", "updatedAt"],
    ReactionUpdateWithoutCommentInput: ["type", "Post", "Reply", "Author", "createdAt", "updatedAt"],
    ReactionCreateManyReplyInput: ["id", "type", "postId", "commentId", "authorId", "createdAt", "updatedAt"],
    ReactionUpdateWithoutReplyInput: ["type", "Post", "Comment", "Author", "createdAt", "updatedAt"],
    ExperienceAvailabilityCreateManyExperienceInput: ["id", "startDate", "endDate", "availabilityType", "weekendSpacesAvailable", "dailySpacesAvailable", "hourlySpacesAvailable", "halfHourlySpacesAvailable", "createdAt", "updatedAt"],
    LocationCreateManyExperienceInput: ["id", "longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "tenantId", "createdAt", "updatedAt"],
    PriceCreateManyExperienceInput: ["id", "priceInLowestDenomination", "displayPrice", "currencyId", "details", "isBasePrice", "createdAt", "updatedAt"],
    PostCreateManyExperienceInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "postLink", "createdAt", "updatedAt"],
    ExperienceAvailabilityUpdateWithoutExperienceInput: ["startDate", "endDate", "availabilityType", "weekendSpacesAvailable", "dailySpacesAvailable", "hourlySpacesAvailable", "halfHourlySpacesAvailable", "createdAt", "updatedAt"],
    UserUpdateWithoutLikedExperiencesInput: ["Tenant", "uid", "uuid", "username", "email", "roles", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "experienceIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "Bookings", "createdAt", "updatedAt"],
    LocationUpdateWithoutExperienceInput: ["longitude", "latitude", "googleMapsUrl", "googlePlacesId", "type", "line1", "line2", "city", "district", "country", "code", "isDefault", "Tenant", "createdAt", "updatedAt"],
    PriceUpdateWithoutExperienceInput: ["priceInLowestDenomination", "displayPrice", "currency", "details", "BookingLineItems", "isBasePrice", "createdAt", "updatedAt"],
    PostUpdateWithoutExperienceInput: ["type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "Comments", "Reactions", "postLink", "createdAt", "updatedAt"],
    PriceCreateManyCurrencyInput: ["id", "priceInLowestDenomination", "displayPrice", "details", "experienceId", "isBasePrice", "createdAt", "updatedAt"],
    PriceUpdateWithoutCurrencyInput: ["priceInLowestDenomination", "displayPrice", "details", "Experience", "BookingLineItems", "isBasePrice", "createdAt", "updatedAt"],
    BookingOrderLineItemCreateManyLineItemPriceInput: ["id", "bookingId", "createdAt", "updatedAt"],
    BookingOrderLineItemUpdateWithoutLineItemPriceInput: ["Booking", "createdAt", "updatedAt"],
    BookingOrderLineItemCreateManyBookingInput: ["id", "priceId", "createdAt", "updatedAt"],
    BookingOrderLineItemUpdateWithoutBookingInput: ["LineItemPrice", "createdAt", "updatedAt"]
};
function applyInputTypesEnhanceMap(inputTypesEnhanceMap) {
    for (const inputTypeEnhanceMapKey of Object.keys(inputTypesEnhanceMap)) {
        const inputTypeName = inputTypeEnhanceMapKey;
        const typeConfig = inputTypesEnhanceMap[inputTypeName];
        const typeClass = inputTypes[inputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, inputsInfo[inputTypeName]);
    }
}
exports.applyInputTypesEnhanceMap = applyInputTypesEnhanceMap;
