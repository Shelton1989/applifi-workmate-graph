"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyInputTypesEnhanceMap = exports.applyOutputTypesEnhanceMap = exports.applyModelsEnhanceMap = exports.applyRelationResolversEnhanceMap = exports.applyArgsTypesEnhanceMap = exports.applyResolversEnhanceMap = void 0;
const tslib_1 = require("tslib");
const tslib = tslib_1.__importStar(require("tslib"));
const crudResolvers = tslib_1.__importStar(require("./resolvers/crud/resolvers-crud.index"));
const argsTypes = tslib_1.__importStar(require("./resolvers/crud/args.index"));
const actionResolvers = tslib_1.__importStar(require("./resolvers/crud/resolvers-actions.index"));
const relationResolvers = tslib_1.__importStar(require("./resolvers/relations/resolvers.index"));
const models = tslib_1.__importStar(require("./models"));
const outputTypes = tslib_1.__importStar(require("./resolvers/outputs"));
const inputTypes = tslib_1.__importStar(require("./resolvers/inputs"));
const crudResolversMap = {
    User: crudResolvers.UserCrudResolver,
    NotificationSettings: crudResolvers.NotificationSettingsCrudResolver,
    Topic: crudResolvers.TopicCrudResolver,
    SeasonSeries: crudResolvers.SeasonSeriesCrudResolver,
    Episode: crudResolvers.EpisodeCrudResolver,
    Post: crudResolvers.PostCrudResolver,
    Comment: crudResolvers.CommentCrudResolver,
    Reply: crudResolvers.ReplyCrudResolver,
    Reaction: crudResolvers.ReactionCrudResolver,
    Request: crudResolvers.RequestCrudResolver,
    Notification: crudResolvers.NotificationCrudResolver
};
const actionResolversMap = {
    User: {
        user: actionResolvers.FindUniqueUserResolver,
        findFirstUser: actionResolvers.FindFirstUserResolver,
        users: actionResolvers.FindManyUserResolver,
        createUser: actionResolvers.CreateUserResolver,
        createManyUser: actionResolvers.CreateManyUserResolver,
        deleteUser: actionResolvers.DeleteUserResolver,
        updateUser: actionResolvers.UpdateUserResolver,
        deleteManyUser: actionResolvers.DeleteManyUserResolver,
        updateManyUser: actionResolvers.UpdateManyUserResolver,
        upsertUser: actionResolvers.UpsertUserResolver,
        aggregateUser: actionResolvers.AggregateUserResolver,
        groupByUser: actionResolvers.GroupByUserResolver
    },
    NotificationSettings: {
        findUniqueNotificationSettings: actionResolvers.FindUniqueNotificationSettingsResolver,
        findFirstNotificationSettings: actionResolvers.FindFirstNotificationSettingsResolver,
        findManyNotificationSettings: actionResolvers.FindManyNotificationSettingsResolver,
        createNotificationSettings: actionResolvers.CreateNotificationSettingsResolver,
        createManyNotificationSettings: actionResolvers.CreateManyNotificationSettingsResolver,
        deleteNotificationSettings: actionResolvers.DeleteNotificationSettingsResolver,
        updateNotificationSettings: actionResolvers.UpdateNotificationSettingsResolver,
        deleteManyNotificationSettings: actionResolvers.DeleteManyNotificationSettingsResolver,
        updateManyNotificationSettings: actionResolvers.UpdateManyNotificationSettingsResolver,
        upsertNotificationSettings: actionResolvers.UpsertNotificationSettingsResolver,
        aggregateNotificationSettings: actionResolvers.AggregateNotificationSettingsResolver,
        groupByNotificationSettings: actionResolvers.GroupByNotificationSettingsResolver
    },
    Topic: {
        topic: actionResolvers.FindUniqueTopicResolver,
        findFirstTopic: actionResolvers.FindFirstTopicResolver,
        topics: actionResolvers.FindManyTopicResolver,
        createTopic: actionResolvers.CreateTopicResolver,
        createManyTopic: actionResolvers.CreateManyTopicResolver,
        deleteTopic: actionResolvers.DeleteTopicResolver,
        updateTopic: actionResolvers.UpdateTopicResolver,
        deleteManyTopic: actionResolvers.DeleteManyTopicResolver,
        updateManyTopic: actionResolvers.UpdateManyTopicResolver,
        upsertTopic: actionResolvers.UpsertTopicResolver,
        aggregateTopic: actionResolvers.AggregateTopicResolver,
        groupByTopic: actionResolvers.GroupByTopicResolver
    },
    SeasonSeries: {
        findUniqueSeasonSeries: actionResolvers.FindUniqueSeasonSeriesResolver,
        findFirstSeasonSeries: actionResolvers.FindFirstSeasonSeriesResolver,
        findManySeasonSeries: actionResolvers.FindManySeasonSeriesResolver,
        createSeasonSeries: actionResolvers.CreateSeasonSeriesResolver,
        createManySeasonSeries: actionResolvers.CreateManySeasonSeriesResolver,
        deleteSeasonSeries: actionResolvers.DeleteSeasonSeriesResolver,
        updateSeasonSeries: actionResolvers.UpdateSeasonSeriesResolver,
        deleteManySeasonSeries: actionResolvers.DeleteManySeasonSeriesResolver,
        updateManySeasonSeries: actionResolvers.UpdateManySeasonSeriesResolver,
        upsertSeasonSeries: actionResolvers.UpsertSeasonSeriesResolver,
        aggregateSeasonSeries: actionResolvers.AggregateSeasonSeriesResolver,
        groupBySeasonSeries: actionResolvers.GroupBySeasonSeriesResolver
    },
    Episode: {
        episode: actionResolvers.FindUniqueEpisodeResolver,
        findFirstEpisode: actionResolvers.FindFirstEpisodeResolver,
        episodes: actionResolvers.FindManyEpisodeResolver,
        createEpisode: actionResolvers.CreateEpisodeResolver,
        createManyEpisode: actionResolvers.CreateManyEpisodeResolver,
        deleteEpisode: actionResolvers.DeleteEpisodeResolver,
        updateEpisode: actionResolvers.UpdateEpisodeResolver,
        deleteManyEpisode: actionResolvers.DeleteManyEpisodeResolver,
        updateManyEpisode: actionResolvers.UpdateManyEpisodeResolver,
        upsertEpisode: actionResolvers.UpsertEpisodeResolver,
        aggregateEpisode: actionResolvers.AggregateEpisodeResolver,
        groupByEpisode: actionResolvers.GroupByEpisodeResolver
    },
    Post: {
        post: actionResolvers.FindUniquePostResolver,
        findFirstPost: actionResolvers.FindFirstPostResolver,
        posts: actionResolvers.FindManyPostResolver,
        createPost: actionResolvers.CreatePostResolver,
        createManyPost: actionResolvers.CreateManyPostResolver,
        deletePost: actionResolvers.DeletePostResolver,
        updatePost: actionResolvers.UpdatePostResolver,
        deleteManyPost: actionResolvers.DeleteManyPostResolver,
        updateManyPost: actionResolvers.UpdateManyPostResolver,
        upsertPost: actionResolvers.UpsertPostResolver,
        aggregatePost: actionResolvers.AggregatePostResolver,
        groupByPost: actionResolvers.GroupByPostResolver
    },
    Comment: {
        comment: actionResolvers.FindUniqueCommentResolver,
        findFirstComment: actionResolvers.FindFirstCommentResolver,
        comments: actionResolvers.FindManyCommentResolver,
        createComment: actionResolvers.CreateCommentResolver,
        createManyComment: actionResolvers.CreateManyCommentResolver,
        deleteComment: actionResolvers.DeleteCommentResolver,
        updateComment: actionResolvers.UpdateCommentResolver,
        deleteManyComment: actionResolvers.DeleteManyCommentResolver,
        updateManyComment: actionResolvers.UpdateManyCommentResolver,
        upsertComment: actionResolvers.UpsertCommentResolver,
        aggregateComment: actionResolvers.AggregateCommentResolver,
        groupByComment: actionResolvers.GroupByCommentResolver
    },
    Reply: {
        reply: actionResolvers.FindUniqueReplyResolver,
        findFirstReply: actionResolvers.FindFirstReplyResolver,
        replies: actionResolvers.FindManyReplyResolver,
        createReply: actionResolvers.CreateReplyResolver,
        createManyReply: actionResolvers.CreateManyReplyResolver,
        deleteReply: actionResolvers.DeleteReplyResolver,
        updateReply: actionResolvers.UpdateReplyResolver,
        deleteManyReply: actionResolvers.DeleteManyReplyResolver,
        updateManyReply: actionResolvers.UpdateManyReplyResolver,
        upsertReply: actionResolvers.UpsertReplyResolver,
        aggregateReply: actionResolvers.AggregateReplyResolver,
        groupByReply: actionResolvers.GroupByReplyResolver
    },
    Reaction: {
        reaction: actionResolvers.FindUniqueReactionResolver,
        findFirstReaction: actionResolvers.FindFirstReactionResolver,
        reactions: actionResolvers.FindManyReactionResolver,
        createReaction: actionResolvers.CreateReactionResolver,
        createManyReaction: actionResolvers.CreateManyReactionResolver,
        deleteReaction: actionResolvers.DeleteReactionResolver,
        updateReaction: actionResolvers.UpdateReactionResolver,
        deleteManyReaction: actionResolvers.DeleteManyReactionResolver,
        updateManyReaction: actionResolvers.UpdateManyReactionResolver,
        upsertReaction: actionResolvers.UpsertReactionResolver,
        aggregateReaction: actionResolvers.AggregateReactionResolver,
        groupByReaction: actionResolvers.GroupByReactionResolver
    },
    Request: {
        request: actionResolvers.FindUniqueRequestResolver,
        findFirstRequest: actionResolvers.FindFirstRequestResolver,
        requests: actionResolvers.FindManyRequestResolver,
        createRequest: actionResolvers.CreateRequestResolver,
        createManyRequest: actionResolvers.CreateManyRequestResolver,
        deleteRequest: actionResolvers.DeleteRequestResolver,
        updateRequest: actionResolvers.UpdateRequestResolver,
        deleteManyRequest: actionResolvers.DeleteManyRequestResolver,
        updateManyRequest: actionResolvers.UpdateManyRequestResolver,
        upsertRequest: actionResolvers.UpsertRequestResolver,
        aggregateRequest: actionResolvers.AggregateRequestResolver,
        groupByRequest: actionResolvers.GroupByRequestResolver
    },
    Notification: {
        notification: actionResolvers.FindUniqueNotificationResolver,
        findFirstNotification: actionResolvers.FindFirstNotificationResolver,
        notifications: actionResolvers.FindManyNotificationResolver,
        createNotification: actionResolvers.CreateNotificationResolver,
        createManyNotification: actionResolvers.CreateManyNotificationResolver,
        deleteNotification: actionResolvers.DeleteNotificationResolver,
        updateNotification: actionResolvers.UpdateNotificationResolver,
        deleteManyNotification: actionResolvers.DeleteManyNotificationResolver,
        updateManyNotification: actionResolvers.UpdateManyNotificationResolver,
        upsertNotification: actionResolvers.UpsertNotificationResolver,
        aggregateNotification: actionResolvers.AggregateNotificationResolver,
        groupByNotification: actionResolvers.GroupByNotificationResolver
    }
};
const crudResolversInfo = {
    User: ["user", "findFirstUser", "users", "createUser", "createManyUser", "deleteUser", "updateUser", "deleteManyUser", "updateManyUser", "upsertUser", "aggregateUser", "groupByUser"],
    NotificationSettings: ["findUniqueNotificationSettings", "findFirstNotificationSettings", "findManyNotificationSettings", "createNotificationSettings", "createManyNotificationSettings", "deleteNotificationSettings", "updateNotificationSettings", "deleteManyNotificationSettings", "updateManyNotificationSettings", "upsertNotificationSettings", "aggregateNotificationSettings", "groupByNotificationSettings"],
    Topic: ["topic", "findFirstTopic", "topics", "createTopic", "createManyTopic", "deleteTopic", "updateTopic", "deleteManyTopic", "updateManyTopic", "upsertTopic", "aggregateTopic", "groupByTopic"],
    SeasonSeries: ["findUniqueSeasonSeries", "findFirstSeasonSeries", "findManySeasonSeries", "createSeasonSeries", "createManySeasonSeries", "deleteSeasonSeries", "updateSeasonSeries", "deleteManySeasonSeries", "updateManySeasonSeries", "upsertSeasonSeries", "aggregateSeasonSeries", "groupBySeasonSeries"],
    Episode: ["episode", "findFirstEpisode", "episodes", "createEpisode", "createManyEpisode", "deleteEpisode", "updateEpisode", "deleteManyEpisode", "updateManyEpisode", "upsertEpisode", "aggregateEpisode", "groupByEpisode"],
    Post: ["post", "findFirstPost", "posts", "createPost", "createManyPost", "deletePost", "updatePost", "deleteManyPost", "updateManyPost", "upsertPost", "aggregatePost", "groupByPost"],
    Comment: ["comment", "findFirstComment", "comments", "createComment", "createManyComment", "deleteComment", "updateComment", "deleteManyComment", "updateManyComment", "upsertComment", "aggregateComment", "groupByComment"],
    Reply: ["reply", "findFirstReply", "replies", "createReply", "createManyReply", "deleteReply", "updateReply", "deleteManyReply", "updateManyReply", "upsertReply", "aggregateReply", "groupByReply"],
    Reaction: ["reaction", "findFirstReaction", "reactions", "createReaction", "createManyReaction", "deleteReaction", "updateReaction", "deleteManyReaction", "updateManyReaction", "upsertReaction", "aggregateReaction", "groupByReaction"],
    Request: ["request", "findFirstRequest", "requests", "createRequest", "createManyRequest", "deleteRequest", "updateRequest", "deleteManyRequest", "updateManyRequest", "upsertRequest", "aggregateRequest", "groupByRequest"],
    Notification: ["notification", "findFirstNotification", "notifications", "createNotification", "createManyNotification", "deleteNotification", "updateNotification", "deleteManyNotification", "updateManyNotification", "upsertNotification", "aggregateNotification", "groupByNotification"]
};
const argsInfo = {
    FindUniqueUserArgs: ["where"],
    FindFirstUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateUserArgs: ["data"],
    CreateManyUserArgs: ["data"],
    DeleteUserArgs: ["where"],
    UpdateUserArgs: ["data", "where"],
    DeleteManyUserArgs: ["where"],
    UpdateManyUserArgs: ["data", "where"],
    UpsertUserArgs: ["where", "create", "update"],
    AggregateUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueNotificationSettingsArgs: ["where"],
    FindFirstNotificationSettingsArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyNotificationSettingsArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateNotificationSettingsArgs: ["data"],
    CreateManyNotificationSettingsArgs: ["data"],
    DeleteNotificationSettingsArgs: ["where"],
    UpdateNotificationSettingsArgs: ["data", "where"],
    DeleteManyNotificationSettingsArgs: ["where"],
    UpdateManyNotificationSettingsArgs: ["data", "where"],
    UpsertNotificationSettingsArgs: ["where", "create", "update"],
    AggregateNotificationSettingsArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByNotificationSettingsArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueTopicArgs: ["where"],
    FindFirstTopicArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyTopicArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateTopicArgs: ["data"],
    CreateManyTopicArgs: ["data"],
    DeleteTopicArgs: ["where"],
    UpdateTopicArgs: ["data", "where"],
    DeleteManyTopicArgs: ["where"],
    UpdateManyTopicArgs: ["data", "where"],
    UpsertTopicArgs: ["where", "create", "update"],
    AggregateTopicArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByTopicArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueSeasonSeriesArgs: ["where"],
    FindFirstSeasonSeriesArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManySeasonSeriesArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateSeasonSeriesArgs: ["data"],
    CreateManySeasonSeriesArgs: ["data"],
    DeleteSeasonSeriesArgs: ["where"],
    UpdateSeasonSeriesArgs: ["data", "where"],
    DeleteManySeasonSeriesArgs: ["where"],
    UpdateManySeasonSeriesArgs: ["data", "where"],
    UpsertSeasonSeriesArgs: ["where", "create", "update"],
    AggregateSeasonSeriesArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupBySeasonSeriesArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueEpisodeArgs: ["where"],
    FindFirstEpisodeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyEpisodeArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateEpisodeArgs: ["data"],
    CreateManyEpisodeArgs: ["data"],
    DeleteEpisodeArgs: ["where"],
    UpdateEpisodeArgs: ["data", "where"],
    DeleteManyEpisodeArgs: ["where"],
    UpdateManyEpisodeArgs: ["data", "where"],
    UpsertEpisodeArgs: ["where", "create", "update"],
    AggregateEpisodeArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByEpisodeArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniquePostArgs: ["where"],
    FindFirstPostArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyPostArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreatePostArgs: ["data"],
    CreateManyPostArgs: ["data"],
    DeletePostArgs: ["where"],
    UpdatePostArgs: ["data", "where"],
    DeleteManyPostArgs: ["where"],
    UpdateManyPostArgs: ["data", "where"],
    UpsertPostArgs: ["where", "create", "update"],
    AggregatePostArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByPostArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueCommentArgs: ["where"],
    FindFirstCommentArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyCommentArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateCommentArgs: ["data"],
    CreateManyCommentArgs: ["data"],
    DeleteCommentArgs: ["where"],
    UpdateCommentArgs: ["data", "where"],
    DeleteManyCommentArgs: ["where"],
    UpdateManyCommentArgs: ["data", "where"],
    UpsertCommentArgs: ["where", "create", "update"],
    AggregateCommentArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByCommentArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueReplyArgs: ["where"],
    FindFirstReplyArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyReplyArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateReplyArgs: ["data"],
    CreateManyReplyArgs: ["data"],
    DeleteReplyArgs: ["where"],
    UpdateReplyArgs: ["data", "where"],
    DeleteManyReplyArgs: ["where"],
    UpdateManyReplyArgs: ["data", "where"],
    UpsertReplyArgs: ["where", "create", "update"],
    AggregateReplyArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByReplyArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueReactionArgs: ["where"],
    FindFirstReactionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyReactionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateReactionArgs: ["data"],
    CreateManyReactionArgs: ["data"],
    DeleteReactionArgs: ["where"],
    UpdateReactionArgs: ["data", "where"],
    DeleteManyReactionArgs: ["where"],
    UpdateManyReactionArgs: ["data", "where"],
    UpsertReactionArgs: ["where", "create", "update"],
    AggregateReactionArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByReactionArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueRequestArgs: ["where"],
    FindFirstRequestArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyRequestArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateRequestArgs: ["data"],
    CreateManyRequestArgs: ["data"],
    DeleteRequestArgs: ["where"],
    UpdateRequestArgs: ["data", "where"],
    DeleteManyRequestArgs: ["where"],
    UpdateManyRequestArgs: ["data", "where"],
    UpsertRequestArgs: ["where", "create", "update"],
    AggregateRequestArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByRequestArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueNotificationArgs: ["where"],
    FindFirstNotificationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyNotificationArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateNotificationArgs: ["data"],
    CreateManyNotificationArgs: ["data"],
    DeleteNotificationArgs: ["where"],
    UpdateNotificationArgs: ["data", "where"],
    DeleteManyNotificationArgs: ["where"],
    UpdateManyNotificationArgs: ["data", "where"],
    UpsertNotificationArgs: ["where", "create", "update"],
    AggregateNotificationArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByNotificationArgs: ["where", "orderBy", "by", "having", "take", "skip"]
};
function applyResolversEnhanceMap(resolversEnhanceMap) {
    for (const resolversEnhanceMapKey of Object.keys(resolversEnhanceMap)) {
        const modelName = resolversEnhanceMapKey;
        const crudTarget = crudResolversMap[modelName].prototype;
        const resolverActionsConfig = resolversEnhanceMap[modelName];
        const actionResolversConfig = actionResolversMap[modelName];
        if (resolverActionsConfig._all) {
            const allActionsDecorators = resolverActionsConfig._all;
            const resolverActionNames = crudResolversInfo[modelName];
            for (const resolverActionName of resolverActionNames) {
                const actionTarget = actionResolversConfig[resolverActionName].prototype;
                tslib.__decorate(allActionsDecorators, crudTarget, resolverActionName, null);
                tslib.__decorate(allActionsDecorators, actionTarget, resolverActionName, null);
            }
        }
        const resolverActionsToApply = Object.keys(resolverActionsConfig).filter(it => it !== "_all");
        for (const resolverActionName of resolverActionsToApply) {
            const decorators = resolverActionsConfig[resolverActionName];
            const actionTarget = actionResolversConfig[resolverActionName].prototype;
            tslib.__decorate(decorators, crudTarget, resolverActionName, null);
            tslib.__decorate(decorators, actionTarget, resolverActionName, null);
        }
    }
}
exports.applyResolversEnhanceMap = applyResolversEnhanceMap;
function applyArgsTypesEnhanceMap(argsTypesEnhanceMap) {
    for (const argsTypesEnhanceMapKey of Object.keys(argsTypesEnhanceMap)) {
        const argsTypeName = argsTypesEnhanceMapKey;
        const typeConfig = argsTypesEnhanceMap[argsTypeName];
        const typeClass = argsTypes[argsTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, argsInfo[argsTypeName]);
    }
}
exports.applyArgsTypesEnhanceMap = applyArgsTypesEnhanceMap;
const relationResolversMap = {
    User: relationResolvers.UserRelationsResolver,
    NotificationSettings: relationResolvers.NotificationSettingsRelationsResolver,
    Topic: relationResolvers.TopicRelationsResolver,
    SeasonSeries: relationResolvers.SeasonSeriesRelationsResolver,
    Episode: relationResolvers.EpisodeRelationsResolver,
    Post: relationResolvers.PostRelationsResolver,
    Comment: relationResolvers.CommentRelationsResolver,
    Reply: relationResolvers.ReplyRelationsResolver,
    Reaction: relationResolvers.ReactionRelationsResolver,
    Request: relationResolvers.RequestRelationsResolver,
    Notification: relationResolvers.NotificationRelationsResolver
};
const relationResolversInfo = {
    User: ["NotificationSettings", "Notifications", "Activity", "Following", "Followers", "Requests", "Posts", "Comments", "Replies", "Reactions"],
    NotificationSettings: ["User"],
    Topic: ["Reactions", "SeasonSeries", "Posts"],
    SeasonSeries: ["Topic", "Reactions", "Episodes", "Posts"],
    Episode: ["SeasonSeries", "Reactions", "Posts"],
    Post: ["Author", "Comments", "Reactions", "Topic", "SeasonSeries", "Episode"],
    Comment: ["Post", "Author", "Replies", "Reactions"],
    Reply: ["Comment", "Author", "Reactions"],
    Reaction: ["Post", "Comment", "Reply", "Author", "Topic", "SeasonSeries", "Episode"],
    Request: ["Reporter"],
    Notification: ["User", "Actor"]
};
function applyRelationResolversEnhanceMap(relationResolversEnhanceMap) {
    for (const relationResolversEnhanceMapKey of Object.keys(relationResolversEnhanceMap)) {
        const modelName = relationResolversEnhanceMapKey;
        const relationResolverTarget = relationResolversMap[modelName].prototype;
        const relationResolverActionsConfig = relationResolversEnhanceMap[modelName];
        if (relationResolverActionsConfig._all) {
            const allActionsDecorators = relationResolverActionsConfig._all;
            const relationResolverActionNames = relationResolversInfo[modelName];
            for (const relationResolverActionName of relationResolverActionNames) {
                tslib.__decorate(allActionsDecorators, relationResolverTarget, relationResolverActionName, null);
            }
        }
        const relationResolverActionsToApply = Object.keys(relationResolverActionsConfig).filter(it => it !== "_all");
        for (const relationResolverActionName of relationResolverActionsToApply) {
            const decorators = relationResolverActionsConfig[relationResolverActionName];
            tslib.__decorate(decorators, relationResolverTarget, relationResolverActionName, null);
        }
    }
}
exports.applyRelationResolversEnhanceMap = applyRelationResolversEnhanceMap;
function applyTypeClassEnhanceConfig(enhanceConfig, typeClass, typePrototype, typeFieldNames) {
    if (enhanceConfig.class) {
        tslib.__decorate(enhanceConfig.class, typeClass);
    }
    if (enhanceConfig.fields) {
        if (enhanceConfig.fields._all) {
            const allFieldsDecorators = enhanceConfig.fields._all;
            for (const typeFieldName of typeFieldNames) {
                tslib.__decorate(allFieldsDecorators, typePrototype, typeFieldName, void 0);
            }
        }
        const configFieldsToApply = Object.keys(enhanceConfig.fields).filter(it => it !== "_all");
        for (const typeFieldName of configFieldsToApply) {
            const fieldDecorators = enhanceConfig.fields[typeFieldName];
            tslib.__decorate(fieldDecorators, typePrototype, typeFieldName, void 0);
        }
    }
}
const modelsInfo = {
    User: ["uid", "id", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "followingIds", "followerIds", "createdAt", "updatedAt"],
    NotificationSettings: ["id", "newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "userId", "createdAt", "updatedAt"],
    Topic: ["id", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "genres", "creators", "authors", "artists", "producers", "directors", "publishers", "cast", "type", "topicType", "createdAt", "updatedAt"],
    SeasonSeries: ["id", "seasonOrSeriesNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "topicId", "createdAt", "updatedAt"],
    Episode: ["id", "episodeNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "seasonSeriesId", "createdAt", "updatedAt"],
    Post: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "topicId", "seasonSeriesId", "episodeId", "postLink", "createdAt", "updatedAt"],
    Comment: ["id", "text", "postId", "authorId", "createdAt", "updatedAt"],
    Reply: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    Reaction: ["id", "type", "postId", "commentId", "replyId", "authorId", "topicId", "seasonSeriesId", "episodeId", "createdAt", "updatedAt"],
    Request: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    Notification: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"]
};
function applyModelsEnhanceMap(modelsEnhanceMap) {
    for (const modelsEnhanceMapKey of Object.keys(modelsEnhanceMap)) {
        const modelName = modelsEnhanceMapKey;
        const modelConfig = modelsEnhanceMap[modelName];
        const modelClass = models[modelName];
        const modelTarget = modelClass.prototype;
        applyTypeClassEnhanceConfig(modelConfig, modelClass, modelTarget, modelsInfo[modelName]);
    }
}
exports.applyModelsEnhanceMap = applyModelsEnhanceMap;
const outputsInfo = {
    AggregateUser: ["_count", "_min", "_max"],
    UserGroupBy: ["uid", "id", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "followingIds", "followerIds", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateNotificationSettings: ["_count", "_min", "_max"],
    NotificationSettingsGroupBy: ["id", "newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "userId", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateTopic: ["_count", "_min", "_max"],
    TopicGroupBy: ["id", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "genres", "creators", "authors", "artists", "producers", "directors", "publishers", "cast", "type", "topicType", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateSeasonSeries: ["_count", "_avg", "_sum", "_min", "_max"],
    SeasonSeriesGroupBy: ["id", "seasonOrSeriesNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "topicId", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateEpisode: ["_count", "_avg", "_sum", "_min", "_max"],
    EpisodeGroupBy: ["id", "episodeNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "seasonSeriesId", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
    AggregatePost: ["_count", "_avg", "_sum", "_min", "_max"],
    PostGroupBy: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "topicId", "seasonSeriesId", "episodeId", "postLink", "createdAt", "updatedAt", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateComment: ["_count", "_min", "_max"],
    CommentGroupBy: ["id", "text", "postId", "authorId", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateReply: ["_count", "_min", "_max"],
    ReplyGroupBy: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateReaction: ["_count", "_min", "_max"],
    ReactionGroupBy: ["id", "type", "postId", "commentId", "replyId", "authorId", "topicId", "seasonSeriesId", "episodeId", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateRequest: ["_count", "_min", "_max"],
    RequestGroupBy: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "userId", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AggregateNotification: ["_count", "_min", "_max"],
    NotificationGroupBy: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt", "_count", "_min", "_max"],
    AffectedRowsOutput: ["count"],
    UserCount: ["Notifications", "Activity", "Following", "Followers", "Requests", "Posts", "Comments", "Replies", "Reactions"],
    UserCountAggregate: ["uid", "id", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "followingIds", "followerIds", "createdAt", "updatedAt", "_all"],
    UserMinAggregate: ["uid", "id", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "createdAt", "updatedAt"],
    UserMaxAggregate: ["uid", "id", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "createdAt", "updatedAt"],
    NotificationSettingsCountAggregate: ["id", "newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "userId", "createdAt", "updatedAt", "_all"],
    NotificationSettingsMinAggregate: ["id", "newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "userId", "createdAt", "updatedAt"],
    NotificationSettingsMaxAggregate: ["id", "newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "userId", "createdAt", "updatedAt"],
    TopicCount: ["Reactions", "SeasonSeries", "Posts"],
    TopicCountAggregate: ["id", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "genres", "creators", "authors", "artists", "producers", "directors", "publishers", "cast", "type", "topicType", "createdAt", "updatedAt", "_all"],
    TopicMinAggregate: ["id", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "type", "topicType", "createdAt", "updatedAt"],
    TopicMaxAggregate: ["id", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "type", "topicType", "createdAt", "updatedAt"],
    SeasonSeriesCount: ["Reactions", "Episodes", "Posts"],
    SeasonSeriesCountAggregate: ["id", "seasonOrSeriesNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "topicId", "createdAt", "updatedAt", "_all"],
    SeasonSeriesAvgAggregate: ["seasonOrSeriesNumber"],
    SeasonSeriesSumAggregate: ["seasonOrSeriesNumber"],
    SeasonSeriesMinAggregate: ["id", "seasonOrSeriesNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "topicId", "createdAt", "updatedAt"],
    SeasonSeriesMaxAggregate: ["id", "seasonOrSeriesNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "topicId", "createdAt", "updatedAt"],
    EpisodeCount: ["Reactions", "Posts"],
    EpisodeCountAggregate: ["id", "episodeNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "seasonSeriesId", "createdAt", "updatedAt", "_all"],
    EpisodeAvgAggregate: ["episodeNumber"],
    EpisodeSumAggregate: ["episodeNumber"],
    EpisodeMinAggregate: ["id", "episodeNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "seasonSeriesId", "createdAt", "updatedAt"],
    EpisodeMaxAggregate: ["id", "episodeNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "seasonSeriesId", "createdAt", "updatedAt"],
    PostCount: ["Comments", "Reactions"],
    PostCountAggregate: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "topicId", "seasonSeriesId", "episodeId", "postLink", "createdAt", "updatedAt", "_all"],
    PostAvgAggregate: ["rating"],
    PostSumAggregate: ["rating"],
    PostMinAggregate: ["id", "type", "caption", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "topicId", "seasonSeriesId", "episodeId", "postLink", "createdAt", "updatedAt"],
    PostMaxAggregate: ["id", "type", "caption", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "topicId", "seasonSeriesId", "episodeId", "postLink", "createdAt", "updatedAt"],
    CommentCount: ["Replies", "Reactions"],
    CommentCountAggregate: ["id", "text", "postId", "authorId", "createdAt", "updatedAt", "_all"],
    CommentMinAggregate: ["id", "text", "postId", "authorId", "createdAt", "updatedAt"],
    CommentMaxAggregate: ["id", "text", "postId", "authorId", "createdAt", "updatedAt"],
    ReplyCount: ["Reactions"],
    ReplyCountAggregate: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt", "_all"],
    ReplyMinAggregate: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    ReplyMaxAggregate: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    ReactionCountAggregate: ["id", "type", "postId", "commentId", "replyId", "authorId", "topicId", "seasonSeriesId", "episodeId", "createdAt", "updatedAt", "_all"],
    ReactionMinAggregate: ["id", "type", "postId", "commentId", "replyId", "authorId", "topicId", "seasonSeriesId", "episodeId", "createdAt", "updatedAt"],
    ReactionMaxAggregate: ["id", "type", "postId", "commentId", "replyId", "authorId", "topicId", "seasonSeriesId", "episodeId", "createdAt", "updatedAt"],
    RequestCountAggregate: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "userId", "createdAt", "updatedAt", "_all"],
    RequestMinAggregate: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    RequestMaxAggregate: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    NotificationCountAggregate: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt", "_all"],
    NotificationMinAggregate: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationMaxAggregate: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"]
};
function applyOutputTypesEnhanceMap(outputTypesEnhanceMap) {
    for (const outputTypeEnhanceMapKey of Object.keys(outputTypesEnhanceMap)) {
        const outputTypeName = outputTypeEnhanceMapKey;
        const typeConfig = outputTypesEnhanceMap[outputTypeName];
        const typeClass = outputTypes[outputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, outputsInfo[outputTypeName]);
    }
}
exports.applyOutputTypesEnhanceMap = applyOutputTypesEnhanceMap;
const inputsInfo = {
    UserWhereInput: ["AND", "OR", "NOT", "uid", "id", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    UserOrderByWithRelationInput: ["uid", "id", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    UserWhereUniqueInput: ["uid", "id", "username", "email"],
    UserOrderByWithAggregationInput: ["uid", "id", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "followingIds", "followerIds", "createdAt", "updatedAt", "_count", "_max", "_min"],
    UserScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "uid", "id", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "followingIds", "followerIds", "createdAt", "updatedAt"],
    NotificationSettingsWhereInput: ["AND", "OR", "NOT", "id", "newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "User", "userId", "createdAt", "updatedAt"],
    NotificationSettingsOrderByWithRelationInput: ["id", "newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "User", "userId", "createdAt", "updatedAt"],
    NotificationSettingsWhereUniqueInput: ["id", "userId"],
    NotificationSettingsOrderByWithAggregationInput: ["id", "newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "userId", "createdAt", "updatedAt", "_count", "_max", "_min"],
    NotificationSettingsScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "userId", "createdAt", "updatedAt"],
    TopicWhereInput: ["AND", "OR", "NOT", "id", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "genres", "creators", "authors", "artists", "producers", "directors", "publishers", "cast", "type", "Reactions", "SeasonSeries", "Posts", "topicType", "createdAt", "updatedAt"],
    TopicOrderByWithRelationInput: ["id", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "genres", "creators", "authors", "artists", "producers", "directors", "publishers", "cast", "type", "Reactions", "SeasonSeries", "Posts", "topicType", "createdAt", "updatedAt"],
    TopicWhereUniqueInput: ["id"],
    TopicOrderByWithAggregationInput: ["id", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "genres", "creators", "authors", "artists", "producers", "directors", "publishers", "cast", "type", "topicType", "createdAt", "updatedAt", "_count", "_max", "_min"],
    TopicScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "genres", "creators", "authors", "artists", "producers", "directors", "publishers", "cast", "type", "topicType", "createdAt", "updatedAt"],
    SeasonSeriesWhereInput: ["AND", "OR", "NOT", "id", "seasonOrSeriesNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "Topic", "topicId", "Reactions", "Episodes", "Posts", "createdAt", "updatedAt"],
    SeasonSeriesOrderByWithRelationInput: ["id", "seasonOrSeriesNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "Topic", "topicId", "Reactions", "Episodes", "Posts", "createdAt", "updatedAt"],
    SeasonSeriesWhereUniqueInput: ["id"],
    SeasonSeriesOrderByWithAggregationInput: ["id", "seasonOrSeriesNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "topicId", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
    SeasonSeriesScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "seasonOrSeriesNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "topicId", "createdAt", "updatedAt"],
    EpisodeWhereInput: ["AND", "OR", "NOT", "id", "episodeNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "SeasonSeries", "seasonSeriesId", "Reactions", "Posts", "createdAt", "updatedAt"],
    EpisodeOrderByWithRelationInput: ["id", "episodeNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "SeasonSeries", "seasonSeriesId", "Reactions", "Posts", "createdAt", "updatedAt"],
    EpisodeWhereUniqueInput: ["id"],
    EpisodeOrderByWithAggregationInput: ["id", "episodeNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "seasonSeriesId", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
    EpisodeScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "episodeNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "seasonSeriesId", "createdAt", "updatedAt"],
    PostWhereInput: ["AND", "OR", "NOT", "id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "authorId", "Comments", "Reactions", "Topic", "topicId", "SeasonSeries", "seasonSeriesId", "Episode", "episodeId", "postLink", "createdAt", "updatedAt"],
    PostOrderByWithRelationInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "authorId", "Comments", "Reactions", "Topic", "topicId", "SeasonSeries", "seasonSeriesId", "Episode", "episodeId", "postLink", "createdAt", "updatedAt"],
    PostWhereUniqueInput: ["id"],
    PostOrderByWithAggregationInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "topicId", "seasonSeriesId", "episodeId", "postLink", "createdAt", "updatedAt", "_count", "_avg", "_max", "_min", "_sum"],
    PostScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "topicId", "seasonSeriesId", "episodeId", "postLink", "createdAt", "updatedAt"],
    CommentWhereInput: ["AND", "OR", "NOT", "id", "text", "Post", "postId", "Author", "authorId", "Replies", "Reactions", "createdAt", "updatedAt"],
    CommentOrderByWithRelationInput: ["id", "text", "Post", "postId", "Author", "authorId", "Replies", "Reactions", "createdAt", "updatedAt"],
    CommentWhereUniqueInput: ["id"],
    CommentOrderByWithAggregationInput: ["id", "text", "postId", "authorId", "createdAt", "updatedAt", "_count", "_max", "_min"],
    CommentScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "text", "postId", "authorId", "createdAt", "updatedAt"],
    ReplyWhereInput: ["AND", "OR", "NOT", "id", "text", "Comment", "commentId", "Author", "authorId", "Reactions", "createdAt", "updatedAt"],
    ReplyOrderByWithRelationInput: ["id", "text", "Comment", "commentId", "Author", "authorId", "Reactions", "createdAt", "updatedAt"],
    ReplyWhereUniqueInput: ["id"],
    ReplyOrderByWithAggregationInput: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt", "_count", "_max", "_min"],
    ReplyScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    ReactionWhereInput: ["AND", "OR", "NOT", "id", "type", "Post", "postId", "Comment", "commentId", "Reply", "replyId", "Author", "authorId", "Topic", "topicId", "SeasonSeries", "seasonSeriesId", "Episode", "episodeId", "createdAt", "updatedAt"],
    ReactionOrderByWithRelationInput: ["id", "type", "Post", "postId", "Comment", "commentId", "Reply", "replyId", "Author", "authorId", "Topic", "topicId", "SeasonSeries", "seasonSeriesId", "Episode", "episodeId", "createdAt", "updatedAt"],
    ReactionWhereUniqueInput: ["id"],
    ReactionOrderByWithAggregationInput: ["id", "type", "postId", "commentId", "replyId", "authorId", "topicId", "seasonSeriesId", "episodeId", "createdAt", "updatedAt", "_count", "_max", "_min"],
    ReactionScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "type", "postId", "commentId", "replyId", "authorId", "topicId", "seasonSeriesId", "episodeId", "createdAt", "updatedAt"],
    RequestWhereInput: ["AND", "OR", "NOT", "id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "Reporter", "userId", "createdAt", "updatedAt"],
    RequestOrderByWithRelationInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "Reporter", "userId", "createdAt", "updatedAt"],
    RequestWhereUniqueInput: ["id"],
    RequestOrderByWithAggregationInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "userId", "createdAt", "updatedAt", "_count", "_max", "_min"],
    RequestScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    NotificationWhereInput: ["AND", "OR", "NOT", "id", "description", "User", "userId", "Actor", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationOrderByWithRelationInput: ["id", "description", "User", "userId", "Actor", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationWhereUniqueInput: ["id"],
    NotificationOrderByWithAggregationInput: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt", "_count", "_max", "_min"],
    NotificationScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    UserCreateInput: ["uid", "id", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    UserUpdateInput: ["uid", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    UserCreateManyInput: ["uid", "id", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "followingIds", "followerIds", "createdAt", "updatedAt"],
    UserUpdateManyMutationInput: ["uid", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "followingIds", "followerIds", "createdAt", "updatedAt"],
    NotificationSettingsCreateInput: ["id", "newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "User", "createdAt", "updatedAt"],
    NotificationSettingsUpdateInput: ["newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "User", "createdAt", "updatedAt"],
    NotificationSettingsCreateManyInput: ["id", "newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "userId", "createdAt", "updatedAt"],
    NotificationSettingsUpdateManyMutationInput: ["newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "createdAt", "updatedAt"],
    TopicCreateInput: ["id", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "genres", "creators", "authors", "artists", "producers", "directors", "publishers", "cast", "type", "Reactions", "SeasonSeries", "Posts", "topicType", "createdAt", "updatedAt"],
    TopicUpdateInput: ["title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "genres", "creators", "authors", "artists", "producers", "directors", "publishers", "cast", "type", "Reactions", "SeasonSeries", "Posts", "topicType", "createdAt", "updatedAt"],
    TopicCreateManyInput: ["id", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "genres", "creators", "authors", "artists", "producers", "directors", "publishers", "cast", "type", "topicType", "createdAt", "updatedAt"],
    TopicUpdateManyMutationInput: ["title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "genres", "creators", "authors", "artists", "producers", "directors", "publishers", "cast", "type", "topicType", "createdAt", "updatedAt"],
    SeasonSeriesCreateInput: ["id", "seasonOrSeriesNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "Topic", "Reactions", "Episodes", "Posts", "createdAt", "updatedAt"],
    SeasonSeriesUpdateInput: ["seasonOrSeriesNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "Topic", "Reactions", "Episodes", "Posts", "createdAt", "updatedAt"],
    SeasonSeriesCreateManyInput: ["id", "seasonOrSeriesNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "topicId", "createdAt", "updatedAt"],
    SeasonSeriesUpdateManyMutationInput: ["seasonOrSeriesNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "createdAt", "updatedAt"],
    EpisodeCreateInput: ["id", "episodeNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "SeasonSeries", "Reactions", "Posts", "createdAt", "updatedAt"],
    EpisodeUpdateInput: ["episodeNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "SeasonSeries", "Reactions", "Posts", "createdAt", "updatedAt"],
    EpisodeCreateManyInput: ["id", "episodeNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "seasonSeriesId", "createdAt", "updatedAt"],
    EpisodeUpdateManyMutationInput: ["episodeNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "createdAt", "updatedAt"],
    PostCreateInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "Comments", "Reactions", "Topic", "SeasonSeries", "Episode", "postLink", "createdAt", "updatedAt"],
    PostUpdateInput: ["type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "Comments", "Reactions", "Topic", "SeasonSeries", "Episode", "postLink", "createdAt", "updatedAt"],
    PostCreateManyInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "topicId", "seasonSeriesId", "episodeId", "postLink", "createdAt", "updatedAt"],
    PostUpdateManyMutationInput: ["type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "postLink", "createdAt", "updatedAt"],
    CommentCreateInput: ["id", "text", "Post", "Author", "Replies", "Reactions", "createdAt", "updatedAt"],
    CommentUpdateInput: ["text", "Post", "Author", "Replies", "Reactions", "createdAt", "updatedAt"],
    CommentCreateManyInput: ["id", "text", "postId", "authorId", "createdAt", "updatedAt"],
    CommentUpdateManyMutationInput: ["text", "createdAt", "updatedAt"],
    ReplyCreateInput: ["id", "text", "Comment", "Author", "Reactions", "createdAt", "updatedAt"],
    ReplyUpdateInput: ["text", "Comment", "Author", "Reactions", "createdAt", "updatedAt"],
    ReplyCreateManyInput: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    ReplyUpdateManyMutationInput: ["text", "createdAt", "updatedAt"],
    ReactionCreateInput: ["id", "type", "Post", "Comment", "Reply", "Author", "Topic", "SeasonSeries", "Episode", "createdAt", "updatedAt"],
    ReactionUpdateInput: ["type", "Post", "Comment", "Reply", "Author", "Topic", "SeasonSeries", "Episode", "createdAt", "updatedAt"],
    ReactionCreateManyInput: ["id", "type", "postId", "commentId", "replyId", "authorId", "topicId", "seasonSeriesId", "episodeId", "createdAt", "updatedAt"],
    ReactionUpdateManyMutationInput: ["type", "createdAt", "updatedAt"],
    RequestCreateInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "Reporter", "createdAt", "updatedAt"],
    RequestUpdateInput: ["reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "Reporter", "createdAt", "updatedAt"],
    RequestCreateManyInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    RequestUpdateManyMutationInput: ["reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "createdAt", "updatedAt"],
    NotificationCreateInput: ["id", "description", "User", "Actor", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationUpdateInput: ["description", "User", "Actor", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationCreateManyInput: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationUpdateManyMutationInput: ["description", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    StringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not"],
    EnumROLENullableFilter: ["equals", "in", "notIn", "not", "isSet"],
    StringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "isSet"],
    DateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    BoolFilter: ["equals", "not"],
    NotificationSettingsRelationFilter: ["is", "isNot"],
    NotificationListRelationFilter: ["every", "some", "none"],
    UserListRelationFilter: ["every", "some", "none"],
    StringNullableListFilter: ["equals", "has", "hasEvery", "hasSome", "isEmpty"],
    RequestListRelationFilter: ["every", "some", "none"],
    PostListRelationFilter: ["every", "some", "none"],
    CommentListRelationFilter: ["every", "some", "none"],
    ReplyListRelationFilter: ["every", "some", "none"],
    ReactionListRelationFilter: ["every", "some", "none"],
    NotificationOrderByRelationAggregateInput: ["_count"],
    UserOrderByRelationAggregateInput: ["_count"],
    RequestOrderByRelationAggregateInput: ["_count"],
    PostOrderByRelationAggregateInput: ["_count"],
    CommentOrderByRelationAggregateInput: ["_count"],
    ReplyOrderByRelationAggregateInput: ["_count"],
    ReactionOrderByRelationAggregateInput: ["_count"],
    UserCountOrderByAggregateInput: ["uid", "id", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "followingIds", "followerIds", "createdAt", "updatedAt"],
    UserMaxOrderByAggregateInput: ["uid", "id", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "createdAt", "updatedAt"],
    UserMinOrderByAggregateInput: ["uid", "id", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "createdAt", "updatedAt"],
    StringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "_count", "_min", "_max"],
    EnumROLENullableWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max", "isSet"],
    StringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "_count", "_min", "_max", "isSet"],
    DateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    BoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
    UserRelationFilter: ["is", "isNot"],
    NotificationSettingsCountOrderByAggregateInput: ["id", "newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "userId", "createdAt", "updatedAt"],
    NotificationSettingsMaxOrderByAggregateInput: ["id", "newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "userId", "createdAt", "updatedAt"],
    NotificationSettingsMinOrderByAggregateInput: ["id", "newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "userId", "createdAt", "updatedAt"],
    SeasonSeriesListRelationFilter: ["every", "some", "none"],
    EnumTOPIC_TYPEFilter: ["equals", "in", "notIn", "not"],
    SeasonSeriesOrderByRelationAggregateInput: ["_count"],
    TopicCountOrderByAggregateInput: ["id", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "genres", "creators", "authors", "artists", "producers", "directors", "publishers", "cast", "type", "topicType", "createdAt", "updatedAt"],
    TopicMaxOrderByAggregateInput: ["id", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "type", "topicType", "createdAt", "updatedAt"],
    TopicMinOrderByAggregateInput: ["id", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "type", "topicType", "createdAt", "updatedAt"],
    EnumTOPIC_TYPEWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    IntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    TopicRelationFilter: ["is", "isNot"],
    EpisodeListRelationFilter: ["every", "some", "none"],
    EpisodeOrderByRelationAggregateInput: ["_count"],
    SeasonSeriesCountOrderByAggregateInput: ["id", "seasonOrSeriesNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "topicId", "createdAt", "updatedAt"],
    SeasonSeriesAvgOrderByAggregateInput: ["seasonOrSeriesNumber"],
    SeasonSeriesMaxOrderByAggregateInput: ["id", "seasonOrSeriesNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "topicId", "createdAt", "updatedAt"],
    SeasonSeriesMinOrderByAggregateInput: ["id", "seasonOrSeriesNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "topicId", "createdAt", "updatedAt"],
    SeasonSeriesSumOrderByAggregateInput: ["seasonOrSeriesNumber"],
    IntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    SeasonSeriesRelationFilter: ["is", "isNot"],
    EpisodeCountOrderByAggregateInput: ["id", "episodeNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "seasonSeriesId", "createdAt", "updatedAt"],
    EpisodeAvgOrderByAggregateInput: ["episodeNumber"],
    EpisodeMaxOrderByAggregateInput: ["id", "episodeNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "seasonSeriesId", "createdAt", "updatedAt"],
    EpisodeMinOrderByAggregateInput: ["id", "episodeNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "seasonSeriesId", "createdAt", "updatedAt"],
    EpisodeSumOrderByAggregateInput: ["episodeNumber"],
    EnumMEDIA_TYPEFilter: ["equals", "in", "notIn", "not"],
    EpisodeRelationFilter: ["is", "isNot"],
    PostCountOrderByAggregateInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "topicId", "seasonSeriesId", "episodeId", "postLink", "createdAt", "updatedAt"],
    PostAvgOrderByAggregateInput: ["rating"],
    PostMaxOrderByAggregateInput: ["id", "type", "caption", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "topicId", "seasonSeriesId", "episodeId", "postLink", "createdAt", "updatedAt"],
    PostMinOrderByAggregateInput: ["id", "type", "caption", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "topicId", "seasonSeriesId", "episodeId", "postLink", "createdAt", "updatedAt"],
    PostSumOrderByAggregateInput: ["rating"],
    EnumMEDIA_TYPEWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    PostRelationFilter: ["is", "isNot"],
    CommentCountOrderByAggregateInput: ["id", "text", "postId", "authorId", "createdAt", "updatedAt"],
    CommentMaxOrderByAggregateInput: ["id", "text", "postId", "authorId", "createdAt", "updatedAt"],
    CommentMinOrderByAggregateInput: ["id", "text", "postId", "authorId", "createdAt", "updatedAt"],
    CommentRelationFilter: ["is", "isNot"],
    ReplyCountOrderByAggregateInput: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    ReplyMaxOrderByAggregateInput: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    ReplyMinOrderByAggregateInput: ["id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    EnumREACTION_TYPEFilter: ["equals", "in", "notIn", "not"],
    ReplyRelationFilter: ["is", "isNot"],
    ReactionCountOrderByAggregateInput: ["id", "type", "postId", "commentId", "replyId", "authorId", "topicId", "seasonSeriesId", "episodeId", "createdAt", "updatedAt"],
    ReactionMaxOrderByAggregateInput: ["id", "type", "postId", "commentId", "replyId", "authorId", "topicId", "seasonSeriesId", "episodeId", "createdAt", "updatedAt"],
    ReactionMinOrderByAggregateInput: ["id", "type", "postId", "commentId", "replyId", "authorId", "topicId", "seasonSeriesId", "episodeId", "createdAt", "updatedAt"],
    EnumREACTION_TYPEWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    EnumREQUEST_TYPEFilter: ["equals", "in", "notIn", "not"],
    EnumREQUEST_STATUSFilter: ["equals", "in", "notIn", "not"],
    RequestCountOrderByAggregateInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    RequestMaxOrderByAggregateInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    RequestMinOrderByAggregateInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    EnumREQUEST_TYPEWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    EnumREQUEST_STATUSWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NotificationCountOrderByAggregateInput: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationMaxOrderByAggregateInput: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationMinOrderByAggregateInput: ["id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationSettingsCreateNestedOneWithoutUserInput: ["create", "connectOrCreate", "connect"],
    NotificationCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
    NotificationCreateNestedManyWithoutActorInput: ["create", "connectOrCreate", "createMany", "connect"],
    UserCreateNestedManyWithoutFollowersInput: ["create", "connectOrCreate", "connect"],
    UserCreatefollowingIdsInput: ["set"],
    UserCreateNestedManyWithoutFollowingInput: ["create", "connectOrCreate", "connect"],
    UserCreatefollowerIdsInput: ["set"],
    RequestCreateNestedManyWithoutReporterInput: ["create", "connectOrCreate", "createMany", "connect"],
    PostCreateNestedManyWithoutAuthorInput: ["create", "connectOrCreate", "createMany", "connect"],
    CommentCreateNestedManyWithoutAuthorInput: ["create", "connectOrCreate", "createMany", "connect"],
    ReplyCreateNestedManyWithoutAuthorInput: ["create", "connectOrCreate", "createMany", "connect"],
    ReactionCreateNestedManyWithoutAuthorInput: ["create", "connectOrCreate", "createMany", "connect"],
    StringFieldUpdateOperationsInput: ["set"],
    NullableEnumROLEFieldUpdateOperationsInput: ["set", "unset"],
    NullableStringFieldUpdateOperationsInput: ["set", "unset"],
    DateTimeFieldUpdateOperationsInput: ["set"],
    BoolFieldUpdateOperationsInput: ["set"],
    NotificationSettingsUpdateOneWithoutUserInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    NotificationUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    NotificationUpdateManyWithoutActorInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    UserUpdateManyWithoutFollowersInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    UserUpdatefollowingIdsInput: ["set", "push"],
    UserUpdateManyWithoutFollowingInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    UserUpdatefollowerIdsInput: ["set", "push"],
    RequestUpdateManyWithoutReporterInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    PostUpdateManyWithoutAuthorInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    CommentUpdateManyWithoutAuthorInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ReplyUpdateManyWithoutAuthorInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ReactionUpdateManyWithoutAuthorInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    UserCreateNestedOneWithoutNotificationSettingsInput: ["create", "connectOrCreate", "connect"],
    UserUpdateOneWithoutNotificationSettingsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    TopicCreategenresInput: ["set"],
    TopicCreatecreatorsInput: ["set"],
    TopicCreateauthorsInput: ["set"],
    TopicCreateartistsInput: ["set"],
    TopicCreateproducersInput: ["set"],
    TopicCreatedirectorsInput: ["set"],
    TopicCreatepublishersInput: ["set"],
    TopicCreatecastInput: ["set"],
    ReactionCreateNestedManyWithoutTopicInput: ["create", "connectOrCreate", "createMany", "connect"],
    SeasonSeriesCreateNestedManyWithoutTopicInput: ["create", "connectOrCreate", "createMany", "connect"],
    PostCreateNestedManyWithoutTopicInput: ["create", "connectOrCreate", "createMany", "connect"],
    TopicUpdategenresInput: ["set", "push"],
    TopicUpdatecreatorsInput: ["set", "push"],
    TopicUpdateauthorsInput: ["set", "push"],
    TopicUpdateartistsInput: ["set", "push"],
    TopicUpdateproducersInput: ["set", "push"],
    TopicUpdatedirectorsInput: ["set", "push"],
    TopicUpdatepublishersInput: ["set", "push"],
    TopicUpdatecastInput: ["set", "push"],
    ReactionUpdateManyWithoutTopicInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    SeasonSeriesUpdateManyWithoutTopicInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    PostUpdateManyWithoutTopicInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    EnumTOPIC_TYPEFieldUpdateOperationsInput: ["set"],
    TopicCreateNestedOneWithoutSeasonSeriesInput: ["create", "connectOrCreate", "connect"],
    ReactionCreateNestedManyWithoutSeasonSeriesInput: ["create", "connectOrCreate", "createMany", "connect"],
    EpisodeCreateNestedManyWithoutSeasonSeriesInput: ["create", "connectOrCreate", "createMany", "connect"],
    PostCreateNestedManyWithoutSeasonSeriesInput: ["create", "connectOrCreate", "createMany", "connect"],
    IntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
    TopicUpdateOneRequiredWithoutSeasonSeriesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    ReactionUpdateManyWithoutSeasonSeriesInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    EpisodeUpdateManyWithoutSeasonSeriesInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    PostUpdateManyWithoutSeasonSeriesInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    SeasonSeriesCreateNestedOneWithoutEpisodesInput: ["create", "connectOrCreate", "connect"],
    ReactionCreateNestedManyWithoutEpisodeInput: ["create", "connectOrCreate", "createMany", "connect"],
    PostCreateNestedManyWithoutEpisodeInput: ["create", "connectOrCreate", "createMany", "connect"],
    SeasonSeriesUpdateOneRequiredWithoutEpisodesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    ReactionUpdateManyWithoutEpisodeInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    PostUpdateManyWithoutEpisodeInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    PostCreatemediaUrlInput: ["set"],
    UserCreateNestedOneWithoutPostsInput: ["create", "connectOrCreate", "connect"],
    CommentCreateNestedManyWithoutPostInput: ["create", "connectOrCreate", "createMany", "connect"],
    ReactionCreateNestedManyWithoutPostInput: ["create", "connectOrCreate", "createMany", "connect"],
    TopicCreateNestedOneWithoutPostsInput: ["create", "connectOrCreate", "connect"],
    SeasonSeriesCreateNestedOneWithoutPostsInput: ["create", "connectOrCreate", "connect"],
    EpisodeCreateNestedOneWithoutPostsInput: ["create", "connectOrCreate", "connect"],
    EnumMEDIA_TYPEFieldUpdateOperationsInput: ["set"],
    PostUpdatemediaUrlInput: ["set", "push"],
    UserUpdateOneRequiredWithoutPostsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    CommentUpdateManyWithoutPostInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ReactionUpdateManyWithoutPostInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    TopicUpdateOneWithoutPostsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    SeasonSeriesUpdateOneWithoutPostsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    EpisodeUpdateOneWithoutPostsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    PostCreateNestedOneWithoutCommentsInput: ["create", "connectOrCreate", "connect"],
    UserCreateNestedOneWithoutCommentsInput: ["create", "connectOrCreate", "connect"],
    ReplyCreateNestedManyWithoutCommentInput: ["create", "connectOrCreate", "createMany", "connect"],
    ReactionCreateNestedManyWithoutCommentInput: ["create", "connectOrCreate", "createMany", "connect"],
    PostUpdateOneRequiredWithoutCommentsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    UserUpdateOneRequiredWithoutCommentsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    ReplyUpdateManyWithoutCommentInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ReactionUpdateManyWithoutCommentInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    CommentCreateNestedOneWithoutRepliesInput: ["create", "connectOrCreate", "connect"],
    UserCreateNestedOneWithoutRepliesInput: ["create", "connectOrCreate", "connect"],
    ReactionCreateNestedManyWithoutReplyInput: ["create", "connectOrCreate", "createMany", "connect"],
    CommentUpdateOneRequiredWithoutRepliesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    UserUpdateOneRequiredWithoutRepliesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    ReactionUpdateManyWithoutReplyInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    PostCreateNestedOneWithoutReactionsInput: ["create", "connectOrCreate", "connect"],
    CommentCreateNestedOneWithoutReactionsInput: ["create", "connectOrCreate", "connect"],
    ReplyCreateNestedOneWithoutReactionsInput: ["create", "connectOrCreate", "connect"],
    UserCreateNestedOneWithoutReactionsInput: ["create", "connectOrCreate", "connect"],
    TopicCreateNestedOneWithoutReactionsInput: ["create", "connectOrCreate", "connect"],
    SeasonSeriesCreateNestedOneWithoutReactionsInput: ["create", "connectOrCreate", "connect"],
    EpisodeCreateNestedOneWithoutReactionsInput: ["create", "connectOrCreate", "connect"],
    EnumREACTION_TYPEFieldUpdateOperationsInput: ["set"],
    PostUpdateOneWithoutReactionsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    CommentUpdateOneWithoutReactionsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    ReplyUpdateOneWithoutReactionsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    UserUpdateOneRequiredWithoutReactionsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    TopicUpdateOneWithoutReactionsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    SeasonSeriesUpdateOneWithoutReactionsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    EpisodeUpdateOneWithoutReactionsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    RequestCreatesocialLinksInput: ["set"],
    UserCreateNestedOneWithoutRequestsInput: ["create", "connectOrCreate", "connect"],
    EnumREQUEST_TYPEFieldUpdateOperationsInput: ["set"],
    RequestUpdatesocialLinksInput: ["set", "push"],
    EnumREQUEST_STATUSFieldUpdateOperationsInput: ["set"],
    UserUpdateOneWithoutRequestsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    UserCreateNestedOneWithoutNotificationsInput: ["create", "connectOrCreate", "connect"],
    UserCreateNestedOneWithoutActivityInput: ["create", "connectOrCreate", "connect"],
    UserUpdateOneWithoutNotificationsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    UserUpdateOneWithoutActivityInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    NestedStringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    NestedEnumROLENullableFilter: ["equals", "in", "notIn", "not", "isSet"],
    NestedStringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "isSet"],
    NestedDateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedBoolFilter: ["equals", "not"],
    NestedStringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    NestedIntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedEnumROLENullableWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max", "isSet"],
    NestedIntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "isSet"],
    NestedStringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max", "isSet"],
    NestedDateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    NestedBoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
    NestedEnumTOPIC_TYPEFilter: ["equals", "in", "notIn", "not"],
    NestedEnumTOPIC_TYPEWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedIntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    NestedFloatFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedEnumMEDIA_TYPEFilter: ["equals", "in", "notIn", "not"],
    NestedEnumMEDIA_TYPEWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumREACTION_TYPEFilter: ["equals", "in", "notIn", "not"],
    NestedEnumREACTION_TYPEWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumREQUEST_TYPEFilter: ["equals", "in", "notIn", "not"],
    NestedEnumREQUEST_STATUSFilter: ["equals", "in", "notIn", "not"],
    NestedEnumREQUEST_TYPEWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedEnumREQUEST_STATUSWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NotificationSettingsCreateWithoutUserInput: ["id", "newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "createdAt", "updatedAt"],
    NotificationSettingsCreateOrConnectWithoutUserInput: ["where", "create"],
    NotificationCreateWithoutUserInput: ["id", "description", "Actor", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationCreateOrConnectWithoutUserInput: ["where", "create"],
    NotificationCreateManyUserInputEnvelope: ["data"],
    NotificationCreateWithoutActorInput: ["id", "description", "User", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationCreateOrConnectWithoutActorInput: ["where", "create"],
    NotificationCreateManyActorInputEnvelope: ["data"],
    UserCreateWithoutFollowersInput: ["uid", "id", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "followerIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutFollowersInput: ["where", "create"],
    UserCreateWithoutFollowingInput: ["uid", "id", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "followingIds", "Followers", "followerIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutFollowingInput: ["where", "create"],
    RequestCreateWithoutReporterInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "createdAt", "updatedAt"],
    RequestCreateOrConnectWithoutReporterInput: ["where", "create"],
    RequestCreateManyReporterInputEnvelope: ["data"],
    PostCreateWithoutAuthorInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Comments", "Reactions", "Topic", "SeasonSeries", "Episode", "postLink", "createdAt", "updatedAt"],
    PostCreateOrConnectWithoutAuthorInput: ["where", "create"],
    PostCreateManyAuthorInputEnvelope: ["data"],
    CommentCreateWithoutAuthorInput: ["id", "text", "Post", "Replies", "Reactions", "createdAt", "updatedAt"],
    CommentCreateOrConnectWithoutAuthorInput: ["where", "create"],
    CommentCreateManyAuthorInputEnvelope: ["data"],
    ReplyCreateWithoutAuthorInput: ["id", "text", "Comment", "Reactions", "createdAt", "updatedAt"],
    ReplyCreateOrConnectWithoutAuthorInput: ["where", "create"],
    ReplyCreateManyAuthorInputEnvelope: ["data"],
    ReactionCreateWithoutAuthorInput: ["id", "type", "Post", "Comment", "Reply", "Topic", "SeasonSeries", "Episode", "createdAt", "updatedAt"],
    ReactionCreateOrConnectWithoutAuthorInput: ["where", "create"],
    ReactionCreateManyAuthorInputEnvelope: ["data"],
    NotificationSettingsUpsertWithoutUserInput: ["update", "create"],
    NotificationSettingsUpdateWithoutUserInput: ["newContentILike", "commentsOnMyReviews", "repliesToMyComments", "repliesToThreads", "createdAt", "updatedAt"],
    NotificationUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
    NotificationUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
    NotificationUpdateManyWithWhereWithoutUserInput: ["where", "data"],
    NotificationScalarWhereInput: ["AND", "OR", "NOT", "id", "description", "userId", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationUpsertWithWhereUniqueWithoutActorInput: ["where", "update", "create"],
    NotificationUpdateWithWhereUniqueWithoutActorInput: ["where", "data"],
    NotificationUpdateManyWithWhereWithoutActorInput: ["where", "data"],
    UserUpsertWithWhereUniqueWithoutFollowersInput: ["where", "update", "create"],
    UserUpdateWithWhereUniqueWithoutFollowersInput: ["where", "data"],
    UserUpdateManyWithWhereWithoutFollowersInput: ["where", "data"],
    UserScalarWhereInput: ["AND", "OR", "NOT", "uid", "id", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "followingIds", "followerIds", "createdAt", "updatedAt"],
    UserUpsertWithWhereUniqueWithoutFollowingInput: ["where", "update", "create"],
    UserUpdateWithWhereUniqueWithoutFollowingInput: ["where", "data"],
    UserUpdateManyWithWhereWithoutFollowingInput: ["where", "data"],
    RequestUpsertWithWhereUniqueWithoutReporterInput: ["where", "update", "create"],
    RequestUpdateWithWhereUniqueWithoutReporterInput: ["where", "data"],
    RequestUpdateManyWithWhereWithoutReporterInput: ["where", "data"],
    RequestScalarWhereInput: ["AND", "OR", "NOT", "id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "userId", "createdAt", "updatedAt"],
    PostUpsertWithWhereUniqueWithoutAuthorInput: ["where", "update", "create"],
    PostUpdateWithWhereUniqueWithoutAuthorInput: ["where", "data"],
    PostUpdateManyWithWhereWithoutAuthorInput: ["where", "data"],
    PostScalarWhereInput: ["AND", "OR", "NOT", "id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "topicId", "seasonSeriesId", "episodeId", "postLink", "createdAt", "updatedAt"],
    CommentUpsertWithWhereUniqueWithoutAuthorInput: ["where", "update", "create"],
    CommentUpdateWithWhereUniqueWithoutAuthorInput: ["where", "data"],
    CommentUpdateManyWithWhereWithoutAuthorInput: ["where", "data"],
    CommentScalarWhereInput: ["AND", "OR", "NOT", "id", "text", "postId", "authorId", "createdAt", "updatedAt"],
    ReplyUpsertWithWhereUniqueWithoutAuthorInput: ["where", "update", "create"],
    ReplyUpdateWithWhereUniqueWithoutAuthorInput: ["where", "data"],
    ReplyUpdateManyWithWhereWithoutAuthorInput: ["where", "data"],
    ReplyScalarWhereInput: ["AND", "OR", "NOT", "id", "text", "commentId", "authorId", "createdAt", "updatedAt"],
    ReactionUpsertWithWhereUniqueWithoutAuthorInput: ["where", "update", "create"],
    ReactionUpdateWithWhereUniqueWithoutAuthorInput: ["where", "data"],
    ReactionUpdateManyWithWhereWithoutAuthorInput: ["where", "data"],
    ReactionScalarWhereInput: ["AND", "OR", "NOT", "id", "type", "postId", "commentId", "replyId", "authorId", "topicId", "seasonSeriesId", "episodeId", "createdAt", "updatedAt"],
    UserCreateWithoutNotificationSettingsInput: ["uid", "id", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutNotificationSettingsInput: ["where", "create"],
    UserUpsertWithoutNotificationSettingsInput: ["update", "create"],
    UserUpdateWithoutNotificationSettingsInput: ["uid", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    ReactionCreateWithoutTopicInput: ["id", "type", "Post", "Comment", "Reply", "Author", "SeasonSeries", "Episode", "createdAt", "updatedAt"],
    ReactionCreateOrConnectWithoutTopicInput: ["where", "create"],
    ReactionCreateManyTopicInputEnvelope: ["data"],
    SeasonSeriesCreateWithoutTopicInput: ["id", "seasonOrSeriesNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "Reactions", "Episodes", "Posts", "createdAt", "updatedAt"],
    SeasonSeriesCreateOrConnectWithoutTopicInput: ["where", "create"],
    SeasonSeriesCreateManyTopicInputEnvelope: ["data"],
    PostCreateWithoutTopicInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "Comments", "Reactions", "SeasonSeries", "Episode", "postLink", "createdAt", "updatedAt"],
    PostCreateOrConnectWithoutTopicInput: ["where", "create"],
    PostCreateManyTopicInputEnvelope: ["data"],
    ReactionUpsertWithWhereUniqueWithoutTopicInput: ["where", "update", "create"],
    ReactionUpdateWithWhereUniqueWithoutTopicInput: ["where", "data"],
    ReactionUpdateManyWithWhereWithoutTopicInput: ["where", "data"],
    SeasonSeriesUpsertWithWhereUniqueWithoutTopicInput: ["where", "update", "create"],
    SeasonSeriesUpdateWithWhereUniqueWithoutTopicInput: ["where", "data"],
    SeasonSeriesUpdateManyWithWhereWithoutTopicInput: ["where", "data"],
    SeasonSeriesScalarWhereInput: ["AND", "OR", "NOT", "id", "seasonOrSeriesNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "topicId", "createdAt", "updatedAt"],
    PostUpsertWithWhereUniqueWithoutTopicInput: ["where", "update", "create"],
    PostUpdateWithWhereUniqueWithoutTopicInput: ["where", "data"],
    PostUpdateManyWithWhereWithoutTopicInput: ["where", "data"],
    TopicCreateWithoutSeasonSeriesInput: ["id", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "genres", "creators", "authors", "artists", "producers", "directors", "publishers", "cast", "type", "Reactions", "Posts", "topicType", "createdAt", "updatedAt"],
    TopicCreateOrConnectWithoutSeasonSeriesInput: ["where", "create"],
    ReactionCreateWithoutSeasonSeriesInput: ["id", "type", "Post", "Comment", "Reply", "Author", "Topic", "Episode", "createdAt", "updatedAt"],
    ReactionCreateOrConnectWithoutSeasonSeriesInput: ["where", "create"],
    ReactionCreateManySeasonSeriesInputEnvelope: ["data"],
    EpisodeCreateWithoutSeasonSeriesInput: ["id", "episodeNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "Reactions", "Posts", "createdAt", "updatedAt"],
    EpisodeCreateOrConnectWithoutSeasonSeriesInput: ["where", "create"],
    EpisodeCreateManySeasonSeriesInputEnvelope: ["data"],
    PostCreateWithoutSeasonSeriesInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "Comments", "Reactions", "Topic", "Episode", "postLink", "createdAt", "updatedAt"],
    PostCreateOrConnectWithoutSeasonSeriesInput: ["where", "create"],
    PostCreateManySeasonSeriesInputEnvelope: ["data"],
    TopicUpsertWithoutSeasonSeriesInput: ["update", "create"],
    TopicUpdateWithoutSeasonSeriesInput: ["title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "genres", "creators", "authors", "artists", "producers", "directors", "publishers", "cast", "type", "Reactions", "Posts", "topicType", "createdAt", "updatedAt"],
    ReactionUpsertWithWhereUniqueWithoutSeasonSeriesInput: ["where", "update", "create"],
    ReactionUpdateWithWhereUniqueWithoutSeasonSeriesInput: ["where", "data"],
    ReactionUpdateManyWithWhereWithoutSeasonSeriesInput: ["where", "data"],
    EpisodeUpsertWithWhereUniqueWithoutSeasonSeriesInput: ["where", "update", "create"],
    EpisodeUpdateWithWhereUniqueWithoutSeasonSeriesInput: ["where", "data"],
    EpisodeUpdateManyWithWhereWithoutSeasonSeriesInput: ["where", "data"],
    EpisodeScalarWhereInput: ["AND", "OR", "NOT", "id", "episodeNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "seasonSeriesId", "createdAt", "updatedAt"],
    PostUpsertWithWhereUniqueWithoutSeasonSeriesInput: ["where", "update", "create"],
    PostUpdateWithWhereUniqueWithoutSeasonSeriesInput: ["where", "data"],
    PostUpdateManyWithWhereWithoutSeasonSeriesInput: ["where", "data"],
    SeasonSeriesCreateWithoutEpisodesInput: ["id", "seasonOrSeriesNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "Topic", "Reactions", "Posts", "createdAt", "updatedAt"],
    SeasonSeriesCreateOrConnectWithoutEpisodesInput: ["where", "create"],
    ReactionCreateWithoutEpisodeInput: ["id", "type", "Post", "Comment", "Reply", "Author", "Topic", "SeasonSeries", "createdAt", "updatedAt"],
    ReactionCreateOrConnectWithoutEpisodeInput: ["where", "create"],
    ReactionCreateManyEpisodeInputEnvelope: ["data"],
    PostCreateWithoutEpisodeInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "Comments", "Reactions", "Topic", "SeasonSeries", "postLink", "createdAt", "updatedAt"],
    PostCreateOrConnectWithoutEpisodeInput: ["where", "create"],
    PostCreateManyEpisodeInputEnvelope: ["data"],
    SeasonSeriesUpsertWithoutEpisodesInput: ["update", "create"],
    SeasonSeriesUpdateWithoutEpisodesInput: ["seasonOrSeriesNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "Topic", "Reactions", "Posts", "createdAt", "updatedAt"],
    ReactionUpsertWithWhereUniqueWithoutEpisodeInput: ["where", "update", "create"],
    ReactionUpdateWithWhereUniqueWithoutEpisodeInput: ["where", "data"],
    ReactionUpdateManyWithWhereWithoutEpisodeInput: ["where", "data"],
    PostUpsertWithWhereUniqueWithoutEpisodeInput: ["where", "update", "create"],
    PostUpdateWithWhereUniqueWithoutEpisodeInput: ["where", "data"],
    PostUpdateManyWithWhereWithoutEpisodeInput: ["where", "data"],
    UserCreateWithoutPostsInput: ["uid", "id", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "Requests", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutPostsInput: ["where", "create"],
    CommentCreateWithoutPostInput: ["id", "text", "Author", "Replies", "Reactions", "createdAt", "updatedAt"],
    CommentCreateOrConnectWithoutPostInput: ["where", "create"],
    CommentCreateManyPostInputEnvelope: ["data"],
    ReactionCreateWithoutPostInput: ["id", "type", "Comment", "Reply", "Author", "Topic", "SeasonSeries", "Episode", "createdAt", "updatedAt"],
    ReactionCreateOrConnectWithoutPostInput: ["where", "create"],
    ReactionCreateManyPostInputEnvelope: ["data"],
    TopicCreateWithoutPostsInput: ["id", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "genres", "creators", "authors", "artists", "producers", "directors", "publishers", "cast", "type", "Reactions", "SeasonSeries", "topicType", "createdAt", "updatedAt"],
    TopicCreateOrConnectWithoutPostsInput: ["where", "create"],
    SeasonSeriesCreateWithoutPostsInput: ["id", "seasonOrSeriesNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "Topic", "Reactions", "Episodes", "createdAt", "updatedAt"],
    SeasonSeriesCreateOrConnectWithoutPostsInput: ["where", "create"],
    EpisodeCreateWithoutPostsInput: ["id", "episodeNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "SeasonSeries", "Reactions", "createdAt", "updatedAt"],
    EpisodeCreateOrConnectWithoutPostsInput: ["where", "create"],
    UserUpsertWithoutPostsInput: ["update", "create"],
    UserUpdateWithoutPostsInput: ["uid", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "Requests", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    CommentUpsertWithWhereUniqueWithoutPostInput: ["where", "update", "create"],
    CommentUpdateWithWhereUniqueWithoutPostInput: ["where", "data"],
    CommentUpdateManyWithWhereWithoutPostInput: ["where", "data"],
    ReactionUpsertWithWhereUniqueWithoutPostInput: ["where", "update", "create"],
    ReactionUpdateWithWhereUniqueWithoutPostInput: ["where", "data"],
    ReactionUpdateManyWithWhereWithoutPostInput: ["where", "data"],
    TopicUpsertWithoutPostsInput: ["update", "create"],
    TopicUpdateWithoutPostsInput: ["title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "genres", "creators", "authors", "artists", "producers", "directors", "publishers", "cast", "type", "Reactions", "SeasonSeries", "topicType", "createdAt", "updatedAt"],
    SeasonSeriesUpsertWithoutPostsInput: ["update", "create"],
    SeasonSeriesUpdateWithoutPostsInput: ["seasonOrSeriesNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "Topic", "Reactions", "Episodes", "createdAt", "updatedAt"],
    EpisodeUpsertWithoutPostsInput: ["update", "create"],
    EpisodeUpdateWithoutPostsInput: ["episodeNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "SeasonSeries", "Reactions", "createdAt", "updatedAt"],
    PostCreateWithoutCommentsInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "Reactions", "Topic", "SeasonSeries", "Episode", "postLink", "createdAt", "updatedAt"],
    PostCreateOrConnectWithoutCommentsInput: ["where", "create"],
    UserCreateWithoutCommentsInput: ["uid", "id", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "Requests", "Posts", "Replies", "Reactions", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutCommentsInput: ["where", "create"],
    ReplyCreateWithoutCommentInput: ["id", "text", "Author", "Reactions", "createdAt", "updatedAt"],
    ReplyCreateOrConnectWithoutCommentInput: ["where", "create"],
    ReplyCreateManyCommentInputEnvelope: ["data"],
    ReactionCreateWithoutCommentInput: ["id", "type", "Post", "Reply", "Author", "Topic", "SeasonSeries", "Episode", "createdAt", "updatedAt"],
    ReactionCreateOrConnectWithoutCommentInput: ["where", "create"],
    ReactionCreateManyCommentInputEnvelope: ["data"],
    PostUpsertWithoutCommentsInput: ["update", "create"],
    PostUpdateWithoutCommentsInput: ["type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "Reactions", "Topic", "SeasonSeries", "Episode", "postLink", "createdAt", "updatedAt"],
    UserUpsertWithoutCommentsInput: ["update", "create"],
    UserUpdateWithoutCommentsInput: ["uid", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "Requests", "Posts", "Replies", "Reactions", "createdAt", "updatedAt"],
    ReplyUpsertWithWhereUniqueWithoutCommentInput: ["where", "update", "create"],
    ReplyUpdateWithWhereUniqueWithoutCommentInput: ["where", "data"],
    ReplyUpdateManyWithWhereWithoutCommentInput: ["where", "data"],
    ReactionUpsertWithWhereUniqueWithoutCommentInput: ["where", "update", "create"],
    ReactionUpdateWithWhereUniqueWithoutCommentInput: ["where", "data"],
    ReactionUpdateManyWithWhereWithoutCommentInput: ["where", "data"],
    CommentCreateWithoutRepliesInput: ["id", "text", "Post", "Author", "Reactions", "createdAt", "updatedAt"],
    CommentCreateOrConnectWithoutRepliesInput: ["where", "create"],
    UserCreateWithoutRepliesInput: ["uid", "id", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "Requests", "Posts", "Comments", "Reactions", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutRepliesInput: ["where", "create"],
    ReactionCreateWithoutReplyInput: ["id", "type", "Post", "Comment", "Author", "Topic", "SeasonSeries", "Episode", "createdAt", "updatedAt"],
    ReactionCreateOrConnectWithoutReplyInput: ["where", "create"],
    ReactionCreateManyReplyInputEnvelope: ["data"],
    CommentUpsertWithoutRepliesInput: ["update", "create"],
    CommentUpdateWithoutRepliesInput: ["text", "Post", "Author", "Reactions", "createdAt", "updatedAt"],
    UserUpsertWithoutRepliesInput: ["update", "create"],
    UserUpdateWithoutRepliesInput: ["uid", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "Requests", "Posts", "Comments", "Reactions", "createdAt", "updatedAt"],
    ReactionUpsertWithWhereUniqueWithoutReplyInput: ["where", "update", "create"],
    ReactionUpdateWithWhereUniqueWithoutReplyInput: ["where", "data"],
    ReactionUpdateManyWithWhereWithoutReplyInput: ["where", "data"],
    PostCreateWithoutReactionsInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "Comments", "Topic", "SeasonSeries", "Episode", "postLink", "createdAt", "updatedAt"],
    PostCreateOrConnectWithoutReactionsInput: ["where", "create"],
    CommentCreateWithoutReactionsInput: ["id", "text", "Post", "Author", "Replies", "createdAt", "updatedAt"],
    CommentCreateOrConnectWithoutReactionsInput: ["where", "create"],
    ReplyCreateWithoutReactionsInput: ["id", "text", "Comment", "Author", "createdAt", "updatedAt"],
    ReplyCreateOrConnectWithoutReactionsInput: ["where", "create"],
    UserCreateWithoutReactionsInput: ["uid", "id", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "Requests", "Posts", "Comments", "Replies", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutReactionsInput: ["where", "create"],
    TopicCreateWithoutReactionsInput: ["id", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "genres", "creators", "authors", "artists", "producers", "directors", "publishers", "cast", "type", "SeasonSeries", "Posts", "topicType", "createdAt", "updatedAt"],
    TopicCreateOrConnectWithoutReactionsInput: ["where", "create"],
    SeasonSeriesCreateWithoutReactionsInput: ["id", "seasonOrSeriesNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "Topic", "Episodes", "Posts", "createdAt", "updatedAt"],
    SeasonSeriesCreateOrConnectWithoutReactionsInput: ["where", "create"],
    EpisodeCreateWithoutReactionsInput: ["id", "episodeNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "SeasonSeries", "Posts", "createdAt", "updatedAt"],
    EpisodeCreateOrConnectWithoutReactionsInput: ["where", "create"],
    PostUpsertWithoutReactionsInput: ["update", "create"],
    PostUpdateWithoutReactionsInput: ["type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "Comments", "Topic", "SeasonSeries", "Episode", "postLink", "createdAt", "updatedAt"],
    CommentUpsertWithoutReactionsInput: ["update", "create"],
    CommentUpdateWithoutReactionsInput: ["text", "Post", "Author", "Replies", "createdAt", "updatedAt"],
    ReplyUpsertWithoutReactionsInput: ["update", "create"],
    ReplyUpdateWithoutReactionsInput: ["text", "Comment", "Author", "createdAt", "updatedAt"],
    UserUpsertWithoutReactionsInput: ["update", "create"],
    UserUpdateWithoutReactionsInput: ["uid", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "Requests", "Posts", "Comments", "Replies", "createdAt", "updatedAt"],
    TopicUpsertWithoutReactionsInput: ["update", "create"],
    TopicUpdateWithoutReactionsInput: ["title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "genres", "creators", "authors", "artists", "producers", "directors", "publishers", "cast", "type", "SeasonSeries", "Posts", "topicType", "createdAt", "updatedAt"],
    SeasonSeriesUpsertWithoutReactionsInput: ["update", "create"],
    SeasonSeriesUpdateWithoutReactionsInput: ["seasonOrSeriesNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "Topic", "Episodes", "Posts", "createdAt", "updatedAt"],
    EpisodeUpsertWithoutReactionsInput: ["update", "create"],
    EpisodeUpdateWithoutReactionsInput: ["episodeNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "SeasonSeries", "Posts", "createdAt", "updatedAt"],
    UserCreateWithoutRequestsInput: ["uid", "id", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "Posts", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutRequestsInput: ["where", "create"],
    UserUpsertWithoutRequestsInput: ["update", "create"],
    UserUpdateWithoutRequestsInput: ["uid", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "Followers", "followerIds", "Posts", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    UserCreateWithoutNotificationsInput: ["uid", "id", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Activity", "Following", "followingIds", "Followers", "followerIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutNotificationsInput: ["where", "create"],
    UserCreateWithoutActivityInput: ["uid", "id", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Following", "followingIds", "Followers", "followerIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    UserCreateOrConnectWithoutActivityInput: ["where", "create"],
    UserUpsertWithoutNotificationsInput: ["update", "create"],
    UserUpdateWithoutNotificationsInput: ["uid", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Activity", "Following", "followingIds", "Followers", "followerIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    UserUpsertWithoutActivityInput: ["update", "create"],
    UserUpdateWithoutActivityInput: ["uid", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Following", "followingIds", "Followers", "followerIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    NotificationCreateManyUserInput: ["id", "description", "actorId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationCreateManyActorInput: ["id", "description", "userId", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    RequestCreateManyReporterInput: ["id", "reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "createdAt", "updatedAt"],
    PostCreateManyAuthorInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "topicId", "seasonSeriesId", "episodeId", "postLink", "createdAt", "updatedAt"],
    CommentCreateManyAuthorInput: ["id", "text", "postId", "createdAt", "updatedAt"],
    ReplyCreateManyAuthorInput: ["id", "text", "commentId", "createdAt", "updatedAt"],
    ReactionCreateManyAuthorInput: ["id", "type", "postId", "commentId", "replyId", "topicId", "seasonSeriesId", "episodeId", "createdAt", "updatedAt"],
    NotificationUpdateWithoutUserInput: ["description", "Actor", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    NotificationUpdateWithoutActorInput: ["description", "User", "entityId", "hasBeenViewedBySubject", "link", "mediaLink", "createdAt", "updatedAt"],
    UserUpdateWithoutFollowersInput: ["uid", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "Following", "followingIds", "followerIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    UserUpdateWithoutFollowingInput: ["uid", "username", "email", "role", "firstName", "lastName", "avatar", "coverImage", "dateOfBirth", "biography", "hasAcceptedTerms", "isFirstTimeUser", "isVerified", "NotificationSettings", "Notifications", "Activity", "followingIds", "Followers", "followerIds", "Requests", "Posts", "Comments", "Replies", "Reactions", "createdAt", "updatedAt"],
    RequestUpdateWithoutReporterInput: ["reporterName", "reporterEmail", "subject", "message", "type", "socialLinks", "entityId", "requestResolution", "createdAt", "updatedAt"],
    PostUpdateWithoutAuthorInput: ["type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Comments", "Reactions", "Topic", "SeasonSeries", "Episode", "postLink", "createdAt", "updatedAt"],
    CommentUpdateWithoutAuthorInput: ["text", "Post", "Replies", "Reactions", "createdAt", "updatedAt"],
    ReplyUpdateWithoutAuthorInput: ["text", "Comment", "Reactions", "createdAt", "updatedAt"],
    ReactionUpdateWithoutAuthorInput: ["type", "Post", "Comment", "Reply", "Topic", "SeasonSeries", "Episode", "createdAt", "updatedAt"],
    ReactionCreateManyTopicInput: ["id", "type", "postId", "commentId", "replyId", "authorId", "seasonSeriesId", "episodeId", "createdAt", "updatedAt"],
    SeasonSeriesCreateManyTopicInput: ["id", "seasonOrSeriesNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "createdAt", "updatedAt"],
    PostCreateManyTopicInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "seasonSeriesId", "episodeId", "postLink", "createdAt", "updatedAt"],
    ReactionUpdateWithoutTopicInput: ["type", "Post", "Comment", "Reply", "Author", "SeasonSeries", "Episode", "createdAt", "updatedAt"],
    SeasonSeriesUpdateWithoutTopicInput: ["seasonOrSeriesNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "Reactions", "Episodes", "Posts", "createdAt", "updatedAt"],
    PostUpdateWithoutTopicInput: ["type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "Comments", "Reactions", "SeasonSeries", "Episode", "postLink", "createdAt", "updatedAt"],
    ReactionCreateManySeasonSeriesInput: ["id", "type", "postId", "commentId", "replyId", "authorId", "topicId", "episodeId", "createdAt", "updatedAt"],
    EpisodeCreateManySeasonSeriesInput: ["id", "episodeNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "createdAt", "updatedAt"],
    PostCreateManySeasonSeriesInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "topicId", "episodeId", "postLink", "createdAt", "updatedAt"],
    ReactionUpdateWithoutSeasonSeriesInput: ["type", "Post", "Comment", "Reply", "Author", "Topic", "Episode", "createdAt", "updatedAt"],
    EpisodeUpdateWithoutSeasonSeriesInput: ["episodeNumber", "title", "year", "poster", "overview", "trailer", "coverImage", "tagline", "Reactions", "Posts", "createdAt", "updatedAt"],
    PostUpdateWithoutSeasonSeriesInput: ["type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "Comments", "Reactions", "Topic", "Episode", "postLink", "createdAt", "updatedAt"],
    ReactionCreateManyEpisodeInput: ["id", "type", "postId", "commentId", "replyId", "authorId", "topicId", "seasonSeriesId", "createdAt", "updatedAt"],
    PostCreateManyEpisodeInput: ["id", "type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "authorId", "topicId", "seasonSeriesId", "postLink", "createdAt", "updatedAt"],
    ReactionUpdateWithoutEpisodeInput: ["type", "Post", "Comment", "Reply", "Author", "Topic", "SeasonSeries", "createdAt", "updatedAt"],
    PostUpdateWithoutEpisodeInput: ["type", "caption", "mediaUrl", "rating", "isCommentsEnabled", "canBeCounted", "Author", "Comments", "Reactions", "Topic", "SeasonSeries", "postLink", "createdAt", "updatedAt"],
    CommentCreateManyPostInput: ["id", "text", "authorId", "createdAt", "updatedAt"],
    ReactionCreateManyPostInput: ["id", "type", "commentId", "replyId", "authorId", "topicId", "seasonSeriesId", "episodeId", "createdAt", "updatedAt"],
    CommentUpdateWithoutPostInput: ["text", "Author", "Replies", "Reactions", "createdAt", "updatedAt"],
    ReactionUpdateWithoutPostInput: ["type", "Comment", "Reply", "Author", "Topic", "SeasonSeries", "Episode", "createdAt", "updatedAt"],
    ReplyCreateManyCommentInput: ["id", "text", "authorId", "createdAt", "updatedAt"],
    ReactionCreateManyCommentInput: ["id", "type", "postId", "replyId", "authorId", "topicId", "seasonSeriesId", "episodeId", "createdAt", "updatedAt"],
    ReplyUpdateWithoutCommentInput: ["text", "Author", "Reactions", "createdAt", "updatedAt"],
    ReactionUpdateWithoutCommentInput: ["type", "Post", "Reply", "Author", "Topic", "SeasonSeries", "Episode", "createdAt", "updatedAt"],
    ReactionCreateManyReplyInput: ["id", "type", "postId", "commentId", "authorId", "topicId", "seasonSeriesId", "episodeId", "createdAt", "updatedAt"],
    ReactionUpdateWithoutReplyInput: ["type", "Post", "Comment", "Author", "Topic", "SeasonSeries", "Episode", "createdAt", "updatedAt"]
};
function applyInputTypesEnhanceMap(inputTypesEnhanceMap) {
    for (const inputTypeEnhanceMapKey of Object.keys(inputTypesEnhanceMap)) {
        const inputTypeName = inputTypeEnhanceMapKey;
        const typeConfig = inputTypesEnhanceMap[inputTypeName];
        const typeClass = inputTypes[inputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, inputsInfo[inputTypeName]);
    }
}
exports.applyInputTypesEnhanceMap = applyInputTypesEnhanceMap;
