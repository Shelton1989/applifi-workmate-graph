import { GraphQLResolveInfo } from "graphql";
import { AggregateTopicListsArgs } from "./args/AggregateTopicListsArgs";
import { CreateManyTopicListsArgs } from "./args/CreateManyTopicListsArgs";
import { CreateTopicListsArgs } from "./args/CreateTopicListsArgs";
import { DeleteManyTopicListsArgs } from "./args/DeleteManyTopicListsArgs";
import { DeleteTopicListsArgs } from "./args/DeleteTopicListsArgs";
import { FindFirstTopicListsArgs } from "./args/FindFirstTopicListsArgs";
import { FindManyTopicListsArgs } from "./args/FindManyTopicListsArgs";
import { FindUniqueTopicListsArgs } from "./args/FindUniqueTopicListsArgs";
import { GroupByTopicListsArgs } from "./args/GroupByTopicListsArgs";
import { UpdateManyTopicListsArgs } from "./args/UpdateManyTopicListsArgs";
import { UpdateTopicListsArgs } from "./args/UpdateTopicListsArgs";
import { UpsertTopicListsArgs } from "./args/UpsertTopicListsArgs";
import { TopicLists } from "../../../models/TopicLists";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateTopicLists } from "../../outputs/AggregateTopicLists";
import { TopicListsGroupBy } from "../../outputs/TopicListsGroupBy";
export declare class TopicListsCrudResolver {
    findUniqueTopicLists(ctx: any, info: GraphQLResolveInfo, args: FindUniqueTopicListsArgs): Promise<TopicLists | null>;
    findFirstTopicLists(ctx: any, info: GraphQLResolveInfo, args: FindFirstTopicListsArgs): Promise<TopicLists | null>;
    findManyTopicLists(ctx: any, info: GraphQLResolveInfo, args: FindManyTopicListsArgs): Promise<TopicLists[]>;
    createTopicLists(ctx: any, info: GraphQLResolveInfo, args: CreateTopicListsArgs): Promise<TopicLists>;
    createManyTopicLists(ctx: any, info: GraphQLResolveInfo, args: CreateManyTopicListsArgs): Promise<AffectedRowsOutput>;
    deleteTopicLists(ctx: any, info: GraphQLResolveInfo, args: DeleteTopicListsArgs): Promise<TopicLists | null>;
    updateTopicLists(ctx: any, info: GraphQLResolveInfo, args: UpdateTopicListsArgs): Promise<TopicLists | null>;
    deleteManyTopicLists(ctx: any, info: GraphQLResolveInfo, args: DeleteManyTopicListsArgs): Promise<AffectedRowsOutput>;
    updateManyTopicLists(ctx: any, info: GraphQLResolveInfo, args: UpdateManyTopicListsArgs): Promise<AffectedRowsOutput>;
    upsertTopicLists(ctx: any, info: GraphQLResolveInfo, args: UpsertTopicListsArgs): Promise<TopicLists>;
    aggregateTopicLists(ctx: any, info: GraphQLResolveInfo, args: AggregateTopicListsArgs): Promise<AggregateTopicLists>;
    groupByTopicLists(ctx: any, info: GraphQLResolveInfo, args: GroupByTopicListsArgs): Promise<TopicListsGroupBy[]>;
}
