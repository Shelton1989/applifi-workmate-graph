import { GraphQLResolveInfo } from "graphql";
import { AggregateMealItemArgs } from "./args/AggregateMealItemArgs";
import { CreateManyMealItemArgs } from "./args/CreateManyMealItemArgs";
import { CreateMealItemArgs } from "./args/CreateMealItemArgs";
import { DeleteManyMealItemArgs } from "./args/DeleteManyMealItemArgs";
import { DeleteMealItemArgs } from "./args/DeleteMealItemArgs";
import { FindFirstMealItemArgs } from "./args/FindFirstMealItemArgs";
import { FindManyMealItemArgs } from "./args/FindManyMealItemArgs";
import { FindUniqueMealItemArgs } from "./args/FindUniqueMealItemArgs";
import { GroupByMealItemArgs } from "./args/GroupByMealItemArgs";
import { UpdateManyMealItemArgs } from "./args/UpdateManyMealItemArgs";
import { UpdateMealItemArgs } from "./args/UpdateMealItemArgs";
import { UpsertMealItemArgs } from "./args/UpsertMealItemArgs";
import { MealItem } from "../../../models/MealItem";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateMealItem } from "../../outputs/AggregateMealItem";
import { MealItemGroupBy } from "../../outputs/MealItemGroupBy";
export declare class MealItemCrudResolver {
    mealItem(ctx: any, info: GraphQLResolveInfo, args: FindUniqueMealItemArgs): Promise<MealItem | null>;
    findFirstMealItem(ctx: any, info: GraphQLResolveInfo, args: FindFirstMealItemArgs): Promise<MealItem | null>;
    mealItems(ctx: any, info: GraphQLResolveInfo, args: FindManyMealItemArgs): Promise<MealItem[]>;
    createMealItem(ctx: any, info: GraphQLResolveInfo, args: CreateMealItemArgs): Promise<MealItem>;
    createManyMealItem(ctx: any, info: GraphQLResolveInfo, args: CreateManyMealItemArgs): Promise<AffectedRowsOutput>;
    deleteMealItem(ctx: any, info: GraphQLResolveInfo, args: DeleteMealItemArgs): Promise<MealItem | null>;
    updateMealItem(ctx: any, info: GraphQLResolveInfo, args: UpdateMealItemArgs): Promise<MealItem | null>;
    deleteManyMealItem(ctx: any, info: GraphQLResolveInfo, args: DeleteManyMealItemArgs): Promise<AffectedRowsOutput>;
    updateManyMealItem(ctx: any, info: GraphQLResolveInfo, args: UpdateManyMealItemArgs): Promise<AffectedRowsOutput>;
    upsertMealItem(ctx: any, info: GraphQLResolveInfo, args: UpsertMealItemArgs): Promise<MealItem>;
    aggregateMealItem(ctx: any, info: GraphQLResolveInfo, args: AggregateMealItemArgs): Promise<AggregateMealItem>;
    groupByMealItem(ctx: any, info: GraphQLResolveInfo, args: GroupByMealItemArgs): Promise<MealItemGroupBy[]>;
}
