import { GraphQLResolveInfo } from "graphql";
import { AggregateSeasonSeriesArgs } from "./args/AggregateSeasonSeriesArgs";
import { CreateManySeasonSeriesArgs } from "./args/CreateManySeasonSeriesArgs";
import { CreateSeasonSeriesArgs } from "./args/CreateSeasonSeriesArgs";
import { DeleteManySeasonSeriesArgs } from "./args/DeleteManySeasonSeriesArgs";
import { DeleteSeasonSeriesArgs } from "./args/DeleteSeasonSeriesArgs";
import { FindFirstSeasonSeriesArgs } from "./args/FindFirstSeasonSeriesArgs";
import { FindManySeasonSeriesArgs } from "./args/FindManySeasonSeriesArgs";
import { FindUniqueSeasonSeriesArgs } from "./args/FindUniqueSeasonSeriesArgs";
import { GroupBySeasonSeriesArgs } from "./args/GroupBySeasonSeriesArgs";
import { UpdateManySeasonSeriesArgs } from "./args/UpdateManySeasonSeriesArgs";
import { UpdateSeasonSeriesArgs } from "./args/UpdateSeasonSeriesArgs";
import { UpsertSeasonSeriesArgs } from "./args/UpsertSeasonSeriesArgs";
import { SeasonSeries } from "../../../models/SeasonSeries";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateSeasonSeries } from "../../outputs/AggregateSeasonSeries";
import { SeasonSeriesGroupBy } from "../../outputs/SeasonSeriesGroupBy";
export declare class SeasonSeriesCrudResolver {
    findUniqueSeasonSeries(ctx: any, info: GraphQLResolveInfo, args: FindUniqueSeasonSeriesArgs): Promise<SeasonSeries | null>;
    findFirstSeasonSeries(ctx: any, info: GraphQLResolveInfo, args: FindFirstSeasonSeriesArgs): Promise<SeasonSeries | null>;
    findManySeasonSeries(ctx: any, info: GraphQLResolveInfo, args: FindManySeasonSeriesArgs): Promise<SeasonSeries[]>;
    createSeasonSeries(ctx: any, info: GraphQLResolveInfo, args: CreateSeasonSeriesArgs): Promise<SeasonSeries>;
    createManySeasonSeries(ctx: any, info: GraphQLResolveInfo, args: CreateManySeasonSeriesArgs): Promise<AffectedRowsOutput>;
    deleteSeasonSeries(ctx: any, info: GraphQLResolveInfo, args: DeleteSeasonSeriesArgs): Promise<SeasonSeries | null>;
    updateSeasonSeries(ctx: any, info: GraphQLResolveInfo, args: UpdateSeasonSeriesArgs): Promise<SeasonSeries | null>;
    deleteManySeasonSeries(ctx: any, info: GraphQLResolveInfo, args: DeleteManySeasonSeriesArgs): Promise<AffectedRowsOutput>;
    updateManySeasonSeries(ctx: any, info: GraphQLResolveInfo, args: UpdateManySeasonSeriesArgs): Promise<AffectedRowsOutput>;
    upsertSeasonSeries(ctx: any, info: GraphQLResolveInfo, args: UpsertSeasonSeriesArgs): Promise<SeasonSeries>;
    aggregateSeasonSeries(ctx: any, info: GraphQLResolveInfo, args: AggregateSeasonSeriesArgs): Promise<AggregateSeasonSeries>;
    groupBySeasonSeries(ctx: any, info: GraphQLResolveInfo, args: GroupBySeasonSeriesArgs): Promise<SeasonSeriesGroupBy[]>;
}
