import { GraphQLResolveInfo } from "graphql";
import { AggregateWardArgs } from "./args/AggregateWardArgs";
import { CreateManyWardArgs } from "./args/CreateManyWardArgs";
import { CreateWardArgs } from "./args/CreateWardArgs";
import { DeleteManyWardArgs } from "./args/DeleteManyWardArgs";
import { DeleteWardArgs } from "./args/DeleteWardArgs";
import { FindFirstWardArgs } from "./args/FindFirstWardArgs";
import { FindManyWardArgs } from "./args/FindManyWardArgs";
import { FindUniqueWardArgs } from "./args/FindUniqueWardArgs";
import { GroupByWardArgs } from "./args/GroupByWardArgs";
import { UpdateManyWardArgs } from "./args/UpdateManyWardArgs";
import { UpdateWardArgs } from "./args/UpdateWardArgs";
import { UpsertWardArgs } from "./args/UpsertWardArgs";
import { Ward } from "../../../models/Ward";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateWard } from "../../outputs/AggregateWard";
import { WardGroupBy } from "../../outputs/WardGroupBy";
export declare class WardCrudResolver {
    ward(ctx: any, info: GraphQLResolveInfo, args: FindUniqueWardArgs): Promise<Ward | null>;
    findFirstWard(ctx: any, info: GraphQLResolveInfo, args: FindFirstWardArgs): Promise<Ward | null>;
    wards(ctx: any, info: GraphQLResolveInfo, args: FindManyWardArgs): Promise<Ward[]>;
    createWard(ctx: any, info: GraphQLResolveInfo, args: CreateWardArgs): Promise<Ward>;
    createManyWard(ctx: any, info: GraphQLResolveInfo, args: CreateManyWardArgs): Promise<AffectedRowsOutput>;
    deleteWard(ctx: any, info: GraphQLResolveInfo, args: DeleteWardArgs): Promise<Ward | null>;
    updateWard(ctx: any, info: GraphQLResolveInfo, args: UpdateWardArgs): Promise<Ward | null>;
    deleteManyWard(ctx: any, info: GraphQLResolveInfo, args: DeleteManyWardArgs): Promise<AffectedRowsOutput>;
    updateManyWard(ctx: any, info: GraphQLResolveInfo, args: UpdateManyWardArgs): Promise<AffectedRowsOutput>;
    upsertWard(ctx: any, info: GraphQLResolveInfo, args: UpsertWardArgs): Promise<Ward>;
    aggregateWard(ctx: any, info: GraphQLResolveInfo, args: AggregateWardArgs): Promise<AggregateWard>;
    groupByWard(ctx: any, info: GraphQLResolveInfo, args: GroupByWardArgs): Promise<WardGroupBy[]>;
}
