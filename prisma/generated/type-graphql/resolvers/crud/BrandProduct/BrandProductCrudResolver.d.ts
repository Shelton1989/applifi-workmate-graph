import { GraphQLResolveInfo } from "graphql";
import { AggregateBrandProductArgs } from "./args/AggregateBrandProductArgs";
import { CreateBrandProductArgs } from "./args/CreateBrandProductArgs";
import { CreateManyBrandProductArgs } from "./args/CreateManyBrandProductArgs";
import { DeleteBrandProductArgs } from "./args/DeleteBrandProductArgs";
import { DeleteManyBrandProductArgs } from "./args/DeleteManyBrandProductArgs";
import { FindFirstBrandProductArgs } from "./args/FindFirstBrandProductArgs";
import { FindManyBrandProductArgs } from "./args/FindManyBrandProductArgs";
import { FindUniqueBrandProductArgs } from "./args/FindUniqueBrandProductArgs";
import { GroupByBrandProductArgs } from "./args/GroupByBrandProductArgs";
import { UpdateBrandProductArgs } from "./args/UpdateBrandProductArgs";
import { UpdateManyBrandProductArgs } from "./args/UpdateManyBrandProductArgs";
import { UpsertBrandProductArgs } from "./args/UpsertBrandProductArgs";
import { BrandProduct } from "../../../models/BrandProduct";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateBrandProduct } from "../../outputs/AggregateBrandProduct";
import { BrandProductGroupBy } from "../../outputs/BrandProductGroupBy";
export declare class BrandProductCrudResolver {
    brandProduct(ctx: any, info: GraphQLResolveInfo, args: FindUniqueBrandProductArgs): Promise<BrandProduct | null>;
    findFirstBrandProduct(ctx: any, info: GraphQLResolveInfo, args: FindFirstBrandProductArgs): Promise<BrandProduct | null>;
    brandProducts(ctx: any, info: GraphQLResolveInfo, args: FindManyBrandProductArgs): Promise<BrandProduct[]>;
    createBrandProduct(ctx: any, info: GraphQLResolveInfo, args: CreateBrandProductArgs): Promise<BrandProduct>;
    createManyBrandProduct(ctx: any, info: GraphQLResolveInfo, args: CreateManyBrandProductArgs): Promise<AffectedRowsOutput>;
    deleteBrandProduct(ctx: any, info: GraphQLResolveInfo, args: DeleteBrandProductArgs): Promise<BrandProduct | null>;
    updateBrandProduct(ctx: any, info: GraphQLResolveInfo, args: UpdateBrandProductArgs): Promise<BrandProduct | null>;
    deleteManyBrandProduct(ctx: any, info: GraphQLResolveInfo, args: DeleteManyBrandProductArgs): Promise<AffectedRowsOutput>;
    updateManyBrandProduct(ctx: any, info: GraphQLResolveInfo, args: UpdateManyBrandProductArgs): Promise<AffectedRowsOutput>;
    upsertBrandProduct(ctx: any, info: GraphQLResolveInfo, args: UpsertBrandProductArgs): Promise<BrandProduct>;
    aggregateBrandProduct(ctx: any, info: GraphQLResolveInfo, args: AggregateBrandProductArgs): Promise<AggregateBrandProduct>;
    groupByBrandProduct(ctx: any, info: GraphQLResolveInfo, args: GroupByBrandProductArgs): Promise<BrandProductGroupBy[]>;
}
