import { GraphQLResolveInfo } from "graphql";
import { AggregateTopicArgs } from "./args/AggregateTopicArgs";
import { CreateManyTopicArgs } from "./args/CreateManyTopicArgs";
import { CreateTopicArgs } from "./args/CreateTopicArgs";
import { DeleteManyTopicArgs } from "./args/DeleteManyTopicArgs";
import { DeleteTopicArgs } from "./args/DeleteTopicArgs";
import { FindFirstTopicArgs } from "./args/FindFirstTopicArgs";
import { FindManyTopicArgs } from "./args/FindManyTopicArgs";
import { FindUniqueTopicArgs } from "./args/FindUniqueTopicArgs";
import { GroupByTopicArgs } from "./args/GroupByTopicArgs";
import { UpdateManyTopicArgs } from "./args/UpdateManyTopicArgs";
import { UpdateTopicArgs } from "./args/UpdateTopicArgs";
import { UpsertTopicArgs } from "./args/UpsertTopicArgs";
import { Topic } from "../../../models/Topic";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateTopic } from "../../outputs/AggregateTopic";
import { TopicGroupBy } from "../../outputs/TopicGroupBy";
export declare class TopicCrudResolver {
    topic(ctx: any, info: GraphQLResolveInfo, args: FindUniqueTopicArgs): Promise<Topic | null>;
    findFirstTopic(ctx: any, info: GraphQLResolveInfo, args: FindFirstTopicArgs): Promise<Topic | null>;
    topics(ctx: any, info: GraphQLResolveInfo, args: FindManyTopicArgs): Promise<Topic[]>;
    createTopic(ctx: any, info: GraphQLResolveInfo, args: CreateTopicArgs): Promise<Topic>;
    createManyTopic(ctx: any, info: GraphQLResolveInfo, args: CreateManyTopicArgs): Promise<AffectedRowsOutput>;
    deleteTopic(ctx: any, info: GraphQLResolveInfo, args: DeleteTopicArgs): Promise<Topic | null>;
    updateTopic(ctx: any, info: GraphQLResolveInfo, args: UpdateTopicArgs): Promise<Topic | null>;
    deleteManyTopic(ctx: any, info: GraphQLResolveInfo, args: DeleteManyTopicArgs): Promise<AffectedRowsOutput>;
    updateManyTopic(ctx: any, info: GraphQLResolveInfo, args: UpdateManyTopicArgs): Promise<AffectedRowsOutput>;
    upsertTopic(ctx: any, info: GraphQLResolveInfo, args: UpsertTopicArgs): Promise<Topic>;
    aggregateTopic(ctx: any, info: GraphQLResolveInfo, args: AggregateTopicArgs): Promise<AggregateTopic>;
    groupByTopic(ctx: any, info: GraphQLResolveInfo, args: GroupByTopicArgs): Promise<TopicGroupBy[]>;
}
