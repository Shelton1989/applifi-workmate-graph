import { GraphQLResolveInfo } from "graphql";
import { AggregateMealArgs } from "./args/AggregateMealArgs";
import { CreateManyMealArgs } from "./args/CreateManyMealArgs";
import { CreateMealArgs } from "./args/CreateMealArgs";
import { DeleteManyMealArgs } from "./args/DeleteManyMealArgs";
import { DeleteMealArgs } from "./args/DeleteMealArgs";
import { FindFirstMealArgs } from "./args/FindFirstMealArgs";
import { FindManyMealArgs } from "./args/FindManyMealArgs";
import { FindUniqueMealArgs } from "./args/FindUniqueMealArgs";
import { GroupByMealArgs } from "./args/GroupByMealArgs";
import { UpdateManyMealArgs } from "./args/UpdateManyMealArgs";
import { UpdateMealArgs } from "./args/UpdateMealArgs";
import { UpsertMealArgs } from "./args/UpsertMealArgs";
import { Meal } from "../../../models/Meal";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateMeal } from "../../outputs/AggregateMeal";
import { MealGroupBy } from "../../outputs/MealGroupBy";
export declare class MealCrudResolver {
    meal(ctx: any, info: GraphQLResolveInfo, args: FindUniqueMealArgs): Promise<Meal | null>;
    findFirstMeal(ctx: any, info: GraphQLResolveInfo, args: FindFirstMealArgs): Promise<Meal | null>;
    meals(ctx: any, info: GraphQLResolveInfo, args: FindManyMealArgs): Promise<Meal[]>;
    createMeal(ctx: any, info: GraphQLResolveInfo, args: CreateMealArgs): Promise<Meal>;
    createManyMeal(ctx: any, info: GraphQLResolveInfo, args: CreateManyMealArgs): Promise<AffectedRowsOutput>;
    deleteMeal(ctx: any, info: GraphQLResolveInfo, args: DeleteMealArgs): Promise<Meal | null>;
    updateMeal(ctx: any, info: GraphQLResolveInfo, args: UpdateMealArgs): Promise<Meal | null>;
    deleteManyMeal(ctx: any, info: GraphQLResolveInfo, args: DeleteManyMealArgs): Promise<AffectedRowsOutput>;
    updateManyMeal(ctx: any, info: GraphQLResolveInfo, args: UpdateManyMealArgs): Promise<AffectedRowsOutput>;
    upsertMeal(ctx: any, info: GraphQLResolveInfo, args: UpsertMealArgs): Promise<Meal>;
    aggregateMeal(ctx: any, info: GraphQLResolveInfo, args: AggregateMealArgs): Promise<AggregateMeal>;
    groupByMeal(ctx: any, info: GraphQLResolveInfo, args: GroupByMealArgs): Promise<MealGroupBy[]>;
}
