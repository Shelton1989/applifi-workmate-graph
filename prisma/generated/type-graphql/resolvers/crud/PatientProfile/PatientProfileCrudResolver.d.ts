import { GraphQLResolveInfo } from "graphql";
import { AggregatePatientProfileArgs } from "./args/AggregatePatientProfileArgs";
import { CreateManyPatientProfileArgs } from "./args/CreateManyPatientProfileArgs";
import { CreatePatientProfileArgs } from "./args/CreatePatientProfileArgs";
import { DeleteManyPatientProfileArgs } from "./args/DeleteManyPatientProfileArgs";
import { DeletePatientProfileArgs } from "./args/DeletePatientProfileArgs";
import { FindFirstPatientProfileArgs } from "./args/FindFirstPatientProfileArgs";
import { FindManyPatientProfileArgs } from "./args/FindManyPatientProfileArgs";
import { FindUniquePatientProfileArgs } from "./args/FindUniquePatientProfileArgs";
import { GroupByPatientProfileArgs } from "./args/GroupByPatientProfileArgs";
import { UpdateManyPatientProfileArgs } from "./args/UpdateManyPatientProfileArgs";
import { UpdatePatientProfileArgs } from "./args/UpdatePatientProfileArgs";
import { UpsertPatientProfileArgs } from "./args/UpsertPatientProfileArgs";
import { PatientProfile } from "../../../models/PatientProfile";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregatePatientProfile } from "../../outputs/AggregatePatientProfile";
import { PatientProfileGroupBy } from "../../outputs/PatientProfileGroupBy";
export declare class PatientProfileCrudResolver {
    patientProfile(ctx: any, info: GraphQLResolveInfo, args: FindUniquePatientProfileArgs): Promise<PatientProfile | null>;
    findFirstPatientProfile(ctx: any, info: GraphQLResolveInfo, args: FindFirstPatientProfileArgs): Promise<PatientProfile | null>;
    patientProfiles(ctx: any, info: GraphQLResolveInfo, args: FindManyPatientProfileArgs): Promise<PatientProfile[]>;
    createPatientProfile(ctx: any, info: GraphQLResolveInfo, args: CreatePatientProfileArgs): Promise<PatientProfile>;
    createManyPatientProfile(ctx: any, info: GraphQLResolveInfo, args: CreateManyPatientProfileArgs): Promise<AffectedRowsOutput>;
    deletePatientProfile(ctx: any, info: GraphQLResolveInfo, args: DeletePatientProfileArgs): Promise<PatientProfile | null>;
    updatePatientProfile(ctx: any, info: GraphQLResolveInfo, args: UpdatePatientProfileArgs): Promise<PatientProfile | null>;
    deleteManyPatientProfile(ctx: any, info: GraphQLResolveInfo, args: DeleteManyPatientProfileArgs): Promise<AffectedRowsOutput>;
    updateManyPatientProfile(ctx: any, info: GraphQLResolveInfo, args: UpdateManyPatientProfileArgs): Promise<AffectedRowsOutput>;
    upsertPatientProfile(ctx: any, info: GraphQLResolveInfo, args: UpsertPatientProfileArgs): Promise<PatientProfile>;
    aggregatePatientProfile(ctx: any, info: GraphQLResolveInfo, args: AggregatePatientProfileArgs): Promise<AggregatePatientProfile>;
    groupByPatientProfile(ctx: any, info: GraphQLResolveInfo, args: GroupByPatientProfileArgs): Promise<PatientProfileGroupBy[]>;
}
