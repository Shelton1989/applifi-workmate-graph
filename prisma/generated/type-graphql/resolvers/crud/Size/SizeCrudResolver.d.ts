import { GraphQLResolveInfo } from "graphql";
import { AggregateSizeArgs } from "./args/AggregateSizeArgs";
import { CreateManySizeArgs } from "./args/CreateManySizeArgs";
import { CreateSizeArgs } from "./args/CreateSizeArgs";
import { DeleteManySizeArgs } from "./args/DeleteManySizeArgs";
import { DeleteSizeArgs } from "./args/DeleteSizeArgs";
import { FindFirstSizeArgs } from "./args/FindFirstSizeArgs";
import { FindManySizeArgs } from "./args/FindManySizeArgs";
import { FindUniqueSizeArgs } from "./args/FindUniqueSizeArgs";
import { GroupBySizeArgs } from "./args/GroupBySizeArgs";
import { UpdateManySizeArgs } from "./args/UpdateManySizeArgs";
import { UpdateSizeArgs } from "./args/UpdateSizeArgs";
import { UpsertSizeArgs } from "./args/UpsertSizeArgs";
import { Size } from "../../../models/Size";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateSize } from "../../outputs/AggregateSize";
import { SizeGroupBy } from "../../outputs/SizeGroupBy";
export declare class SizeCrudResolver {
    size(ctx: any, info: GraphQLResolveInfo, args: FindUniqueSizeArgs): Promise<Size | null>;
    findFirstSize(ctx: any, info: GraphQLResolveInfo, args: FindFirstSizeArgs): Promise<Size | null>;
    sizes(ctx: any, info: GraphQLResolveInfo, args: FindManySizeArgs): Promise<Size[]>;
    createSize(ctx: any, info: GraphQLResolveInfo, args: CreateSizeArgs): Promise<Size>;
    createManySize(ctx: any, info: GraphQLResolveInfo, args: CreateManySizeArgs): Promise<AffectedRowsOutput>;
    deleteSize(ctx: any, info: GraphQLResolveInfo, args: DeleteSizeArgs): Promise<Size | null>;
    updateSize(ctx: any, info: GraphQLResolveInfo, args: UpdateSizeArgs): Promise<Size | null>;
    deleteManySize(ctx: any, info: GraphQLResolveInfo, args: DeleteManySizeArgs): Promise<AffectedRowsOutput>;
    updateManySize(ctx: any, info: GraphQLResolveInfo, args: UpdateManySizeArgs): Promise<AffectedRowsOutput>;
    upsertSize(ctx: any, info: GraphQLResolveInfo, args: UpsertSizeArgs): Promise<Size>;
    aggregateSize(ctx: any, info: GraphQLResolveInfo, args: AggregateSizeArgs): Promise<AggregateSize>;
    groupBySize(ctx: any, info: GraphQLResolveInfo, args: GroupBySizeArgs): Promise<SizeGroupBy[]>;
}
