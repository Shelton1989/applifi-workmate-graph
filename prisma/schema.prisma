// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

generator typegraphql {
  provider           = "typegraphql-prisma"
  output             = "../prisma/generated/type-graphql"
  emitTranspiledCode = true
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enums
enum ROLE {
  SUPER_ADMIN
  ADMIN
  USER
  WORKSPACE_OWNER
  WORKSPACE_ADMIN
  WORKSPACE_USER
}

// Models
model User {
  Tenant   Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  tenantId String?
  // Mapping to authentication service
  uid      String  @unique
  // used to authenticate tenant user creation
  uuid     String?

  id       String @id @default(uuid()) @map("_id")
  username String @unique
  email    String @unique

  roles ROLE[]

  firstName String?
  lastName  String?
  avatar    String?

  hasAcceptedTerms Boolean? @default(false)
  isFirstTimeUser  Boolean? @default(true)
  isVerified       Boolean? @default(false)
  isActive         Boolean? @default(true)

  NotificationSettings NotificationSettings?

  Notifications Notification[] @relation("Subject")
  Activity      Notification[] @relation("Actor")

  // Market
  Queries Query[]

  Requests  Request[]
  Comments  Comment[]
  Replies   Reply[]
  Reactions Reaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model NotificationSettings {
  id String @id @default(uuid()) @map("_id")

  newDocumentsIndexed Boolean @default(false)
  documentUpdates     Boolean @default(false)
  newRequests         Boolean @default(false)
  requestUpdates      Boolean @default(false)
  commentsOnMyReviews Boolean @default(false)
  repliesToMyReviews  Boolean @default(false)

  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Tenant {
  id String @id @default(uuid()) @map("_id")

  name String
  slug String @unique

  description String?

  logoImage String?
  avatar    String?

  Users User[]

  Queries   Query[]
  Documents Document[]

  Billing Billing?

  acceptedUserEmailDomains String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum PLAN {
  FREE
  STANDARD
  PRO
  ENTERPRISE
}

enum BILLING_STATUS {
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
}

model Billing {
  id String @id @default(uuid()) @map("_id")

  Tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tenantId String @unique

  stripeCustomerId String?

  plan   PLAN           @default(FREE)
  status BILLING_STATUS @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// Social Models
enum REACTION_TYPE {
  LIKE
  LOVE
  DISLIKE
}

model Comment {
  id String @id @default(uuid()) @map("_id")

  text       String
  Document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  documentId String
  Author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId   String

  Replies   Reply[]
  Reactions Reaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Reply {
  id String @id @default(uuid()) @map("_id")

  text      String
  Comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String
  Author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  String

  Reactions Reaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Reaction {
  id String @id @default(uuid()) @map("_id")

  type REACTION_TYPE

  Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String?
  Reply     Reply?   @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  replyId   String?
  Author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// Requests
enum REQUEST_STATUS {
  OPEN
  CLOSED
  CLOSED_WITH_PREJUDICE
  RESOLVED
}

enum REQUEST_TYPE {
  POST_REVIEW
  COMMENT_REVIEW
  PROFILE_REVIEW
  HIGHER_ACCESS
  HELP_REQUEST
}

model Request {
  id String @id @default(uuid()) @map("_id")

  reporterName  String?
  reporterEmail String?
  subject       String?
  message       String?
  type          REQUEST_TYPE

  // If Artist access request
  socialLinks String[]

  // If review requested
  entityId String?

  requestResolution REQUEST_STATUS @default(OPEN)

  Reporter User?   @relation(fields: [userId], references: [id])
  userId   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Notification {
  id String @id @default(uuid()) @map("_id")

  description String

  User   User?   @relation("Subject", fields: [userId], references: [id])
  userId String?

  Actor   User?   @relation("Actor", fields: [actorId], references: [id])
  actorId String?

  entityId String?

  hasBeenViewedBySubject Boolean @default(false)

  link      String?
  mediaLink String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// Meal Models

enum PUBLISH_STATUS {
  DRAFT
  PUBLISHED
  UNPUBLISHED
  UNDER_REVIEW
  PENDING_APPROVAL
  IN_REVIEW
  APPROVED
  NO_ACTION_TAKEN
  REJECTED_WITH_REASON
  DECLINED
  BANNED
  SOFT_BANNED
}

model Query {
  id String @id @default(uuid()) @map("_id")

  Tenant    Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tenantId  String
  queryLink String?

  queryText String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
}

model Document {
  id String @id @default(uuid()) @map("_id")

  publishStatus PUBLISH_STATUS @default(DRAFT)

  title            String
  shortDescription String

  Tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tenantId String

  Comments Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
