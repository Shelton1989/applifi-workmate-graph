// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

generator typegraphql {
  provider           = "typegraphql-prisma"
  output             = "../prisma/generated/type-graphql"
  emitTranspiledCode = true
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enums
enum ROLE {
  SUPER_ADMIN
  ADMIN
  USER
  WORKSPACE_OWNER
  WORKSPACE_ADMIN
  WORKSPACE_USER
  WARD_ADMIN
  WARD_HOST_OR_HOSTESS
  WARD_USER
}

// Models
model User {
  Tenant   Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  tenantId String?
  // Mapping to authentication service
  uid      String  @unique
  // used to authenticate tenant user creation
  uuid     String?

  id       String @id @default(uuid()) @map("_id")
  username String @unique
  email    String @unique

  roles ROLE[]

  firstName   String?
  lastName    String?
  avatar      String?
  coverImage  String?
  dateOfBirth DateTime?

  biography String?

  hasAcceptedTerms Boolean? @default(false)
  isFirstTimeUser  Boolean? @default(true)
  isVerified       Boolean? @default(false)

  NotificationSettings NotificationSettings?
  PatientProfile       PatientProfile?

  Notifications Notification[] @relation("Subject")
  Activity      Notification[] @relation("Actor")

  // Market
  LikedMeals Meal[]   @relation(fields: [mealIds], references: [id])
  mealIds    String[]

  Requests  Request[]
  Posts     Post[]
  Comments  Comment[]
  Replies   Reply[]
  Reactions Reaction[]

  Bookings Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Ward      Ward?    @relation(fields: [wardId], references: [id])
  wardId    String?
}

enum MEAL_KIND {
  FLUID
  LIGHT
  FULL
}

enum MEAL_TYPES {
  BREAKFAST
  LUNCH
  DINNER
  SNACK
}

enum SPECIAL_DIETS {
  MIXED_FLUID
  CLEAR_FLUID
  PUREED
}

enum DIETARY_RESTRICTIONS {
  NONE
  VEGETARIAN
  VEGAN
  GLUTEN_FREE
  DAIRY_FREE
  NUT_FREE
  EGG_FREE
  PORK_FREE
  HALAL
  KOSHER
  PALEO
  OTHER
}

model PatientProfile {
  id String @id @default(uuid()) @map("_id")

  identityNumber String?
  identityType   String?

  bedNumber  String?
  wardNumber String?

  dietaryRestrictions DIETARY_RESTRICTIONS[]
  allowedMealTypes    MEAL_TYPES[]
  allowedMealKinds    MEAL_KIND[]
  doctorSpecificDiets DIETARY_RESTRICTIONS[]
  specialDiets        SPECIAL_DIETS[]

  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model NotificationSettings {
  id String @id @default(uuid()) @map("_id")

  newMenuItems        Boolean @default(false)
  orderUpdates        Boolean @default(false)
  newRequests         Boolean @default(false)
  requestUpdates      Boolean @default(false)
  commentsOnMyReviews Boolean @default(false)
  repliesToMyReviews  Boolean @default(false)

  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Tenant {
  id String @id @default(uuid()) @map("_id")

  name String
  slug String @unique

  description String?

  logoImage  String?
  avatar     String?
  coverImage String?
  MealImages String[]

  Users User[]
  Meals Meal[]

  Orders Order[]

  Locations Location[]

  acceptedUserEmailDomains String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Ward {
  id String @id @default(uuid()) @map("_id")

  number Int
  name   String

  description String?

  Users User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// Social Models
enum REACTION_TYPE {
  LIKE
  LOVE
  DISLIKE
}

enum MEDIA_TYPE {
  IMAGE
  CAROUSEL
  VIDEO
}

model AggregateRating {
  id String @id @default(uuid()) @map("_id")

  ratingValue Float

  countedPosts Int? @default(0)
  allPosts     Int? @default(0)
  ratingCount  Int? @default(0)

  Meal   Meal?   @relation(fields: [mealId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mealId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Post {
  id String @id @default(uuid()) @map("_id")

  type     MEDIA_TYPE @default(IMAGE)
  caption  String?
  mediaUrl String[]

  rating Float

  isCommentsEnabled Boolean @default(true)
  canBeCounted      Boolean @default(true)

  Author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId String

  Meal   Meal?   @relation(fields: [mealId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mealId String?

  Comments  Comment[]
  Reactions Reaction[]

  postLink String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Comment {
  id String @id @default(uuid()) @map("_id")

  text     String
  Post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId   String
  Author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId String

  Replies   Reply[]
  Reactions Reaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Reply {
  id String @id @default(uuid()) @map("_id")

  text      String
  Comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String
  Author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  String

  Reactions Reaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Reaction {
  id String @id @default(uuid()) @map("_id")

  type REACTION_TYPE

  Meal      Meal?    @relation(fields: [mealId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mealId    String?
  Post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String?
  Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String?
  Reply     Reply?   @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  replyId   String?
  Author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// Requests
enum REQUEST_STATUS {
  OPEN
  CLOSED
  CLOSED_WITH_PREJUDICE
  RESOLVED
}

enum REQUEST_TYPE {
  POST_REVIEW
  COMMENT_REVIEW
  PROFILE_REVIEW
  HIGHER_ACCESS
  HELP_REQUEST
}

model Request {
  id String @id @default(uuid()) @map("_id")

  reporterName  String?
  reporterEmail String?
  subject       String?
  message       String?
  type          REQUEST_TYPE

  // If Artist access request
  socialLinks String[]

  // If review requested
  entityId String?

  requestResolution REQUEST_STATUS @default(OPEN)

  Reporter User?   @relation(fields: [userId], references: [id])
  userId   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Notification {
  id String @id @default(uuid()) @map("_id")

  description String

  User   User?   @relation("Subject", fields: [userId], references: [id])
  userId String?

  Actor   User?   @relation("Actor", fields: [actorId], references: [id])
  actorId String?

  entityId String?

  hasBeenViewedBySubject Boolean @default(false)

  link      String?
  mediaLink String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// Meal Models

enum PUBLISH_STATUS {
  DRAFT
  PUBLISHED
  UNPUBLISHED
  UNDER_REVIEW
  PENDING_APPROVAL
  IN_REVIEW
  APPROVED
  NO_ACTION_TAKEN
  REJECTED_WITH_REASON
  DECLINED
  BANNED
  SOFT_BANNED
}

model Meal {
  id String @id @default(uuid()) @map("_id")

  Tenant      Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tenantId    String
  productLink String?

  title       String?
  description String?

  dietaryRestrictions DIETARY_RESTRICTIONS[]
  allowedMealTypes    MEAL_TYPES[]
  allowedMealKinds    MEAL_KIND[]
  doctorSpecificDiets DIETARY_RESTRICTIONS[]
  specialDiets        SPECIAL_DIETS[]

  Items        MealItem[]         @relation(fields: [itemIds], references: [id])
  itemIds      String[]
  Availability MealAvailability[]
  Orders       Order[]
  photo        String?
  gallery      String[]

  AggregateRating AggregateRating?

  publishStatus PUBLISH_STATUS @default(DRAFT)

  LikedBy    User[]   @relation(fields: [likedByIds], references: [id])
  likedByIds String[]

  Posts Post[]

  Features Features[]

  Reactions Reaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model MealItem {
  id String @id @default(uuid()) @map("_id")

  Meals   Meal[]   @relation(fields: [mealIds], references: [id])
  mealIds String[]

  title            String
  shortDescription String

  Options MealItemOption[]

  OrderLineItems OrderLineItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Features {
  id String @id @default(uuid()) @map("_id")

  Meal   Meal   @relation(fields: [mealId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mealId String

  title            String
  shortDescription String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model MealItemOption {
  id String @id @default(uuid()) @map("_id")

  MealItem   MealItem @relation(fields: [mealItemId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mealItemId String

  title            String
  shortDescription String

  OrderLineItems OrderLineItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model MealAvailability {
  id String @id @default(uuid()) @map("_id")

  Meal   Meal   @relation(fields: [mealId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  mealId String

  startDate DateTime?
  endDate   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum ORDER_STATUS {
  OPEN
  ORDERED
  IN_PREPARATION
  READY_FOR_COLLECTION
  IN_TRANSIT
  ARRIVED
  COMPLETE
  CANCELLED
}

model OrderLineItem {
  id String @id @default(uuid()) @map("_id")

  details  String?
  comments String?

  selectedMealItem       MealItem?       @relation(fields: [mealItemId], references: [id])
  mealItemId             String?
  selectedMealItemOption MealItemOption? @relation(fields: [mealItemOptionId], references: [id])
  mealItemOptionId       String?

  Booking   Order  @relation(fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookingId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Order {
  id String @id @default(uuid()) @map("_id")

  Meal   Meal   @relation(fields: [mealId], references: [id])
  mealId String

  status ORDER_STATUS @default(OPEN)

  Patient   User   @relation(fields: [patientId], references: [id])
  patientId String
  Tenant    Tenant @relation(fields: [tenantId], references: [id])
  tenantId  String

  Items OrderLineItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum ADDRESS_TYPE {
  PHYSICAL
  POSTAL
}

model Location {
  id String @id @default(uuid()) @map("_id")

  description String?

  longitude Float?
  latitude  Float?

  googleMapsUrl  String?
  googlePlacesId String?

  type      ADDRESS_TYPE?
  line1     String?
  line2     String?
  city      String?
  district  String?
  country   String?
  code      String?
  isDefault Boolean       @default(false)

  Tenant   Tenant? @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tenantId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
