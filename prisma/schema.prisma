// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

generator typegraphql {
  provider           = "typegraphql-prisma"
  output             = "../prisma/generated/type-graphql"
  emitTranspiledCode = true
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enums
enum ROLE {
  SUPER_ADMIN
  ADMIN
  USER
  WORKSPACE_OWNER
  WORKSPACE_ADMIN
  WORKSPACE_USER
}

// Models
model User {
  Tenant   Tenant? @relation(fields: [tenantId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  tenantId String? @unique
  // Mapping to authentication service
  uid      String  @unique
  // used to authenticate tenant user creation
  uuid     String  @unique

  id       String @id @default(uuid()) @map("_id")
  username String @unique
  email    String @unique

  roles ROLE[]

  firstName   String?
  lastName    String?
  avatar      String?
  coverImage  String?
  dateOfBirth DateTime?

  biography String?

  hasAcceptedTerms Boolean? @default(false)
  isFirstTimeUser  Boolean? @default(true)
  isVerified       Boolean? @default(false)

  NotificationSettings NotificationSettings?

  Notifications Notification[] @relation("Subject")
  Activity      Notification[] @relation("Actor")

  // Social
  Following    User[]   @relation("UserFollows", fields: [followingIds], references: [id])
  followingIds String[]
  Followers    User[]   @relation("UserFollows", fields: [followerIds], references: [id])
  followerIds  String[]

  // Market
  LikedExperiences Experience[] @relation(fields: [experienceIds], references: [id])
  experienceIds    String[]

  Requests  Request[]
  Posts     Post[]
  Comments  Comment[]
  Replies   Reply[]
  Reactions Reaction[]

  Bookings BookingOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model NotificationSettings {
  id String @id @default(uuid()) @map("_id")

  newArrivals           Boolean @default(true)
  bookingOrOrderUpdates Boolean @default(true)
  promotions            Boolean @default(true)
  saleAlerts            Boolean @default(true)
  newContentILike       Boolean @default(true)
  commentsOnMyReviews   Boolean @default(true)
  repliesToMyComments   Boolean @default(true)
  repliesToThreads      Boolean @default(true)

  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Tenant {
  id String @id @default(uuid()) @map("_id")

  name String
  slug String @unique

  description String?

  avatar           String?
  coverImage       String?
  experienceImages String[]

  Users       User[]
  Experiences Experience[]

  BookingOrders BookingOrder[]

  Locations Location[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// Social Models
enum REACTION_TYPE {
  LIKE
  LOVE
  DISLIKE
}

enum MEDIA_TYPE {
  IMAGE
  CAROUSEL
  VIDEO
}

model AggregateRating {
  id String @id @default(uuid()) @map("_id")

  ratingValue Float

  countedPosts Int? @default(0)
  allPosts     Int? @default(0)
  ratingCount  Int? @default(0)

  Experience   Experience? @relation(fields: [experienceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  experienceId String?     @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Post {
  id String @id @default(uuid()) @map("_id")

  type     MEDIA_TYPE @default(IMAGE)
  caption  String?
  mediaUrl String[]

  rating Float

  isCommentsEnabled Boolean @default(true)
  canBeCounted      Boolean @default(true)

  Author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId String

  Experience   Experience? @relation(fields: [experienceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  experienceId String?

  Comments  Comment[]
  Reactions Reaction[]

  postLink String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Comment {
  id String @id @default(uuid()) @map("_id")

  text     String
  Post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId   String
  Author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId String

  Replies   Reply[]
  Reactions Reaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Reply {
  id String @id @default(uuid()) @map("_id")

  text      String
  Comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String
  Author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  String

  Reactions Reaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Reaction {
  id String @id @default(uuid()) @map("_id")

  type REACTION_TYPE

  Post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String?
  Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String?
  Reply     Reply?   @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  replyId   String?
  Author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// Requests
enum REQUEST_STATUS {
  OPEN
  CLOSED
  CLOSED_WITH_PREJUDICE
  RESOLVED
}

enum REQUEST_TYPE {
  POST_REVIEW
  COMMENT_REVIEW
  PROFILE_REVIEW
  ARTIST_ACCESS
  HELP_REQUEST
}

model Request {
  id String @id @default(uuid()) @map("_id")

  reporterName  String?
  reporterEmail String?
  subject       String?
  message       String?
  type          REQUEST_TYPE

  // If Artist access request
  socialLinks String[]

  // If review requested
  entityId String?

  requestResolution REQUEST_STATUS @default(OPEN)

  Reporter User?   @relation(fields: [userId], references: [id])
  userId   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Notification {
  id String @id @default(uuid()) @map("_id")

  description String

  User   User?   @relation("Subject", fields: [userId], references: [id])
  userId String?

  Actor   User?   @relation("Actor", fields: [actorId], references: [id])
  actorId String?

  entityId String?

  hasBeenViewedBySubject Boolean @default(false)

  link      String?
  mediaLink String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// Experience Models
enum EXPERIENCE_CATEGORY {
  CAMPING
}

enum PUBLISH_STATUS {
  DRAFT
  PUBLISHED
  UNPUBLISHED
  UNDER_REVIEW
  PENDING_APPROVAL
  IN_REVIEW
  APPROVED
  NO_ACTION_TAKEN
  REJECTED_WITH_REASON
  DECLINED
  BANNED
  SOFT_BANNED
}

model Experience {
  id String @id @default(uuid()) @map("_id")

  Tenant          Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tenantId        String
  productLink     String?
  stripeProductId String?

  title       String?
  description String?
  category    EXPERIENCE_CATEGORY?

  Availability ExperienceAvailability[]
  Bookings     BookingOrder[]
  photo        String?
  gallery      String[]

  duration Int?

  AggregateRating AggregateRating?

  publishStatus PUBLISH_STATUS @default(DRAFT)

  LikedBy    User[]   @relation(fields: [likedByIds], references: [id])
  likedByIds String[]

  Locations Location[]
  Price     Price?

  Posts Post[]

  Features Features[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Features {
  id String @id @default(uuid()) @map("_id")

  Experience Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  experienceId String

  title       String
  shortDescription String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum AVAILABILITY_TYPE {
  WEEKEND
  DAILY
  HOURLY
  HALF_HOURLY
}

model ExperienceAvailability {
  id String @id @default(uuid()) @map("_id")

  Experience   Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  experienceId String

  startDate DateTime?
  endDate   DateTime?

  availabilityType AVAILABILITY_TYPE @default(DAILY)

  spacesAvailable    Int
  spacesBooked       Int

  datesAreFlexible   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// Utilities models
model Currency {
  id String @id @default(uuid()) @map("_id")

  name   String
  symbol String
  code   String

  prices Price[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Price {
  id String @id @default(uuid()) @map("_id")

  priceInLowestDenomination Int
  displayPrice              String
  currency                  Currency? @relation(fields: [currencyId], references: [id])
  currencyId                String?

  details String?

  Experience   Experience @relation(fields: [experienceId], references: [id])
  experienceId String @unique

  BookingLineItems BookingOrderLineItem[]

  isBasePrice Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// model Base {
//   id        String @id @default(uuid()) @map("_id")

//   createdAt        DateTime          @default(now())
//   updatedAt        DateTime          @default(now()) @updatedAt
// }

enum LIST_TYPE {
  TRENDING
  LATEST
  POPULAR
  FEATURED
}

model TopicLists {
  id String @id @default(uuid()) @map("_id")

  type  LIST_TYPE
  title String
  lists Int[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum BOOKING_ORDER_STATUS {
  OPEN
  BOOKED
  BOOKED_PENDING_PAYMENT
  READY_FOR_CHECK_IN
  CHECKED_IN
  READY_FOR_CHECK_OUT
  COMPLETE
  CANCELLED
}

model BookingOrderLineItem {
  id String @id @default(uuid()) @map("_id")

  details String?
  comments String?

  LineItemPrice Price  @relation(fields: [priceId], references: [id])
  priceId       String

  Booking   BookingOrder @relation(fields: [bookingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  bookingId String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model BookingOrder {
  id String @id @default(uuid()) @map("_id")

  Experience   Experience @relation(fields: [experienceId], references: [id])
  experienceId String

  status              BOOKING_ORDER_STATUS @default(OPEN)
  SelectedPaymentType String?

  stripePaymentReference String?

  Buyer    User   @relation(fields: [buyerId], references: [id])
  buyerId  String
  Tenant   Tenant @relation(fields: [tenantId], references: [id])
  tenantId String

  Items BookingOrderLineItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

enum ADDRESS_TYPE {
  PHYSICAL
  POSTAL
}

model Location {
  id String @id @default(uuid()) @map("_id")

  description String?

  longitude Float?
  latitude  Float?

  googleMapsUrl  String?
  googlePlacesId String?

  type      ADDRESS_TYPE?
  line1     String?
  line2     String?
  city      String?
  district  String?
  country   String?
  code      String?
  isDefault Boolean      @default(false)

  Experience   Experience? @relation(fields: [experienceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  experienceId String?
  Tenant       Tenant?     @relation(fields: [tenantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tenantId     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
