// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

generator typegraphql {
  provider           = "typegraphql-prisma"
  output             = "../prisma/generated/type-graphql"
  emitTranspiledCode = true
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enums
enum ROLE {
  SUPER_ADMIN
  ADMIN
  CRITIC
  USER
}

// Models
model User {
  // Mapping to authentication service
  uid String @unique

  id       String @id @default(uuid()) @map("_id")
  username String @unique
  email    String @unique

  role ROLE? @default(USER)

  firstName   String?
  lastName    String?
  avatar      String?
  coverImage  String?
  dateOfBirth DateTime

  biography String?

  hasAcceptedTerms Boolean @default(false)
  isFirstTimeUser  Boolean @default(true)
  isVerified       Boolean @default(false)

  NotificationSettings NotificationSettings?

  Notifications Notification[] @relation("Subject")
  Activity      Notification[] @relation("Actor")

  // Social
  Following    User[]   @relation("UserFollows", fields: [followingIds], references: [id])
  followingIds String[]
  Followers    User[]   @relation("UserFollows", fields: [followerIds], references: [id])
  followerIds  String[]

  Requests  Request[]
  Posts     Post[]
  Comments  Comment[]
  Replies   Reply[]
  Reactions Reaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model NotificationSettings {
  id String @id @default(uuid()) @map("_id")

  newContentILike     Boolean @default(true)
  commentsOnMyReviews Boolean @default(true)
  repliesToMyComments Boolean @default(true)
  repliesToThreads    Boolean @default(true)

  User   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// Social Models
enum REACTION_TYPE {
  LIKE
  LOVE
  DISLIKE
}

enum MEDIA_TYPE {
  TOPIC
  SEASON_SERIES
  EPISODE
}

enum TOPIC_TYPE {
  MOVIE
  SERIES
  DOCUMENTARY
  STREAMING_PLATFORM
  OPINION_PIECE
  NEWS_ENTITY
  ARTICLE
  PODCAST
  BOOK
}

model AggregateRating {
  id String @id @default(uuid()) @map("_id")

  ratingValue Float

  countedPosts Int? @default(0)
  allPosts     Int? @default(0)
  ratingCount  Int? @default(0)

  Topic          Topic?        
  SeasonSeries   SeasonSeries? 
  Episode        Episode?      


  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Topic {
  id String @id @default(uuid()) @map("_id")

  title      String
  year       String
  poster     String
  overview   String
  trailer    String
  coverImage String
  tagline    String
  genres     String[]
  creators   String[]
  authors    String[]
  artists    String[]
  producers  String[]
  directors  String[]
  publishers String[]
  cast       String[]
  type       String

  releaseDate DateTime

  AggregateRating AggregateRating? @relation(fields: [aggregateRatingId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  aggregateRatingId String? @unique @default(uuid())

  Reactions    Reaction[]
  SeasonSeries SeasonSeries[]
  Posts        Post[]

  topicType TOPIC_TYPE @default(MOVIE)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model SeasonSeries {
  id String @id @default(uuid()) @map("_id")

  seasonOrSeriesNumber Int

  title      String
  year       String
  poster     String
  overview   String
  trailer    String
  coverImage String
  tagline    String

  releaseDate DateTime

  Topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  topicId String

  AggregateRating AggregateRating? @relation(fields: [aggregateRatingId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  aggregateRatingId String? @unique @default(uuid())

  Reactions Reaction[]
  Episodes  Episode[]
  Posts     Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Episode {
  id String @id @default(uuid()) @map("_id")

  episodeNumber Int

  title      String
  year       String
  poster     String
  overview   String
  trailer    String
  coverImage String
  tagline    String

  releaseDate DateTime

  SeasonSeries   SeasonSeries @relation(fields: [seasonSeriesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  seasonSeriesId String

  AggregateRating AggregateRating? @relation(fields: [aggregateRatingId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  aggregateRatingId String? @unique @default(uuid())

  Reactions Reaction[]
  Posts     Post[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Post {
  id String @id @default(uuid()) @map("_id")

  type     MEDIA_TYPE
  caption  String?
  mediaUrl String[]

  rating Float

  isCommentsEnabled Boolean @default(true)
  canBeCounted      Boolean @default(true)

  Author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId String

  Comments  Comment[]
  Reactions Reaction[]

  Topic          Topic?        @relation(fields: [topicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  topicId        String?
  SeasonSeries   SeasonSeries? @relation(fields: [seasonSeriesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  seasonSeriesId String?
  Episode        Episode?      @relation(fields: [episodeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  episodeId      String?

  postLink String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Comment {
  id String @id @default(uuid()) @map("_id")

  text     String
  Post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId   String
  Author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId String

  Replies   Reply[]
  Reactions Reaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Reply {
  id String @id @default(uuid()) @map("_id")

  text      String
  Comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String
  Author    User    @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  String

  Reactions Reaction[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Reaction {
  id String @id @default(uuid()) @map("_id")

  type REACTION_TYPE

  Post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String?
  Comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  commentId String?
  Reply     Reply?   @relation(fields: [replyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  replyId   String?
  Author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  String

  // Entity
  Topic          Topic?        @relation(fields: [topicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  topicId        String?
  SeasonSeries   SeasonSeries? @relation(fields: [seasonSeriesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  seasonSeriesId String?
  Episode        Episode?      @relation(fields: [episodeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  episodeId      String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// Requests
enum REQUEST_STATUS {
  OPEN
  CLOSED
  CLOSED_WITH_PREJUDICE
  RESOLVED
}

enum REQUEST_TYPE {
  POST_REVIEW
  COMMENT_REVIEW
  PROFILE_REVIEW
  ARTIST_ACCESS
  HELP_REQUEST
}

model Request {
  id String @id @default(uuid()) @map("_id")

  reporterName  String?
  reporterEmail String?
  subject       String?
  message       String?
  type          REQUEST_TYPE

  // If Artist access request
  socialLinks String[]

  // If review requested
  entityId String?

  requestResolution REQUEST_STATUS @default(OPEN)

  Reporter User?   @relation(fields: [userId], references: [id])
  userId   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Notification {
  id String @id @default(uuid()) @map("_id")

  description String

  User   User?   @relation("Subject", fields: [userId], references: [id])
  userId String?

  Actor   User?   @relation("Actor", fields: [actorId], references: [id])
  actorId String?

  entityId String?

  hasBeenViewedBySubject Boolean @default(false)

  link      String?
  mediaLink String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

// model Base {
//   id        String @id @default(uuid()) @map("_id")

//   createdAt        DateTime          @default(now())
//   updatedAt        DateTime          @default(now()) @updatedAt
// }
